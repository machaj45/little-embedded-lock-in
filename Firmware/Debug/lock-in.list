
DSS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000043d8  0800bf08  0800bf08  0001bf08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102e0  080102e0  00030214  2**0
                  CONTENTS
  4 .ARM          00000000  080102e0  080102e0  00030214  2**0
                  CONTENTS
  5 .preinit_array 00000000  080102e0  080102e0  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102e0  080102e0  000202e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102e4  080102e4  000202e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080102e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e698  20000218  080104fc  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e8b0  080104fc  0003e8b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001571a  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ee0  00000000  00000000  0004595e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001238  00000000  00000000  00048840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00049a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fd92  00000000  00000000  0004ab18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e95  00000000  00000000  0006a8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb72f  00000000  00000000  0007b73f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136e6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e8  00000000  00000000  00136eec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bef0 	.word	0x0800bef0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800bef0 	.word	0x0800bef0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x28>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x28>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f001 ffc3 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f008 fd5a 	bl	800976c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 ffdb 	bl	8002c9e <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f001 ffa3 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000040 	.word	0x20000040
 8000d1c:	20000004 	.word	0x20000004
 8000d20:	20000000 	.word	0x20000000

08000d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000004 	.word	0x20000004
 8000d48:	20000284 	.word	0x20000284

08000d4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000284 	.word	0x20000284

08000d64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_Delay+0x40>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b09a      	sub	sp, #104	; 0x68
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e1e3      	b.n	80011b8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d176      	bne.n	8000ef0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d152      	bne.n	8000eb0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f006 f951 	bl	80070cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d13b      	bne.n	8000eb0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f001 fd1d 	bl	8002878 <ADC_Disable>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d12f      	bne.n	8000eb0 <HAL_ADC_Init+0xe0>
 8000e50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d12b      	bne.n	8000eb0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e60:	f023 0302 	bic.w	r3, r3, #2
 8000e64:	f043 0202 	orr.w	r2, r3, #2
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e7a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e8c:	4b92      	ldr	r3, [pc, #584]	; (80010d8 <HAL_ADC_Init+0x308>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a92      	ldr	r2, [pc, #584]	; (80010dc <HAL_ADC_Init+0x30c>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9a      	lsrs	r2, r3, #18
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ea2:	e002      	b.n	8000eaa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f9      	bne.n	8000ea4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ecc:	d110      	bne.n	8000ef0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f023 0312 	bic.w	r3, r3, #18
 8000ed6:	f043 0210 	orr.w	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f040 8150 	bne.w	800119e <HAL_ADC_Init+0x3ce>
 8000efe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 814b 	bne.w	800119e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 8143 	bne.w	800119e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f20:	f043 0202 	orr.w	r2, r3, #2
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f30:	d004      	beq.n	8000f3c <HAL_ADC_Init+0x16c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a6a      	ldr	r2, [pc, #424]	; (80010e0 <HAL_ADC_Init+0x310>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_ADC_Init+0x170>
 8000f3c:	4b69      	ldr	r3, [pc, #420]	; (80010e4 <HAL_ADC_Init+0x314>)
 8000f3e:	e000      	b.n	8000f42 <HAL_ADC_Init+0x172>
 8000f40:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <HAL_ADC_Init+0x318>)
 8000f42:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f4c:	d102      	bne.n	8000f54 <HAL_ADC_Init+0x184>
 8000f4e:	4b64      	ldr	r3, [pc, #400]	; (80010e0 <HAL_ADC_Init+0x310>)
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	e01a      	b.n	8000f8a <HAL_ADC_Init+0x1ba>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a61      	ldr	r2, [pc, #388]	; (80010e0 <HAL_ADC_Init+0x310>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d103      	bne.n	8000f66 <HAL_ADC_Init+0x196>
 8000f5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e011      	b.n	8000f8a <HAL_ADC_Init+0x1ba>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a60      	ldr	r2, [pc, #384]	; (80010ec <HAL_ADC_Init+0x31c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d102      	bne.n	8000f76 <HAL_ADC_Init+0x1a6>
 8000f70:	4b5f      	ldr	r3, [pc, #380]	; (80010f0 <HAL_ADC_Init+0x320>)
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	e009      	b.n	8000f8a <HAL_ADC_Init+0x1ba>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a5d      	ldr	r2, [pc, #372]	; (80010f0 <HAL_ADC_Init+0x320>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d102      	bne.n	8000f86 <HAL_ADC_Init+0x1b6>
 8000f80:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <HAL_ADC_Init+0x31c>)
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e001      	b.n	8000f8a <HAL_ADC_Init+0x1ba>
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d108      	bne.n	8000faa <HAL_ADC_Init+0x1da>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Init+0x1da>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_ADC_Init+0x1dc>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11c      	bne.n	8000fea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d010      	beq.n	8000fd8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d107      	bne.n	8000fd2 <HAL_ADC_Init+0x202>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x202>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_ADC_Init+0x204>
 8000fd2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d108      	bne.n	8000fea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fe8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7e5b      	ldrb	r3, [r3, #25]
 8000fee:	035b      	lsls	r3, r3, #13
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ff4:	2a01      	cmp	r2, #1
 8000ff6:	d002      	beq.n	8000ffe <HAL_ADC_Init+0x22e>
 8000ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ffc:	e000      	b.n	8001000 <HAL_ADC_Init+0x230>
 8000ffe:	2200      	movs	r2, #0
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4313      	orrs	r3, r2
 800100e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001010:	4313      	orrs	r3, r2
 8001012:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d11b      	bne.n	8001056 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7e5b      	ldrb	r3, [r3, #25]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	3b01      	subs	r3, #1
 800102c:	045a      	lsls	r2, r3, #17
 800102e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001030:	4313      	orrs	r3, r2
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	663b      	str	r3, [r7, #96]	; 0x60
 8001038:	e00d      	b.n	8001056 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001042:	f043 0220 	orr.w	r2, r3, #32
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f043 0201 	orr.w	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	2b01      	cmp	r3, #1
 800105c:	d054      	beq.n	8001108 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <HAL_ADC_Init+0x31c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d004      	beq.n	8001072 <HAL_ADC_Init+0x2a2>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <HAL_ADC_Init+0x320>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d140      	bne.n	80010f4 <HAL_ADC_Init+0x324>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800107a:	d02a      	beq.n	80010d2 <HAL_ADC_Init+0x302>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001084:	d022      	beq.n	80010cc <HAL_ADC_Init+0x2fc>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800108e:	d01a      	beq.n	80010c6 <HAL_ADC_Init+0x2f6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001098:	d012      	beq.n	80010c0 <HAL_ADC_Init+0x2f0>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80010a2:	d00a      	beq.n	80010ba <HAL_ADC_Init+0x2ea>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80010ac:	d002      	beq.n	80010b4 <HAL_ADC_Init+0x2e4>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	e023      	b.n	80010fc <HAL_ADC_Init+0x32c>
 80010b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010b8:	e020      	b.n	80010fc <HAL_ADC_Init+0x32c>
 80010ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010be:	e01d      	b.n	80010fc <HAL_ADC_Init+0x32c>
 80010c0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010c4:	e01a      	b.n	80010fc <HAL_ADC_Init+0x32c>
 80010c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ca:	e017      	b.n	80010fc <HAL_ADC_Init+0x32c>
 80010cc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80010d0:	e014      	b.n	80010fc <HAL_ADC_Init+0x32c>
 80010d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010d6:	e011      	b.n	80010fc <HAL_ADC_Init+0x32c>
 80010d8:	20000040 	.word	0x20000040
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	50000100 	.word	0x50000100
 80010e4:	50000300 	.word	0x50000300
 80010e8:	50000700 	.word	0x50000700
 80010ec:	50000400 	.word	0x50000400
 80010f0:	50000500 	.word	0x50000500
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001100:	4313      	orrs	r3, r2
 8001102:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001104:	4313      	orrs	r3, r2
 8001106:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b00      	cmp	r3, #0
 8001114:	d114      	bne.n	8001140 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001124:	f023 0302 	bic.w	r3, r3, #2
 8001128:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7e1b      	ldrb	r3, [r3, #24]
 800112e:	039a      	lsls	r2, r3, #14
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4313      	orrs	r3, r2
 800113a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800113c:	4313      	orrs	r3, r2
 800113e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_ADC_Init+0x3f0>)
 8001148:	4013      	ands	r3, r2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001150:	430b      	orrs	r3, r1
 8001152:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10c      	bne.n	8001176 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f023 010f 	bic.w	r1, r3, #15
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
 8001174:	e007      	b.n	8001186 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020f 	bic.w	r2, r2, #15
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
 800119c:	e00a      	b.n	80011b4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f023 0312 	bic.w	r3, r3, #18
 80011a6:	f043 0210 	orr.w	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3768      	adds	r7, #104	; 0x68
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	fff0c007 	.word	0xfff0c007

080011c4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 80f9 	bne.w	80013d2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Start+0x2a>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e0f4      	b.n	80013d8 <HAL_ADC_Start+0x214>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f001 fae0 	bl	80027bc <ADC_Enable>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 80e0 	bne.w	80013c8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001224:	d004      	beq.n	8001230 <HAL_ADC_Start+0x6c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <HAL_ADC_Start+0x21c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d106      	bne.n	800123e <HAL_ADC_Start+0x7a>
 8001230:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <HAL_ADC_Start+0x220>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2b00      	cmp	r3, #0
 800123a:	d010      	beq.n	800125e <HAL_ADC_Start+0x9a>
 800123c:	e005      	b.n	800124a <HAL_ADC_Start+0x86>
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_ADC_Start+0x224>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_ADC_Start+0x9a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001252:	d004      	beq.n	800125e <HAL_ADC_Start+0x9a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a64      	ldr	r2, [pc, #400]	; (80013ec <HAL_ADC_Start+0x228>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d115      	bne.n	800128a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d036      	beq.n	80012e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001288:	e02d      	b.n	80012e6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129e:	d004      	beq.n	80012aa <HAL_ADC_Start+0xe6>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a4e      	ldr	r2, [pc, #312]	; (80013e0 <HAL_ADC_Start+0x21c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10a      	bne.n	80012c0 <HAL_ADC_Start+0xfc>
 80012aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	e008      	b.n	80012d2 <HAL_ADC_Start+0x10e>
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_ADC_Start+0x228>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f2:	d106      	bne.n	8001302 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	f023 0206 	bic.w	r2, r3, #6
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001300:	e002      	b.n	8001308 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	221c      	movs	r2, #28
 8001316:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001320:	d004      	beq.n	800132c <HAL_ADC_Start+0x168>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <HAL_ADC_Start+0x21c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d106      	bne.n	800133a <HAL_ADC_Start+0x176>
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_ADC_Start+0x220>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2b00      	cmp	r3, #0
 8001336:	d03e      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001338:	e005      	b.n	8001346 <HAL_ADC_Start+0x182>
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_ADC_Start+0x224>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d037      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134e:	d004      	beq.n	800135a <HAL_ADC_Start+0x196>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_ADC_Start+0x21c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d106      	bne.n	8001368 <HAL_ADC_Start+0x1a4>
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_ADC_Start+0x220>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2b05      	cmp	r3, #5
 8001364:	d027      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001366:	e005      	b.n	8001374 <HAL_ADC_Start+0x1b0>
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_ADC_Start+0x224>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	2b05      	cmp	r3, #5
 8001372:	d020      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137c:	d004      	beq.n	8001388 <HAL_ADC_Start+0x1c4>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_ADC_Start+0x21c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d106      	bne.n	8001396 <HAL_ADC_Start+0x1d2>
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_ADC_Start+0x220>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2b09      	cmp	r3, #9
 8001392:	d010      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 8001394:	e005      	b.n	80013a2 <HAL_ADC_Start+0x1de>
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_ADC_Start+0x224>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	2b09      	cmp	r3, #9
 80013a0:	d009      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013aa:	d004      	beq.n	80013b6 <HAL_ADC_Start+0x1f2>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_ADC_Start+0x228>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10f      	bne.n	80013d6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0204 	orr.w	r2, r2, #4
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	e006      	b.n	80013d6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80013d0:	e001      	b.n	80013d6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	50000100 	.word	0x50000100
 80013e4:	50000300 	.word	0x50000300
 80013e8:	50000700 	.word	0x50000700
 80013ec:	50000400 	.word	0x50000400

080013f0 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_ADC_Stop+0x1a>
 8001406:	2302      	movs	r3, #2
 8001408:	e023      	b.n	8001452 <HAL_ADC_Stop+0x62>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001412:	216c      	movs	r1, #108	; 0x6c
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f001 fa8f 	bl	8002938 <ADC_ConversionStop>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f001 fa27 	bl	8002878 <ADC_Disable>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d109      	bne.n	8001448 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_ADC_Stop_IT+0x1a>
 8001470:	2302      	movs	r3, #2
 8001472:	e02b      	b.n	80014cc <HAL_ADC_Stop_IT+0x72>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800147c:	216c      	movs	r1, #108	; 0x6c
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f001 fa5a 	bl	8002938 <ADC_ConversionStop>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d119      	bne.n	80014c2 <HAL_ADC_Stop_IT+0x68>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 021c 	bic.w	r2, r2, #28
 800149c:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f001 f9ea 	bl	8002878 <ADC_Disable>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_ADC_Stop_IT+0x68>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d106      	bne.n	8001504 <HAL_ADC_IRQHandler+0x30>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b04      	cmp	r3, #4
 8001502:	d00f      	beq.n	8001524 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800150e:	2b08      	cmp	r3, #8
 8001510:	f040 80c0 	bne.w	8001694 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b08      	cmp	r3, #8
 8001520:	f040 80b8 	bne.w	8001694 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001544:	d004      	beq.n	8001550 <HAL_ADC_IRQHandler+0x7c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a95      	ldr	r2, [pc, #596]	; (80017a0 <HAL_ADC_IRQHandler+0x2cc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d106      	bne.n	800155e <HAL_ADC_IRQHandler+0x8a>
 8001550:	4b94      	ldr	r3, [pc, #592]	; (80017a4 <HAL_ADC_IRQHandler+0x2d0>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	2b00      	cmp	r3, #0
 800155a:	d03e      	beq.n	80015da <HAL_ADC_IRQHandler+0x106>
 800155c:	e005      	b.n	800156a <HAL_ADC_IRQHandler+0x96>
 800155e:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <HAL_ADC_IRQHandler+0x2d4>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	2b00      	cmp	r3, #0
 8001568:	d037      	beq.n	80015da <HAL_ADC_IRQHandler+0x106>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001572:	d004      	beq.n	800157e <HAL_ADC_IRQHandler+0xaa>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a89      	ldr	r2, [pc, #548]	; (80017a0 <HAL_ADC_IRQHandler+0x2cc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d106      	bne.n	800158c <HAL_ADC_IRQHandler+0xb8>
 800157e:	4b89      	ldr	r3, [pc, #548]	; (80017a4 <HAL_ADC_IRQHandler+0x2d0>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	2b05      	cmp	r3, #5
 8001588:	d027      	beq.n	80015da <HAL_ADC_IRQHandler+0x106>
 800158a:	e005      	b.n	8001598 <HAL_ADC_IRQHandler+0xc4>
 800158c:	4b86      	ldr	r3, [pc, #536]	; (80017a8 <HAL_ADC_IRQHandler+0x2d4>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 031f 	and.w	r3, r3, #31
 8001594:	2b05      	cmp	r3, #5
 8001596:	d020      	beq.n	80015da <HAL_ADC_IRQHandler+0x106>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a0:	d004      	beq.n	80015ac <HAL_ADC_IRQHandler+0xd8>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a7e      	ldr	r2, [pc, #504]	; (80017a0 <HAL_ADC_IRQHandler+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d106      	bne.n	80015ba <HAL_ADC_IRQHandler+0xe6>
 80015ac:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <HAL_ADC_IRQHandler+0x2d0>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2b09      	cmp	r3, #9
 80015b6:	d010      	beq.n	80015da <HAL_ADC_IRQHandler+0x106>
 80015b8:	e005      	b.n	80015c6 <HAL_ADC_IRQHandler+0xf2>
 80015ba:	4b7b      	ldr	r3, [pc, #492]	; (80017a8 <HAL_ADC_IRQHandler+0x2d4>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	2b09      	cmp	r3, #9
 80015c4:	d009      	beq.n	80015da <HAL_ADC_IRQHandler+0x106>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ce:	d004      	beq.n	80015da <HAL_ADC_IRQHandler+0x106>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a75      	ldr	r2, [pc, #468]	; (80017ac <HAL_ADC_IRQHandler+0x2d8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d104      	bne.n	80015e4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	e00f      	b.n	8001604 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ec:	d004      	beq.n	80015f8 <HAL_ADC_IRQHandler+0x124>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6b      	ldr	r2, [pc, #428]	; (80017a0 <HAL_ADC_IRQHandler+0x2cc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d102      	bne.n	80015fe <HAL_ADC_IRQHandler+0x12a>
 80015f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015fc:	e000      	b.n	8001600 <HAL_ADC_IRQHandler+0x12c>
 80015fe:	4b6b      	ldr	r3, [pc, #428]	; (80017ac <HAL_ADC_IRQHandler+0x2d8>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800160e:	2b00      	cmp	r3, #0
 8001610:	d139      	bne.n	8001686 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001618:	2b00      	cmp	r3, #0
 800161a:	d134      	bne.n	8001686 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b08      	cmp	r3, #8
 8001628:	d12d      	bne.n	8001686 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d11a      	bne.n	800166e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 020c 	bic.w	r2, r2, #12
 8001646:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d112      	bne.n	8001686 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
 800166c:	e00b      	b.n	8001686 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f043 0210 	orr.w	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f007 fe04 	bl	8009294 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	220c      	movs	r2, #12
 8001692:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d106      	bne.n	80016b0 <HAL_ADC_IRQHandler+0x1dc>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	2b20      	cmp	r3, #32
 80016ae:	d00f      	beq.n	80016d0 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	f040 813c 	bne.w	8001938 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ca:	2b40      	cmp	r3, #64	; 0x40
 80016cc:	f040 8134 	bne.w	8001938 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e4:	d004      	beq.n	80016f0 <HAL_ADC_IRQHandler+0x21c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a2d      	ldr	r2, [pc, #180]	; (80017a0 <HAL_ADC_IRQHandler+0x2cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d106      	bne.n	80016fe <HAL_ADC_IRQHandler+0x22a>
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <HAL_ADC_IRQHandler+0x2d0>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d03e      	beq.n	800177a <HAL_ADC_IRQHandler+0x2a6>
 80016fc:	e005      	b.n	800170a <HAL_ADC_IRQHandler+0x236>
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_ADC_IRQHandler+0x2d4>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2b00      	cmp	r3, #0
 8001708:	d037      	beq.n	800177a <HAL_ADC_IRQHandler+0x2a6>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001712:	d004      	beq.n	800171e <HAL_ADC_IRQHandler+0x24a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_ADC_IRQHandler+0x2cc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d106      	bne.n	800172c <HAL_ADC_IRQHandler+0x258>
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_ADC_IRQHandler+0x2d0>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2b05      	cmp	r3, #5
 8001728:	d027      	beq.n	800177a <HAL_ADC_IRQHandler+0x2a6>
 800172a:	e005      	b.n	8001738 <HAL_ADC_IRQHandler+0x264>
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_ADC_IRQHandler+0x2d4>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2b05      	cmp	r3, #5
 8001736:	d020      	beq.n	800177a <HAL_ADC_IRQHandler+0x2a6>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001740:	d004      	beq.n	800174c <HAL_ADC_IRQHandler+0x278>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <HAL_ADC_IRQHandler+0x2cc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d106      	bne.n	800175a <HAL_ADC_IRQHandler+0x286>
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_ADC_IRQHandler+0x2d0>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2b09      	cmp	r3, #9
 8001756:	d010      	beq.n	800177a <HAL_ADC_IRQHandler+0x2a6>
 8001758:	e005      	b.n	8001766 <HAL_ADC_IRQHandler+0x292>
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_ADC_IRQHandler+0x2d4>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2b09      	cmp	r3, #9
 8001764:	d009      	beq.n	800177a <HAL_ADC_IRQHandler+0x2a6>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176e:	d004      	beq.n	800177a <HAL_ADC_IRQHandler+0x2a6>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_ADC_IRQHandler+0x2d8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d104      	bne.n	8001784 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	e018      	b.n	80017b6 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800178c:	d004      	beq.n	8001798 <HAL_ADC_IRQHandler+0x2c4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_ADC_IRQHandler+0x2cc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d10b      	bne.n	80017b0 <HAL_ADC_IRQHandler+0x2dc>
 8001798:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800179c:	e009      	b.n	80017b2 <HAL_ADC_IRQHandler+0x2de>
 800179e:	bf00      	nop
 80017a0:	50000100 	.word	0x50000100
 80017a4:	50000300 	.word	0x50000300
 80017a8:	50000700 	.word	0x50000700
 80017ac:	50000400 	.word	0x50000400
 80017b0:	4b9d      	ldr	r3, [pc, #628]	; (8001a28 <HAL_ADC_IRQHandler+0x554>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80ad 	bne.w	800192a <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 80a5 	bne.w	800192a <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 809f 	bne.w	800192a <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f6:	2b40      	cmp	r3, #64	; 0x40
 80017f8:	f040 8097 	bne.w	800192a <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001804:	d004      	beq.n	8001810 <HAL_ADC_IRQHandler+0x33c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a88      	ldr	r2, [pc, #544]	; (8001a2c <HAL_ADC_IRQHandler+0x558>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d106      	bne.n	800181e <HAL_ADC_IRQHandler+0x34a>
 8001810:	4b87      	ldr	r3, [pc, #540]	; (8001a30 <HAL_ADC_IRQHandler+0x55c>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2b00      	cmp	r3, #0
 800181a:	d03e      	beq.n	800189a <HAL_ADC_IRQHandler+0x3c6>
 800181c:	e005      	b.n	800182a <HAL_ADC_IRQHandler+0x356>
 800181e:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_ADC_IRQHandler+0x560>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	2b00      	cmp	r3, #0
 8001828:	d037      	beq.n	800189a <HAL_ADC_IRQHandler+0x3c6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001832:	d004      	beq.n	800183e <HAL_ADC_IRQHandler+0x36a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a7c      	ldr	r2, [pc, #496]	; (8001a2c <HAL_ADC_IRQHandler+0x558>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d106      	bne.n	800184c <HAL_ADC_IRQHandler+0x378>
 800183e:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <HAL_ADC_IRQHandler+0x55c>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2b06      	cmp	r3, #6
 8001848:	d027      	beq.n	800189a <HAL_ADC_IRQHandler+0x3c6>
 800184a:	e005      	b.n	8001858 <HAL_ADC_IRQHandler+0x384>
 800184c:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <HAL_ADC_IRQHandler+0x560>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2b06      	cmp	r3, #6
 8001856:	d020      	beq.n	800189a <HAL_ADC_IRQHandler+0x3c6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001860:	d004      	beq.n	800186c <HAL_ADC_IRQHandler+0x398>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a71      	ldr	r2, [pc, #452]	; (8001a2c <HAL_ADC_IRQHandler+0x558>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d106      	bne.n	800187a <HAL_ADC_IRQHandler+0x3a6>
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_ADC_IRQHandler+0x55c>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	2b07      	cmp	r3, #7
 8001876:	d010      	beq.n	800189a <HAL_ADC_IRQHandler+0x3c6>
 8001878:	e005      	b.n	8001886 <HAL_ADC_IRQHandler+0x3b2>
 800187a:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <HAL_ADC_IRQHandler+0x560>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2b07      	cmp	r3, #7
 8001884:	d009      	beq.n	800189a <HAL_ADC_IRQHandler+0x3c6>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800188e:	d004      	beq.n	800189a <HAL_ADC_IRQHandler+0x3c6>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a64      	ldr	r2, [pc, #400]	; (8001a28 <HAL_ADC_IRQHandler+0x554>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d104      	bne.n	80018a4 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e00f      	b.n	80018c4 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ac:	d004      	beq.n	80018b8 <HAL_ADC_IRQHandler+0x3e4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a5e      	ldr	r2, [pc, #376]	; (8001a2c <HAL_ADC_IRQHandler+0x558>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <HAL_ADC_IRQHandler+0x3ea>
 80018b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018bc:	e000      	b.n	80018c0 <HAL_ADC_IRQHandler+0x3ec>
 80018be:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <HAL_ADC_IRQHandler+0x554>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d12d      	bne.n	800192a <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d11a      	bne.n	8001912 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018ea:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d112      	bne.n	800192a <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
 8001910:	e00b      	b.n	800192a <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f043 0210 	orr.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fada 	bl	8001ee4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2260      	movs	r2, #96	; 0x60
 8001936:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	2b80      	cmp	r3, #128	; 0x80
 8001944:	d113      	bne.n	800196e <HAL_ADC_IRQHandler+0x49a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001950:	2b80      	cmp	r3, #128	; 0x80
 8001952:	d10c      	bne.n	800196e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff fa21 	bl	8000da8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197c:	d115      	bne.n	80019aa <HAL_ADC_IRQHandler+0x4d6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800198c:	d10d      	bne.n	80019aa <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fab6 	bl	8001f0c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b8:	d115      	bne.n	80019e6 <HAL_ADC_IRQHandler+0x512>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c8:	d10d      	bne.n	80019e6 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 faa2 	bl	8001f20 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d151      	bne.n	8001a98 <HAL_ADC_IRQHandler+0x5c4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d14a      	bne.n	8001a98 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d102      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e02d      	b.n	8001a6c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a18:	d004      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x550>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_ADC_IRQHandler+0x558>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d109      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x564>
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_ADC_IRQHandler+0x55c>)
 8001a26:	e008      	b.n	8001a3a <HAL_ADC_IRQHandler+0x566>
 8001a28:	50000400 	.word	0x50000400
 8001a2c:	50000100 	.word	0x50000100
 8001a30:	50000300 	.word	0x50000300
 8001a34:	50000700 	.word	0x50000700
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_ADC_IRQHandler+0x614>)
 8001a3a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10a      	bne.n	8001a6c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001a56:	2301      	movs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e007      	b.n	8001a6c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d10e      	bne.n	8001a90 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff f996 	bl	8000dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2210      	movs	r2, #16
 8001a96:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0x60c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab6:	d113      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	f043 0208 	orr.w	r2, r3, #8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fa0c 	bl	8001ef8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	50000700 	.word	0x50000700

08001aec <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_ADCEx_Calibration_Start+0x1c>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e057      	b.n	8001bb8 <HAL_ADCEx_Calibration_Start+0xcc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 feb1 	bl	8002878 <ADC_Disable>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d146      	bne.n	8001bae <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001b34:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b4a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b5a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001b5c:	f7ff f8f6 	bl	8000d4c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b62:	e014      	b.n	8001b8e <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b64:	f7ff f8f2 	bl	8000d4c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	d90d      	bls.n	8001b8e <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f023 0312 	bic.w	r3, r3, #18
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e014      	b.n	8001bb8 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b9c:	d0e2      	beq.n	8001b64 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b09a      	sub	sp, #104	; 0x68
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_HandleTypeDef tmphadcSlave = {0};
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	2250      	movs	r2, #80	; 0x50
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f008 f8ac 	bl	8009d38 <memset>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e0a2      	b.n	8001d34 <HAL_ADCEx_MultiModeStart_DMA+0x174>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Perform ADC enable and conversion start if no conversion is on going */
  /* (check on ADC master only) */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 8092 	bne.w	8001d2a <HAL_ADCEx_MultiModeStart_DMA+0x16a>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0e:	d102      	bne.n	8001c16 <HAL_ADCEx_MultiModeStart_DMA+0x56>
 8001c10:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e009      	b.n	8001c2a <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a49      	ldr	r2, [pc, #292]	; (8001d40 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d102      	bne.n	8001c26 <HAL_ADCEx_MultiModeStart_DMA+0x66>
 8001c20:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	e001      	b.n	8001c2a <HAL_ADCEx_MultiModeStart_DMA+0x6a>
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
    
    if (tmphadcSlave.Instance == NULL)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10b      	bne.n	8001c48 <HAL_ADCEx_MultiModeStart_DMA+0x88>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e075      	b.n	8001d34 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
    
    
    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fdb7 	bl	80027bc <ADC_Enable>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (tmp_hal_status == HAL_OK)
 8001c54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_ADCEx_MultiModeStart_DMA+0xac>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fdab 	bl	80027bc <ADC_Enable>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }
    
    /* Start conversion all ADCs of multimode are effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d155      	bne.n	8001d20 <HAL_ADCEx_MultiModeStart_DMA+0x160>
    {
      /* Set ADC state (ADC master)                                           */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP | HAL_ADC_STATE_MULTIMODE_SLAVE,
                        HAL_ADC_STATE_REG_BUSY);
        
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
      
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	4a25      	ldr	r2, [pc, #148]	; (8001d4c <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
         
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd0:	d004      	beq.n	8001cdc <HAL_ADCEx_MultiModeStart_DMA+0x11c>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_ADCEx_MultiModeStart_DMA+0x17c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADCEx_MultiModeStart_DMA+0x120>
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 8001cde:	e000      	b.n	8001ce2 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 8001ce2:	663b      	str	r3, [r7, #96]	; 0x60
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	221c      	movs	r2, #28
 8001cea:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0210 	orr.w	r2, r2, #16
 8001cfa:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d02:	330c      	adds	r3, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f001 fa9f 	bl	800324c <HAL_DMA_Start_IT>
          
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0204 	orr.w	r2, r2, #4
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	e007      	b.n	8001d30 <HAL_ADCEx_MultiModeStart_DMA+0x170>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d28:	e002      	b.n	8001d30 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3768      	adds	r7, #104	; 0x68
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	50000100 	.word	0x50000100
 8001d40:	50000400 	.word	0x50000400
 8001d44:	50000500 	.word	0x50000500
 8001d48:	ffeff0fe 	.word	0xffeff0fe
 8001d4c:	080026f1 	.word	0x080026f1
 8001d50:	0800276b 	.word	0x0800276b
 8001d54:	08002787 	.word	0x08002787
 8001d58:	50000300 	.word	0x50000300
 8001d5c:	50000700 	.word	0x50000700

08001d60 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel of ADC slave.
  * @param  hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b098      	sub	sp, #96	; 0x60
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tickstart;
  ADC_HandleTypeDef tmphadcSlave = {0};
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	2250      	movs	r2, #80	; 0x50
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f007 ffde 	bl	8009d38 <memset>
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_ADCEx_MultiModeStop_DMA+0x2a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e0a2      	b.n	8001ed0 <HAL_ADCEx_MultiModeStop_DMA+0x170>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential multimode conversion on going, on regular and          */
  /*    injected groups.                                                      */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001d92:	216c      	movs	r1, #108	; 0x6c
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fdcf 	bl	8002938 <ADC_ConversionStop>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 808d 	bne.w	8001ec4 <HAL_ADCEx_MultiModeStop_DMA+0x164>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db2:	d102      	bne.n	8001dba <HAL_ADCEx_MultiModeStop_DMA+0x5a>
 8001db4:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <HAL_ADCEx_MultiModeStop_DMA+0x178>)
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	e009      	b.n	8001dce <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a47      	ldr	r2, [pc, #284]	; (8001edc <HAL_ADCEx_MultiModeStop_DMA+0x17c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d102      	bne.n	8001dca <HAL_ADCEx_MultiModeStop_DMA+0x6a>
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_ADCEx_MultiModeStop_DMA+0x180>)
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	e001      	b.n	8001dce <HAL_ADCEx_MultiModeStop_DMA+0x6e>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
    if (tmphadcSlave.Instance == NULL)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10b      	bne.n	8001dec <HAL_ADCEx_MultiModeStop_DMA+0x8c>
    {
      /* Update ADC state machine (ADC master) to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e071      	b.n	8001ed0 <HAL_ADCEx_MultiModeStop_DMA+0x170>
    
    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */
    
    /* 1. Wait until ADSTP=0 for ADC master and ADC slave */
    tickstart = HAL_GetTick();  
 8001dec:	f7fe ffae 	bl	8000d4c <HAL_GetTick>
 8001df0:	65b8      	str	r0, [r7, #88]	; 0x58

    while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 8001df2:	e012      	b.n	8001e1a <HAL_ADCEx_MultiModeStop_DMA+0xba>
          ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave)   )
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001df4:	f7fe ffaa 	bl	8000d4c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b0b      	cmp	r3, #11
 8001e00:	d90b      	bls.n	8001e1a <HAL_ADCEx_MultiModeStop_DMA+0xba>
      {
        /* Update ADC state machine (ADC master) to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f043 0210 	orr.w	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e05a      	b.n	8001ed0 <HAL_ADCEx_MultiModeStop_DMA+0x170>
    while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e5      	bne.n	8001df4 <HAL_ADCEx_MultiModeStop_DMA+0x94>
          ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave)   )
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
    while(ADC_IS_CONVERSION_ONGOING_REGULAR(hadc)          || 
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1df      	bne.n	8001df4 <HAL_ADCEx_MultiModeStop_DMA+0x94>
    /* while DMA transfer is on going)                                        */
    /* Note: In case of ADC slave using its own DMA channel (multimode        */
    /*       parameter "DMAAccessMode" set to disabled):                      */
    /*       DMA channel of ADC slave should stopped after this function with */
    /*       function HAL_ADC_Stop_DMA.                                       */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fa66 	bl	800330a <HAL_DMA_Abort>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8001e44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_ADCEx_MultiModeStop_DMA+0xf8>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0210 	bic.w	r2, r2, #16
 8001e66:	605a      	str	r2, [r3, #4]
    
    
    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_ADCEx_MultiModeStop_DMA+0x148>
    {
      /* Check if ADC are effectively disabled */
      if ((ADC_Disable(hadc) != HAL_ERROR)          &&
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fd01 	bl	8002878 <ADC_Disable>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d023      	beq.n	8001ec4 <HAL_ADCEx_MultiModeStop_DMA+0x164>
          (ADC_Disable(&tmphadcSlave) != HAL_ERROR)   )
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fcf9 	bl	8002878 <ADC_Disable>
 8001e86:	4603      	mov	r3, r0
      if ((ADC_Disable(hadc) != HAL_ERROR)          &&
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_ADCEx_MultiModeStop_DMA+0x164>
      {
        tmp_hal_status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        
        /* Change ADC state (ADC master) */
        ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea6:	e00d      	b.n	8001ec4 <HAL_ADCEx_MultiModeStop_DMA+0x164>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC instances anyway */
      ADC_Disable(hadc);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fce5 	bl	8002878 <ADC_Disable>
      ADC_Disable(&tmphadcSlave);
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fce0 	bl	8002878 <ADC_Disable>
      
      /* Update ADC state machine (ADC master) to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0210 	orr.w	r2, r3, #16
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3760      	adds	r7, #96	; 0x60
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	50000100 	.word	0x50000100
 8001edc:	50000400 	.word	0x50000400
 8001ee0:	50000500 	.word	0x50000500

08001ee4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b09b      	sub	sp, #108	; 0x6c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x22>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e2cb      	b.n	80024ee <HAL_ADC_ConfigChannel+0x5ba>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 82af 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d81c      	bhi.n	8001fb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	461a      	mov	r2, r3
 8001f8a:	231f      	movs	r3, #31
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4019      	ands	r1, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
 8001fae:	e063      	b.n	8002078 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d81e      	bhi.n	8001ff6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	3b1e      	subs	r3, #30
 8001fcc:	221f      	movs	r2, #31
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4019      	ands	r1, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff4:	e040      	b.n	8002078 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b0e      	cmp	r3, #14
 8001ffc:	d81e      	bhi.n	800203c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	3b3c      	subs	r3, #60	; 0x3c
 8002012:	221f      	movs	r2, #31
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	4019      	ands	r1, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	3b3c      	subs	r3, #60	; 0x3c
 800202e:	fa00 f203 	lsl.w	r2, r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
 800203a:	e01d      	b.n	8002078 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	3b5a      	subs	r3, #90	; 0x5a
 8002050:	221f      	movs	r2, #31
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	4019      	ands	r1, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	3b5a      	subs	r3, #90	; 0x5a
 800206c:	fa00 f203 	lsl.w	r2, r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80e5 	bne.w	8002252 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b09      	cmp	r3, #9
 800208e:	d91c      	bls.n	80020ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6999      	ldr	r1, [r3, #24]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	2207      	movs	r2, #7
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4019      	ands	r1, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6898      	ldr	r0, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	619a      	str	r2, [r3, #24]
 80020c8:	e019      	b.n	80020fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6959      	ldr	r1, [r3, #20]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	3b01      	subs	r3, #1
 800211c:	2b03      	cmp	r3, #3
 800211e:	d84f      	bhi.n	80021c0 <HAL_ADC_ConfigChannel+0x28c>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_ADC_ConfigChannel+0x1f4>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002139 	.word	0x08002139
 800212c:	0800215b 	.word	0x0800215b
 8002130:	0800217d 	.word	0x0800217d
 8002134:	0800219f 	.word	0x0800219f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800213e:	4b9f      	ldr	r3, [pc, #636]	; (80023bc <HAL_ADC_ConfigChannel+0x488>)
 8002140:	4013      	ands	r3, r2
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	0691      	lsls	r1, r2, #26
 8002148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800214a:	430a      	orrs	r2, r1
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002156:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002158:	e07e      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002160:	4b96      	ldr	r3, [pc, #600]	; (80023bc <HAL_ADC_ConfigChannel+0x488>)
 8002162:	4013      	ands	r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	0691      	lsls	r1, r2, #26
 800216a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800216c:	430a      	orrs	r2, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002178:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800217a:	e06d      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002182:	4b8e      	ldr	r3, [pc, #568]	; (80023bc <HAL_ADC_ConfigChannel+0x488>)
 8002184:	4013      	ands	r3, r2
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	0691      	lsls	r1, r2, #26
 800218c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800218e:	430a      	orrs	r2, r1
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800219a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800219c:	e05c      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021a4:	4b85      	ldr	r3, [pc, #532]	; (80023bc <HAL_ADC_ConfigChannel+0x488>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	0691      	lsls	r1, r2, #26
 80021ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021b0:	430a      	orrs	r2, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021bc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021be:	e04b      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	069b      	lsls	r3, r3, #26
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	069b      	lsls	r3, r3, #26
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002206:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	429a      	cmp	r2, r3
 800221a:	d107      	bne.n	800222c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800222a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	429a      	cmp	r2, r3
 800223e:	d10a      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002250:	e001      	b.n	8002256 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002256:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d108      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x344>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x344>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_ADC_ConfigChannel+0x346>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8131 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d00f      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2201      	movs	r2, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	400a      	ands	r2, r1
 80022a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022a6:	e049      	b.n	800233c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	409a      	lsls	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	d91c      	bls.n	8002304 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6999      	ldr	r1, [r3, #24]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	3b1b      	subs	r3, #27
 80022dc:	2207      	movs	r2, #7
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4019      	ands	r1, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6898      	ldr	r0, [r3, #8]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1b      	subs	r3, #27
 80022f6:	fa00 f203 	lsl.w	r2, r0, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e01b      	b.n	800233c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6959      	ldr	r1, [r3, #20]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	2207      	movs	r2, #7
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	4019      	ands	r1, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6898      	ldr	r0, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	fa00 f203 	lsl.w	r2, r0, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d004      	beq.n	8002350 <HAL_ADC_ConfigChannel+0x41c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_ADC_ConfigChannel+0x48c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x420>
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_ADC_ConfigChannel+0x490>)
 8002352:	e000      	b.n	8002356 <HAL_ADC_ConfigChannel+0x422>
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_ADC_ConfigChannel+0x494>)
 8002356:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b10      	cmp	r3, #16
 800235e:	d105      	bne.n	800236c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002370:	2b11      	cmp	r3, #17
 8002372:	d105      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002384:	2b12      	cmp	r3, #18
 8002386:	f040 80ac 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 80a5 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a0:	d102      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x474>
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_ADC_ConfigChannel+0x48c>)
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e023      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4bc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_ADC_ConfigChannel+0x48c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10c      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x498>
 80023b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e01a      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4bc>
 80023ba:	bf00      	nop
 80023bc:	83fff000 	.word	0x83fff000
 80023c0:	50000100 	.word	0x50000100
 80023c4:	50000300 	.word	0x50000300
 80023c8:	50000700 	.word	0x50000700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4a      	ldr	r2, [pc, #296]	; (80024fc <HAL_ADC_ConfigChannel+0x5c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d102      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x4a8>
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_ADC_ConfigChannel+0x5cc>)
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e009      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4bc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_ADC_ConfigChannel+0x5cc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x4b8>
 80023e6:	4b45      	ldr	r3, [pc, #276]	; (80024fc <HAL_ADC_ConfigChannel+0x5c8>)
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e001      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4bc>
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d108      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x4dc>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x4dc>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_ADC_ConfigChannel+0x4de>
 8002410:	2300      	movs	r3, #0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d150      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002416:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x504>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x504>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_ADC_ConfigChannel+0x506>
 8002438:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800243a:	2b00      	cmp	r3, #0
 800243c:	d13c      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d11d      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x54e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800244e:	d118      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_ADC_ConfigChannel+0x5d0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <HAL_ADC_ConfigChannel+0x5d4>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9a      	lsrs	r2, r3, #18
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002472:	e002      	b.n	800247a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3b01      	subs	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f9      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002480:	e02e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b11      	cmp	r3, #17
 8002488:	d10b      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x56e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002492:	d106      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800249c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024a0:	e01e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b12      	cmp	r3, #18
 80024a8:	d11a      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024b6:	e013      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024ca:	e00a      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024de:	e000      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024e0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	376c      	adds	r7, #108	; 0x6c
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	50000400 	.word	0x50000400
 8002500:	50000500 	.word	0x50000500
 8002504:	20000040 	.word	0x20000040
 8002508:	431bde83 	.word	0x431bde83

0800250c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800250c:	b480      	push	{r7}
 800250e:	b099      	sub	sp, #100	; 0x64
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002524:	d102      	bne.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002526:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	e01a      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d103      	bne.n	800253e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002536:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	e011      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a67      	ldr	r2, [pc, #412]	; (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d102      	bne.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	e009      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a64      	ldr	r2, [pc, #400]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d102      	bne.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002558:	4b61      	ldr	r3, [pc, #388]	; (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	e001      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b0      	b.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002576:	2302      	movs	r3, #2
 8002578:	e0a9      	b.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 808d 	bne.w	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 8086 	bne.w	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a8:	d004      	beq.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80025b6:	e000      	b.n	80025ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025b8:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80025ba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d040      	beq.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d6:	035b      	lsls	r3, r3, #13
 80025d8:	430b      	orrs	r3, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025de:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d108      	bne.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d15c      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002622:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d14b      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002630:	f023 030f 	bic.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	6811      	ldr	r1, [r2, #0]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	430a      	orrs	r2, r1
 800263e:	431a      	orrs	r2, r3
 8002640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002642:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002644:	e03c      	b.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002650:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d108      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d123      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002694:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d112      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800269a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026a2:	f023 030f 	bic.w	r3, r3, #15
 80026a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026a8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026aa:	e009      	b.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80026be:	e000      	b.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026c0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80026ce:	4618      	mov	r0, r3
 80026d0:	3764      	adds	r7, #100	; 0x64
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	50000100 	.word	0x50000100
 80026e0:	50000400 	.word	0x50000400
 80026e4:	50000500 	.word	0x50000500
 80026e8:	50000300 	.word	0x50000300
 80026ec:	50000700 	.word	0x50000700

080026f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002706:	2b00      	cmp	r3, #0
 8002708:	d126      	bne.n	8002758 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002720:	2b00      	cmp	r3, #0
 8002722:	d115      	bne.n	8002750 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f006 fd9f 	bl	8009294 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002756:	e004      	b.n	8002762 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f006 fd7d 	bl	8009278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7fe fb05 	bl	8000dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d108      	bne.n	80027e8 <ADC_Enable+0x2c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <ADC_Enable+0x2c>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <ADC_Enable+0x2e>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d13c      	bne.n	8002868 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <ADC_Enable+0xb8>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f043 0210 	orr.w	r2, r3, #16
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e028      	b.n	800286a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002828:	f7fe fa90 	bl	8000d4c <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800282e:	e014      	b.n	800285a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002830:	f7fe fa8c 	bl	8000d4c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d90d      	bls.n	800285a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f043 0210 	orr.w	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e007      	b.n	800286a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d1e3      	bne.n	8002830 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	8000003f 	.word	0x8000003f

08002878 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <ADC_Disable+0x2c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <ADC_Disable+0x2c>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <ADC_Disable+0x2e>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d040      	beq.n	800292c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030d 	and.w	r3, r3, #13
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10f      	bne.n	80028d8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0202 	orr.w	r2, r2, #2
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2203      	movs	r2, #3
 80028ce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028d0:	f7fe fa3c 	bl	8000d4c <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028d6:	e022      	b.n	800291e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f043 0210 	orr.w	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e01c      	b.n	800292e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028f4:	f7fe fa2a 	bl	8000d4c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d90d      	bls.n	800291e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d0e3      	beq.n	80028f4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8093 	beq.w	8002a84 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800296c:	d12a      	bne.n	80029c4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002972:	2b01      	cmp	r3, #1
 8002974:	d126      	bne.n	80029c4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800297a:	2b01      	cmp	r3, #1
 800297c:	d122      	bne.n	80029c4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800297e:	230c      	movs	r3, #12
 8002980:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002982:	e014      	b.n	80029ae <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4a42      	ldr	r2, [pc, #264]	; (8002a90 <ADC_ConversionStop+0x158>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d90d      	bls.n	80029a8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0210 	orr.w	r2, r3, #16
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e06e      	b.n	8002a86 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	3301      	adds	r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d1e3      	bne.n	8002984 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2240      	movs	r2, #64	; 0x40
 80029c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b60      	cmp	r3, #96	; 0x60
 80029c8:	d015      	beq.n	80029f6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d10e      	bne.n	80029f6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0210 	orr.w	r2, r2, #16
 80029f4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d015      	beq.n	8002a28 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d10e      	bne.n	8002a28 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b60      	cmp	r3, #96	; 0x60
 8002a2c:	d004      	beq.n	8002a38 <ADC_ConversionStop+0x100>
 8002a2e:	2b6c      	cmp	r3, #108	; 0x6c
 8002a30:	d105      	bne.n	8002a3e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a32:	230c      	movs	r3, #12
 8002a34:	617b      	str	r3, [r7, #20]
        break;
 8002a36:	e005      	b.n	8002a44 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	617b      	str	r3, [r7, #20]
        break;
 8002a3c:	e002      	b.n	8002a44 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	617b      	str	r3, [r7, #20]
        break;
 8002a42:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a44:	f7fe f982 	bl	8000d4c <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a4a:	e014      	b.n	8002a76 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a4c:	f7fe f97e 	bl	8000d4c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b0b      	cmp	r3, #11
 8002a58:	d90d      	bls.n	8002a76 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0210 	orr.w	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e007      	b.n	8002a86 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e3      	bne.n	8002a4c <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	000993ff 	.word	0x000993ff

08002a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac6:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	60d3      	str	r3, [r2, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0307 	and.w	r3, r3, #7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0b      	blt.n	8002b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4907      	ldr	r1, [pc, #28]	; (8002b30 <__NVIC_EnableIRQ+0x38>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
         );
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff29 	bl	8002a94 <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5c:	f7ff ff3e 	bl	8002adc <__NVIC_GetPriorityGrouping>
 8002c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff ff8e 	bl	8002b88 <NVIC_EncodePriority>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff5d 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff31 	bl	8002af8 <__NVIC_EnableIRQ>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffa2 	bl	8002bf0 <SysTick_Config>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e014      	b.n	8002cf2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	791b      	ldrb	r3, [r3, #4]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f004 fae9 	bl	80072b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	400a      	ands	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6819      	ldr	r1, [r3, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43da      	mvns	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	400a      	ands	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10f      	bne.n	8002d60 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fae0 	bl	800330a <HAL_DMA_Abort>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e00e      	b.n	8002d7e <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fad0 	bl	800330a <HAL_DMA_Abort>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d7c:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	711a      	strb	r2, [r3, #4]
 8002d8a:	e002      	b.n	8002d92 <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	795b      	ldrb	r3, [r3, #5]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_DAC_Start_DMA+0x1e>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e08e      	b.n	8002f28 <HAL_DAC_Start_DMA+0x13c>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2202      	movs	r2, #2
 8002e14:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d12a      	bne.n	8002e72 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4a43      	ldr	r2, [pc, #268]	; (8002f30 <HAL_DAC_Start_DMA+0x144>)
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a42      	ldr	r2, [pc, #264]	; (8002f34 <HAL_DAC_Start_DMA+0x148>)
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a41      	ldr	r2, [pc, #260]	; (8002f38 <HAL_DAC_Start_DMA+0x14c>)
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e42:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d009      	beq.n	8002e5e <HAL_DAC_Start_DMA+0x72>
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d00c      	beq.n	8002e68 <HAL_DAC_Start_DMA+0x7c>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d000      	beq.n	8002e54 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002e52:	e039      	b.n	8002ec8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3308      	adds	r3, #8
 8002e5a:	617b      	str	r3, [r7, #20]
        break;
 8002e5c:	e034      	b.n	8002ec8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	617b      	str	r3, [r7, #20]
        break;
 8002e66:	e02f      	b.n	8002ec8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	617b      	str	r3, [r7, #20]
        break;
 8002e70:	e02a      	b.n	8002ec8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a31      	ldr	r2, [pc, #196]	; (8002f3c <HAL_DAC_Start_DMA+0x150>)
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <HAL_DAC_Start_DMA+0x154>)
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <HAL_DAC_Start_DMA+0x158>)
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e98:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d009      	beq.n	8002eb4 <HAL_DAC_Start_DMA+0xc8>
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d00c      	beq.n	8002ebe <HAL_DAC_Start_DMA+0xd2>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d000      	beq.n	8002eaa <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002ea8:	e00e      	b.n	8002ec8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3314      	adds	r3, #20
 8002eb0:	617b      	str	r3, [r7, #20]
        break;
 8002eb2:	e009      	b.n	8002ec8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3318      	adds	r3, #24
 8002eba:	617b      	str	r3, [r7, #20]
        break;
 8002ebc:	e004      	b.n	8002ec8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	331c      	adds	r3, #28
 8002ec4:	617b      	str	r3, [r7, #20]
        break;
 8002ec6:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002edc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6898      	ldr	r0, [r3, #8]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	f000 f9b0 	bl	800324c <HAL_DMA_Start_IT>
 8002eec:	e00e      	b.n	8002f0c <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002efc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	68d8      	ldr	r0, [r3, #12]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	f000 f9a0 	bl	800324c <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	080030e7 	.word	0x080030e7
 8002f34:	08003109 	.word	0x08003109
 8002f38:	08003125 	.word	0x08003125
 8002f3c:	08003153 	.word	0x08003153
 8002f40:	08003175 	.word	0x08003175
 8002f44:	08003191 	.word	0x08003191

08002f48 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5e:	d120      	bne.n	8002fa2 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6e:	d118      	bne.n	8002fa2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2204      	movs	r2, #4
 8002f74:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f9a:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff1b 	bl	8002dd8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb0:	d120      	bne.n	8002ff4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc0:	d118      	bne.n	8002ff4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f043 0202 	orr.w	r2, r3, #2
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002fec:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f86f 	bl	80030d2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	2300      	movs	r3, #0
 800300e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	795b      	ldrb	r3, [r3, #5]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_DAC_ConfigChannel+0x20>
 8003018:	2302      	movs	r3, #2
 800301a:	e036      	b.n	800308a <HAL_DAC_ConfigChannel+0x8e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2202      	movs	r2, #2
 8003026:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003030:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4013      	ands	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	22c0      	movs	r2, #192	; 0xc0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fe51 	bl	8002d9c <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	711a      	strb	r2, [r3, #4]
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fe4a 	bl	8002db0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f043 0204 	orr.w	r2, r3, #4
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff fe40 	bl	8002dc4 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	711a      	strb	r2, [r3, #4]
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ff98 	bl	8003096 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	711a      	strb	r2, [r3, #4]
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff ff91 	bl	80030aa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7ff ff87 	bl	80030be <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	711a      	strb	r2, [r3, #4]
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e037      	b.n	8003244 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80031ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9b8 	bl	800359c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}  
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_DMA_Start_IT+0x20>
 8003268:	2302      	movs	r3, #2
 800326a:	e04a      	b.n	8003302 <HAL_DMA_Start_IT+0xb6>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800327a:	2b01      	cmp	r3, #1
 800327c:	d13a      	bne.n	80032f4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f94b 	bl	800353e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 020e 	orr.w	r2, r2, #14
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e00f      	b.n	80032e2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 020a 	orr.w	r2, r2, #10
 80032d0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0204 	bic.w	r2, r2, #4
 80032e0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e005      	b.n	8003300 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
 80032fe:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003300:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003318:	2b02      	cmp	r3, #2
 800331a:	d008      	beq.n	800332e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2204      	movs	r2, #4
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e020      	b.n	8003370 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 020e 	bic.w	r2, r2, #14
 800333c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f202 	lsl.w	r2, r1, r2
 800335c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800338e:	2b02      	cmp	r3, #2
 8003390:	d005      	beq.n	800339e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
 800339c:	e027      	b.n	80033ee <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 020e 	bic.w	r2, r2, #14
 80033ac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	2101      	movs	r1, #1
 80033c8:	fa01 f202 	lsl.w	r2, r1, r2
 80033cc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
    } 
  }
  return status;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2204      	movs	r2, #4
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d024      	beq.n	800346a <HAL_DMA_IRQHandler+0x72>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01f      	beq.n	800346a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d107      	bne.n	8003448 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0204 	bic.w	r2, r2, #4
 8003446:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	2104      	movs	r1, #4
 8003452:	fa01 f202 	lsl.w	r2, r1, r2
 8003456:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d06a      	beq.n	8003536 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003468:	e065      	b.n	8003536 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2202      	movs	r2, #2
 8003470:	409a      	lsls	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d02c      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xdc>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d027      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 020a 	bic.w	r2, r2, #10
 80034a0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	2102      	movs	r1, #2
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d035      	beq.n	8003536 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80034d2:	e030      	b.n	8003536 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2208      	movs	r2, #8
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d028      	beq.n	8003536 <HAL_DMA_IRQHandler+0x13e>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d023      	beq.n	8003536 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 020e 	bic.w	r2, r2, #14
 80034fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
    }
  }
}  
 8003534:	e7ff      	b.n	8003536 <HAL_DMA_IRQHandler+0x13e>
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b10      	cmp	r3, #16
 800356a:	d108      	bne.n	800357e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800357c:	e007      	b.n	800358e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	60da      	str	r2, [r3, #12]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <DMA_CalcBaseAndBitshift+0x60>)
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d80f      	bhi.n	80035d0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <DMA_CalcBaseAndBitshift+0x64>)
 80035b8:	4413      	add	r3, r2
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <DMA_CalcBaseAndBitshift+0x68>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <DMA_CalcBaseAndBitshift+0x6c>)
 80035cc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80035ce:	e00e      	b.n	80035ee <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <DMA_CalcBaseAndBitshift+0x70>)
 80035d8:	4413      	add	r3, r2
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <DMA_CalcBaseAndBitshift+0x68>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	009a      	lsls	r2, r3, #2
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a09      	ldr	r2, [pc, #36]	; (8003610 <DMA_CalcBaseAndBitshift+0x74>)
 80035ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40020407 	.word	0x40020407
 8003600:	bffdfff8 	.word	0xbffdfff8
 8003604:	cccccccd 	.word	0xcccccccd
 8003608:	40020000 	.word	0x40020000
 800360c:	bffdfbf8 	.word	0xbffdfbf8
 8003610:	40020400 	.word	0x40020400

08003614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	e160      	b.n	80038e6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8152 	beq.w	80038e0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d003      	beq.n	800364c <HAL_GPIO_Init+0x38>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b12      	cmp	r3, #18
 800364a:	d123      	bne.n	8003694 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	08da      	lsrs	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3208      	adds	r2, #8
 8003654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	220f      	movs	r2, #15
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	08da      	lsrs	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3208      	adds	r2, #8
 800368e:	6939      	ldr	r1, [r7, #16]
 8003690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0203 	and.w	r2, r3, #3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d00b      	beq.n	80036e8 <HAL_GPIO_Init+0xd4>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d007      	beq.n	80036e8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036dc:	2b11      	cmp	r3, #17
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b12      	cmp	r3, #18
 80036e6:	d130      	bne.n	800374a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800371e:	2201      	movs	r2, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0201 	and.w	r2, r3, #1
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	2203      	movs	r2, #3
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80ac 	beq.w	80038e0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003788:	4b5e      	ldr	r3, [pc, #376]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4a5d      	ldr	r2, [pc, #372]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6193      	str	r3, [r2, #24]
 8003794:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <HAL_GPIO_Init+0x2f0>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037a0:	4a59      	ldr	r2, [pc, #356]	; (8003908 <HAL_GPIO_Init+0x2f4>)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	089b      	lsrs	r3, r3, #2
 80037a6:	3302      	adds	r3, #2
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	220f      	movs	r2, #15
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037ca:	d025      	beq.n	8003818 <HAL_GPIO_Init+0x204>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a4f      	ldr	r2, [pc, #316]	; (800390c <HAL_GPIO_Init+0x2f8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d01f      	beq.n	8003814 <HAL_GPIO_Init+0x200>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <HAL_GPIO_Init+0x2fc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d019      	beq.n	8003810 <HAL_GPIO_Init+0x1fc>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a4d      	ldr	r2, [pc, #308]	; (8003914 <HAL_GPIO_Init+0x300>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_GPIO_Init+0x1f8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a4c      	ldr	r2, [pc, #304]	; (8003918 <HAL_GPIO_Init+0x304>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00d      	beq.n	8003808 <HAL_GPIO_Init+0x1f4>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a4b      	ldr	r2, [pc, #300]	; (800391c <HAL_GPIO_Init+0x308>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <HAL_GPIO_Init+0x1f0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <HAL_GPIO_Init+0x30c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_GPIO_Init+0x1ec>
 80037fc:	2306      	movs	r3, #6
 80037fe:	e00c      	b.n	800381a <HAL_GPIO_Init+0x206>
 8003800:	2307      	movs	r3, #7
 8003802:	e00a      	b.n	800381a <HAL_GPIO_Init+0x206>
 8003804:	2305      	movs	r3, #5
 8003806:	e008      	b.n	800381a <HAL_GPIO_Init+0x206>
 8003808:	2304      	movs	r3, #4
 800380a:	e006      	b.n	800381a <HAL_GPIO_Init+0x206>
 800380c:	2303      	movs	r3, #3
 800380e:	e004      	b.n	800381a <HAL_GPIO_Init+0x206>
 8003810:	2302      	movs	r3, #2
 8003812:	e002      	b.n	800381a <HAL_GPIO_Init+0x206>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_GPIO_Init+0x206>
 8003818:	2300      	movs	r3, #0
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	f002 0203 	and.w	r2, r2, #3
 8003820:	0092      	lsls	r2, r2, #2
 8003822:	4093      	lsls	r3, r2
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800382a:	4937      	ldr	r1, [pc, #220]	; (8003908 <HAL_GPIO_Init+0x2f4>)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	3302      	adds	r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003838:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_GPIO_Init+0x310>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	43db      	mvns	r3, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800385c:	4a31      	ldr	r2, [pc, #196]	; (8003924 <HAL_GPIO_Init+0x310>)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003862:	4b30      	ldr	r3, [pc, #192]	; (8003924 <HAL_GPIO_Init+0x310>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003886:	4a27      	ldr	r2, [pc, #156]	; (8003924 <HAL_GPIO_Init+0x310>)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800388c:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_GPIO_Init+0x310>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	43db      	mvns	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_GPIO_Init+0x310>)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_GPIO_Init+0x310>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_GPIO_Init+0x310>)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	3301      	adds	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f47f ae97 	bne.w	8003624 <HAL_GPIO_Init+0x10>
  }
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	40010000 	.word	0x40010000
 800390c:	48000400 	.word	0x48000400
 8003910:	48000800 	.word	0x48000800
 8003914:	48000c00 	.word	0x48000c00
 8003918:	48001000 	.word	0x48001000
 800391c:	48001400 	.word	0x48001400
 8003920:	48001800 	.word	0x48001800
 8003924:	40010400 	.word	0x40010400

08003928 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f806 	bl	8003958 <HAL_GPIO_EXTI_Callback>
  }
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40010400 	.word	0x40010400

08003958 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003976:	af00      	add	r7, sp, #0
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f000 bf01 	b.w	800478c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8160 	beq.w	8003c5a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800399a:	4bae      	ldr	r3, [pc, #696]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d00c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039a6:	4bab      	ldr	r3, [pc, #684]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d159      	bne.n	8003a66 <HAL_RCC_OscConfig+0xf6>
 80039b2:	4ba8      	ldr	r3, [pc, #672]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d152      	bne.n	8003a66 <HAL_RCC_OscConfig+0xf6>
 80039c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HAL_RCC_OscConfig+0x82>
 80039ec:	4b99      	ldr	r3, [pc, #612]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0xae>
 80039f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a1a:	4b8e      	ldr	r3, [pc, #568]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a22:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003a26:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003a2a:	fa92 f2a2 	rbit	r2, r2
 8003a2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003a32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a36:	fab2 f282 	clz	r2, r2
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	f042 0220 	orr.w	r2, r2, #32
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f002 021f 	and.w	r2, r2, #31
 8003a46:	2101      	movs	r1, #1
 8003a48:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8102 	beq.w	8003c58 <HAL_RCC_OscConfig+0x2e8>
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 80fc 	bne.w	8003c58 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f000 be93 	b.w	800478c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x110>
 8003a72:	4b78      	ldr	r3, [pc, #480]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a77      	ldr	r2, [pc, #476]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e030      	b.n	8003ae2 <HAL_RCC_OscConfig+0x172>
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x134>
 8003a8a:	4b72      	ldr	r3, [pc, #456]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a71      	ldr	r2, [pc, #452]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b6f      	ldr	r3, [pc, #444]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6e      	ldr	r2, [pc, #440]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e01e      	b.n	8003ae2 <HAL_RCC_OscConfig+0x172>
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aae:	d10c      	bne.n	8003aca <HAL_RCC_OscConfig+0x15a>
 8003ab0:	4b68      	ldr	r3, [pc, #416]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a67      	ldr	r2, [pc, #412]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a64      	ldr	r2, [pc, #400]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x172>
 8003aca:	4b62      	ldr	r3, [pc, #392]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a61      	ldr	r2, [pc, #388]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b5f      	ldr	r3, [pc, #380]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a5e      	ldr	r2, [pc, #376]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d059      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd f92e 	bl	8000d4c <HAL_GetTick>
 8003af0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af6:	f7fd f929 	bl	8000d4c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d902      	bls.n	8003b0c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	f000 be40 	b.w	800478c <HAL_RCC_OscConfig+0xe1c>
 8003b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b10:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003b20:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <HAL_RCC_OscConfig+0x1ce>
 8003b38:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	e015      	b.n	8003b6a <HAL_RCC_OscConfig+0x1fa>
 8003b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b42:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b56:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b5a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b66:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b6e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003b72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003b76:	fa92 f2a2 	rbit	r2, r2
 8003b7a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003b7e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b82:	fab2 f282 	clz	r2, r2
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	f042 0220 	orr.w	r2, r2, #32
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	f002 021f 	and.w	r2, r2, #31
 8003b92:	2101      	movs	r1, #1
 8003b94:	fa01 f202 	lsl.w	r2, r1, r2
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ab      	beq.n	8003af6 <HAL_RCC_OscConfig+0x186>
 8003b9e:	e05c      	b.n	8003c5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fd f8d4 	bl	8000d4c <HAL_GetTick>
 8003ba4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003baa:	f7fd f8cf 	bl	8000d4c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d902      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	f000 bde6 	b.w	800478c <HAL_RCC_OscConfig+0xe1c>
 8003bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003bd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d102      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x282>
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	e015      	b.n	8003c1e <HAL_RCC_OscConfig+0x2ae>
 8003bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bf6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_RCC_OscConfig+0x2e4>)
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c22:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003c26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003c2a:	fa92 f2a2 	rbit	r2, r2
 8003c2e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003c32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c36:	fab2 f282 	clz	r2, r2
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f042 0220 	orr.w	r2, r2, #32
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f002 021f 	and.w	r2, r2, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ab      	bne.n	8003baa <HAL_RCC_OscConfig+0x23a>
 8003c52:	e002      	b.n	8003c5a <HAL_RCC_OscConfig+0x2ea>
 8003c54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8170 	beq.w	8003f4a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c6a:	4bd0      	ldr	r3, [pc, #832]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c76:	4bcd      	ldr	r3, [pc, #820]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d16d      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3ee>
 8003c82:	4bca      	ldr	r3, [pc, #808]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8e:	d166      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3ee>
 8003c90:	2302      	movs	r3, #2
 8003c92:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003ca2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d102      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x350>
 8003cba:	4bbc      	ldr	r3, [pc, #752]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	e013      	b.n	8003ce8 <HAL_RCC_OscConfig+0x378>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003cd8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ce4:	4bb1      	ldr	r3, [pc, #708]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2202      	movs	r2, #2
 8003cea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003cee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003cf2:	fa92 f2a2 	rbit	r2, r2
 8003cf6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003cfa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f042 0220 	orr.w	r2, r2, #32
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f002 021f 	and.w	r2, r2, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <HAL_RCC_OscConfig+0x3ba>
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d002      	beq.n	8003d2a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f000 bd31 	b.w	800478c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4ba0      	ldr	r3, [pc, #640]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	21f8      	movs	r1, #248	; 0xf8
 8003d3a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003d42:	fa91 f1a1 	rbit	r1, r1
 8003d46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003d4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d4e:	fab1 f181 	clz	r1, r1
 8003d52:	b2c9      	uxtb	r1, r1
 8003d54:	408b      	lsls	r3, r1
 8003d56:	4995      	ldr	r1, [pc, #596]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5c:	e0f5      	b.n	8003f4a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8085 	beq.w	8003e74 <HAL_RCC_OscConfig+0x504>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003d7c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	461a      	mov	r2, r3
 8003d92:	2301      	movs	r3, #1
 8003d94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fc ffd9 	bl	8000d4c <HAL_GetTick>
 8003d9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da0:	f7fc ffd4 	bl	8000d4c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d902      	bls.n	8003db6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	f000 bceb 	b.w	800478c <HAL_RCC_OscConfig+0xe1c>
 8003db6:	2302      	movs	r3, #2
 8003db8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003dc8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_RCC_OscConfig+0x476>
 8003de0:	4b72      	ldr	r3, [pc, #456]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	e013      	b.n	8003e0e <HAL_RCC_OscConfig+0x49e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003dfe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e0a:	4b68      	ldr	r3, [pc, #416]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003e14:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003e18:	fa92 f2a2 	rbit	r2, r2
 8003e1c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003e20:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e24:	fab2 f282 	clz	r2, r2
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	f042 0220 	orr.w	r2, r2, #32
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	f002 021f 	and.w	r2, r2, #31
 8003e34:	2101      	movs	r1, #1
 8003e36:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0af      	beq.n	8003da0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e48:	1d3b      	adds	r3, r7, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	21f8      	movs	r1, #248	; 0xf8
 8003e50:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003e58:	fa91 f1a1 	rbit	r1, r1
 8003e5c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003e60:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e64:	fab1 f181 	clz	r1, r1
 8003e68:	b2c9      	uxtb	r1, r1
 8003e6a:	408b      	lsls	r3, r1
 8003e6c:	494f      	ldr	r1, [pc, #316]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
 8003e72:	e06a      	b.n	8003f4a <HAL_RCC_OscConfig+0x5da>
 8003e74:	2301      	movs	r3, #1
 8003e76:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003e86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fc ff54 	bl	8000d4c <HAL_GetTick>
 8003ea4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eaa:	f7fc ff4f 	bl	8000d4c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d902      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	f000 bc66 	b.w	800478c <HAL_RCC_OscConfig+0xe1c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d102      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x580>
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	e013      	b.n	8003f18 <HAL_RCC_OscConfig+0x5a8>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f02:	2302      	movs	r3, #2
 8003f04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_RCC_OscConfig+0x63c>)
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003f1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f22:	fa92 f2a2 	rbit	r2, r2
 8003f26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003f2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f2e:	fab2 f282 	clz	r2, r2
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	f042 0220 	orr.w	r2, r2, #32
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f002 021f 	and.w	r2, r2, #31
 8003f3e:	2101      	movs	r1, #1
 8003f40:	fa01 f202 	lsl.w	r2, r1, r2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1af      	bne.n	8003eaa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80da 	beq.w	800410e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d069      	beq.n	8004038 <HAL_RCC_OscConfig+0x6c8>
 8003f64:	2301      	movs	r3, #1
 8003f66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003f76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_OscConfig+0x640>)
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8e:	f7fc fedd 	bl	8000d4c <HAL_GetTick>
 8003f92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f96:	e00d      	b.n	8003fb4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fc fed8 	bl	8000d4c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d905      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e3ef      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	10908120 	.word	0x10908120
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbe:	fa93 f2a3 	rbit	r2, r3
 8003fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003fcc:	2202      	movs	r2, #2
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	fa93 f2a3 	rbit	r2, r3
 8003fda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	fa93 f2a3 	rbit	r2, r3
 8003ff2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ff6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff8:	4ba4      	ldr	r3, [pc, #656]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 8003ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ffc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004000:	2102      	movs	r1, #2
 8004002:	6019      	str	r1, [r3, #0]
 8004004:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	fa93 f1a3 	rbit	r1, r3
 800400e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004012:	6019      	str	r1, [r3, #0]
  return result;
 8004014:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2101      	movs	r1, #1
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0b0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x628>
 8004036:	e06a      	b.n	800410e <HAL_RCC_OscConfig+0x79e>
 8004038:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	fa93 f2a3 	rbit	r2, r3
 800404a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800404e:	601a      	str	r2, [r3, #0]
  return result;
 8004050:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004054:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	4b8c      	ldr	r3, [pc, #560]	; (8004290 <HAL_RCC_OscConfig+0x920>)
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	461a      	mov	r2, r3
 8004066:	2300      	movs	r3, #0
 8004068:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fc fe6f 	bl	8000d4c <HAL_GetTick>
 800406e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004072:	e009      	b.n	8004088 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004074:	f7fc fe6a 	bl	8000d4c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e381      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
 8004088:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800408c:	2202      	movs	r2, #2
 800408e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	fa93 f2a3 	rbit	r2, r3
 800409a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040a4:	2202      	movs	r2, #2
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	fa93 f2a3 	rbit	r2, r3
 80040b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040bc:	2202      	movs	r2, #2
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	fa93 f2a3 	rbit	r2, r3
 80040ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80040ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	4b6e      	ldr	r3, [pc, #440]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80040d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040d8:	2102      	movs	r1, #2
 80040da:	6019      	str	r1, [r3, #0]
 80040dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	fa93 f1a3 	rbit	r1, r3
 80040e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040ea:	6019      	str	r1, [r3, #0]
  return result;
 80040ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f003 031f 	and.w	r3, r3, #31
 8004102:	2101      	movs	r1, #1
 8004104:	fa01 f303 	lsl.w	r3, r1, r3
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1b2      	bne.n	8004074 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8157 	beq.w	80043cc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d112      	bne.n	8004156 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004130:	4b56      	ldr	r3, [pc, #344]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	4a55      	ldr	r2, [pc, #340]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413a:	61d3      	str	r3, [r2, #28]
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f107 030c 	add.w	r3, r7, #12
 800414e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004156:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <HAL_RCC_OscConfig+0x924>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11a      	bne.n	8004198 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004162:	4b4c      	ldr	r3, [pc, #304]	; (8004294 <HAL_RCC_OscConfig+0x924>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a4b      	ldr	r2, [pc, #300]	; (8004294 <HAL_RCC_OscConfig+0x924>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416e:	f7fc fded 	bl	8000d4c <HAL_GetTick>
 8004172:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	e009      	b.n	800418c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fc fde8 	bl	8000d4c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b64      	cmp	r3, #100	; 0x64
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e2ff      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	4b41      	ldr	r3, [pc, #260]	; (8004294 <HAL_RCC_OscConfig+0x924>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ef      	beq.n	8004178 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x840>
 80041a2:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	4a39      	ldr	r2, [pc, #228]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6213      	str	r3, [r2, #32]
 80041ae:	e02f      	b.n	8004210 <HAL_RCC_OscConfig+0x8a0>
 80041b0:	1d3b      	adds	r3, r7, #4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x864>
 80041ba:	4b34      	ldr	r3, [pc, #208]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4a33      	ldr	r2, [pc, #204]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	6213      	str	r3, [r2, #32]
 80041c6:	4b31      	ldr	r3, [pc, #196]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4a30      	ldr	r2, [pc, #192]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	6213      	str	r3, [r2, #32]
 80041d2:	e01d      	b.n	8004210 <HAL_RCC_OscConfig+0x8a0>
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b05      	cmp	r3, #5
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x888>
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4a2a      	ldr	r2, [pc, #168]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041e4:	f043 0304 	orr.w	r3, r3, #4
 80041e8:	6213      	str	r3, [r2, #32]
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4a27      	ldr	r2, [pc, #156]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6213      	str	r3, [r2, #32]
 80041f6:	e00b      	b.n	8004210 <HAL_RCC_OscConfig+0x8a0>
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	4a23      	ldr	r2, [pc, #140]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	6213      	str	r3, [r2, #32]
 8004204:	4b21      	ldr	r3, [pc, #132]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 800420a:	f023 0304 	bic.w	r3, r3, #4
 800420e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d06a      	beq.n	80042f0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421a:	f7fc fd97 	bl	8000d4c <HAL_GetTick>
 800421e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	e00b      	b.n	800423c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004224:	f7fc fd92 	bl	8000d4c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e2a7      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
 800423c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004240:	2202      	movs	r2, #2
 8004242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	fa93 f2a3 	rbit	r2, r3
 800424e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004258:	2202      	movs	r2, #2
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	fa93 f2a3 	rbit	r2, r3
 8004266:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800426a:	601a      	str	r2, [r3, #0]
  return result;
 800426c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004270:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d108      	bne.n	8004298 <HAL_RCC_OscConfig+0x928>
 8004286:	4b01      	ldr	r3, [pc, #4]	; (800428c <HAL_RCC_OscConfig+0x91c>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	e013      	b.n	80042b4 <HAL_RCC_OscConfig+0x944>
 800428c:	40021000 	.word	0x40021000
 8004290:	10908120 	.word	0x10908120
 8004294:	40007000 	.word	0x40007000
 8004298:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800429c:	2202      	movs	r2, #2
 800429e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fa93 f2a3 	rbit	r2, r3
 80042aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	4bc0      	ldr	r3, [pc, #768]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80042b8:	2102      	movs	r1, #2
 80042ba:	6011      	str	r1, [r2, #0]
 80042bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	fa92 f1a2 	rbit	r1, r2
 80042c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80042ca:	6011      	str	r1, [r2, #0]
  return result;
 80042cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	fab2 f282 	clz	r2, r2
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	f002 021f 	and.w	r2, r2, #31
 80042e2:	2101      	movs	r1, #1
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d09a      	beq.n	8004224 <HAL_RCC_OscConfig+0x8b4>
 80042ee:	e063      	b.n	80043b8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f0:	f7fc fd2c 	bl	8000d4c <HAL_GetTick>
 80042f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f8:	e00b      	b.n	8004312 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fc fd27 	bl	8000d4c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	; 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e23c      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
 8004312:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004316:	2202      	movs	r2, #2
 8004318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	fa93 f2a3 	rbit	r2, r3
 8004324:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800432e:	2202      	movs	r2, #2
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	fa93 f2a3 	rbit	r2, r3
 800433c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004340:	601a      	str	r2, [r3, #0]
  return result;
 8004342:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004346:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004348:	fab3 f383 	clz	r3, r3
 800434c:	b2db      	uxtb	r3, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f043 0302 	orr.w	r3, r3, #2
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d102      	bne.n	8004362 <HAL_RCC_OscConfig+0x9f2>
 800435c:	4b95      	ldr	r3, [pc, #596]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	e00d      	b.n	800437e <HAL_RCC_OscConfig+0xa0e>
 8004362:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004366:	2202      	movs	r2, #2
 8004368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	fa93 f2a3 	rbit	r2, r3
 8004374:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	4b8e      	ldr	r3, [pc, #568]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004382:	2102      	movs	r1, #2
 8004384:	6011      	str	r1, [r2, #0]
 8004386:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	fa92 f1a2 	rbit	r1, r2
 8004390:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004394:	6011      	str	r1, [r2, #0]
  return result;
 8004396:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	fab2 f282 	clz	r2, r2
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	f002 021f 	and.w	r2, r2, #31
 80043ac:	2101      	movs	r1, #1
 80043ae:	fa01 f202 	lsl.w	r2, r1, r2
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1a0      	bne.n	80042fa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043b8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c0:	4b7c      	ldr	r3, [pc, #496]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	4a7b      	ldr	r2, [pc, #492]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 81d9 	beq.w	800478a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043d8:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	f000 81a6 	beq.w	8004732 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	f040 811e 	bne.w	800462e <HAL_RCC_OscConfig+0xcbe>
 80043f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80043f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	fa93 f2a3 	rbit	r2, r3
 8004406:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800440a:	601a      	str	r2, [r3, #0]
  return result;
 800440c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004410:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800441c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fc fc90 	bl	8000d4c <HAL_GetTick>
 800442c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004430:	e009      	b.n	8004446 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004432:	f7fc fc8b 	bl	8000d4c <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1a2      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
 8004446:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800444a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800444e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	fa93 f2a3 	rbit	r2, r3
 800445a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800445e:	601a      	str	r2, [r3, #0]
  return result;
 8004460:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004464:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004466:	fab3 f383 	clz	r3, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <HAL_RCC_OscConfig+0xb10>
 800447a:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	e01b      	b.n	80044b8 <HAL_RCC_OscConfig+0xb48>
 8004480:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	fa93 f2a3 	rbit	r2, r3
 8004494:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800449e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	fa93 f2a3 	rbit	r2, r3
 80044ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80044bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044c0:	6011      	str	r1, [r2, #0]
 80044c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	fa92 f1a2 	rbit	r1, r2
 80044cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044d0:	6011      	str	r1, [r2, #0]
  return result;
 80044d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	fab2 f282 	clz	r2, r2
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	f042 0220 	orr.w	r2, r2, #32
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	f002 021f 	and.w	r2, r2, #31
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f202 	lsl.w	r2, r1, r2
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d19e      	bne.n	8004432 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f4:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	f023 020f 	bic.w	r2, r3, #15
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	492c      	ldr	r1, [pc, #176]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 8004504:	4313      	orrs	r3, r2
 8004506:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004508:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6a19      	ldr	r1, [r3, #32]
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	430b      	orrs	r3, r1
 800451e:	4925      	ldr	r1, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
 8004524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800452c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	fa93 f2a3 	rbit	r2, r3
 8004538:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800453c:	601a      	str	r2, [r3, #0]
  return result;
 800453e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004542:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800454e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	461a      	mov	r2, r3
 8004556:	2301      	movs	r3, #1
 8004558:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fc fbf7 	bl	8000d4c <HAL_GetTick>
 800455e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004562:	e009      	b.n	8004578 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fc fbf2 	bl	8000d4c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e109      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
 8004578:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800457c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	fa93 f2a3 	rbit	r2, r3
 800458c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004590:	601a      	str	r2, [r3, #0]
  return result;
 8004592:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004596:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004598:	fab3 f383 	clz	r3, r3
 800459c:	b2db      	uxtb	r3, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCC_OscConfig+0xc48>
 80045ac:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <HAL_RCC_OscConfig+0xc44>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	e01e      	b.n	80045f0 <HAL_RCC_OscConfig+0xc80>
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	fa93 f2a3 	rbit	r2, r3
 80045cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	fa93 f2a3 	rbit	r2, r3
 80045e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <HAL_RCC_OscConfig+0xe28>)
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80045f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045f8:	6011      	str	r1, [r2, #0]
 80045fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	fa92 f1a2 	rbit	r1, r2
 8004604:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004608:	6011      	str	r1, [r2, #0]
  return result;
 800460a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	fab2 f282 	clz	r2, r2
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f042 0220 	orr.w	r2, r2, #32
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	f002 021f 	and.w	r2, r2, #31
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f202 	lsl.w	r2, r1, r2
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d09b      	beq.n	8004564 <HAL_RCC_OscConfig+0xbf4>
 800462c:	e0ad      	b.n	800478a <HAL_RCC_OscConfig+0xe1a>
 800462e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004632:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	fa93 f2a3 	rbit	r2, r3
 8004642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004646:	601a      	str	r2, [r3, #0]
  return result;
 8004648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800464c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	fab3 f383 	clz	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004658:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	461a      	mov	r2, r3
 8004660:	2300      	movs	r3, #0
 8004662:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fc fb72 	bl	8000d4c <HAL_GetTick>
 8004668:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466c:	e009      	b.n	8004682 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466e:	f7fc fb6d 	bl	8000d4c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e084      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
 8004682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800468a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	fa93 f2a3 	rbit	r2, r3
 8004696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800469a:	601a      	str	r2, [r3, #0]
  return result;
 800469c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d102      	bne.n	80046bc <HAL_RCC_OscConfig+0xd4c>
 80046b6:	4b38      	ldr	r3, [pc, #224]	; (8004798 <HAL_RCC_OscConfig+0xe28>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	e01b      	b.n	80046f4 <HAL_RCC_OscConfig+0xd84>
 80046bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	fa93 f2a3 	rbit	r2, r3
 80046d0:	f107 0320 	add.w	r3, r7, #32
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f107 031c 	add.w	r3, r7, #28
 80046da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f107 031c 	add.w	r3, r7, #28
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	fa93 f2a3 	rbit	r2, r3
 80046ea:	f107 0318 	add.w	r3, r7, #24
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	4b29      	ldr	r3, [pc, #164]	; (8004798 <HAL_RCC_OscConfig+0xe28>)
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f107 0214 	add.w	r2, r7, #20
 80046f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046fc:	6011      	str	r1, [r2, #0]
 80046fe:	f107 0214 	add.w	r2, r7, #20
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	fa92 f1a2 	rbit	r1, r2
 8004708:	f107 0210 	add.w	r2, r7, #16
 800470c:	6011      	str	r1, [r2, #0]
  return result;
 800470e:	f107 0210 	add.w	r2, r7, #16
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	fab2 f282 	clz	r2, r2
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	f042 0220 	orr.w	r2, r2, #32
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	f002 021f 	and.w	r2, r2, #31
 8004724:	2101      	movs	r1, #1
 8004726:	fa01 f202 	lsl.w	r2, r1, r2
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d19e      	bne.n	800466e <HAL_RCC_OscConfig+0xcfe>
 8004730:	e02b      	b.n	800478a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e025      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004740:	4b15      	ldr	r3, [pc, #84]	; (8004798 <HAL_RCC_OscConfig+0xe28>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004748:	4b13      	ldr	r3, [pc, #76]	; (8004798 <HAL_RCC_OscConfig+0xe28>)
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004750:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004754:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004758:	1d3b      	adds	r3, r7, #4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	429a      	cmp	r2, r3
 8004760:	d111      	bne.n	8004786 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004762:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004770:	429a      	cmp	r2, r3
 8004772:	d108      	bne.n	8004786 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004778:	f003 020f 	and.w	r2, r3, #15
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b09e      	sub	sp, #120	; 0x78
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e162      	b.n	8004a7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b90      	ldr	r3, [pc, #576]	; (80049f8 <HAL_RCC_ClockConfig+0x25c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d910      	bls.n	80047e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b8d      	ldr	r3, [pc, #564]	; (80049f8 <HAL_RCC_ClockConfig+0x25c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0207 	bic.w	r2, r3, #7
 80047ca:	498b      	ldr	r1, [pc, #556]	; (80049f8 <HAL_RCC_ClockConfig+0x25c>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b89      	ldr	r3, [pc, #548]	; (80049f8 <HAL_RCC_ClockConfig+0x25c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e14a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b82      	ldr	r3, [pc, #520]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	497f      	ldr	r1, [pc, #508]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80dc 	beq.w	80049c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d13c      	bne.n	8004892 <HAL_RCC_ClockConfig+0xf6>
 8004818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004828:	fab3 f383 	clz	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d102      	bne.n	8004842 <HAL_RCC_ClockConfig+0xa6>
 800483c:	4b6f      	ldr	r3, [pc, #444]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	e00f      	b.n	8004862 <HAL_RCC_ClockConfig+0xc6>
 8004842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	667b      	str	r3, [r7, #100]	; 0x64
 8004850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004854:	663b      	str	r3, [r7, #96]	; 0x60
 8004856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800485e:	4b67      	ldr	r3, [pc, #412]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004866:	65ba      	str	r2, [r7, #88]	; 0x58
 8004868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800486a:	fa92 f2a2 	rbit	r2, r2
 800486e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004872:	fab2 f282 	clz	r2, r2
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	f042 0220 	orr.w	r2, r2, #32
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f002 021f 	and.w	r2, r2, #31
 8004882:	2101      	movs	r1, #1
 8004884:	fa01 f202 	lsl.w	r2, r1, r2
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d17b      	bne.n	8004986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e0f3      	b.n	8004a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d13c      	bne.n	8004914 <HAL_RCC_ClockConfig+0x178>
 800489a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800489e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80048a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048aa:	fab3 f383 	clz	r3, r3
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d102      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x128>
 80048be:	4b4f      	ldr	r3, [pc, #316]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	e00f      	b.n	80048e4 <HAL_RCC_ClockConfig+0x148>
 80048c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
 80048d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d6:	643b      	str	r3, [r7, #64]	; 0x40
 80048d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048da:	fa93 f3a3 	rbit	r3, r3
 80048de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e0:	4b46      	ldr	r3, [pc, #280]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80048ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ec:	fa92 f2a2 	rbit	r2, r2
 80048f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80048f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f4:	fab2 f282 	clz	r2, r2
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	f042 0220 	orr.w	r2, r2, #32
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	f002 021f 	and.w	r2, r2, #31
 8004904:	2101      	movs	r1, #1
 8004906:	fa01 f202 	lsl.w	r2, r1, r2
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d13a      	bne.n	8004986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0b2      	b.n	8004a7a <HAL_RCC_ClockConfig+0x2de>
 8004914:	2302      	movs	r3, #2
 8004916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_RCC_ClockConfig+0x1a0>
 8004936:	4b31      	ldr	r3, [pc, #196]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	e00d      	b.n	8004958 <HAL_RCC_ClockConfig+0x1bc>
 800493c:	2302      	movs	r3, #2
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
 8004948:	2302      	movs	r3, #2
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	4b29      	ldr	r3, [pc, #164]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	2202      	movs	r2, #2
 800495a:	61ba      	str	r2, [r7, #24]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	fa92 f2a2 	rbit	r2, r2
 8004962:	617a      	str	r2, [r7, #20]
  return result;
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	fab2 f282 	clz	r2, r2
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	f042 0220 	orr.w	r2, r2, #32
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	f002 021f 	and.w	r2, r2, #31
 8004976:	2101      	movs	r1, #1
 8004978:	fa01 f202 	lsl.w	r2, r1, r2
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e079      	b.n	8004a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f023 0203 	bic.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	491a      	ldr	r1, [pc, #104]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004998:	f7fc f9d8 	bl	8000d4c <HAL_GetTick>
 800499c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a0:	f7fc f9d4 	bl	8000d4c <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e061      	b.n	8004a7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_RCC_ClockConfig+0x260>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 020c 	and.w	r2, r3, #12
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1eb      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_ClockConfig+0x25c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d214      	bcs.n	8004a00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <HAL_RCC_ClockConfig+0x25c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 0207 	bic.w	r2, r3, #7
 80049de:	4906      	ldr	r1, [pc, #24]	; (80049f8 <HAL_RCC_ClockConfig+0x25c>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <HAL_RCC_ClockConfig+0x25c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e040      	b.n	8004a7a <HAL_RCC_ClockConfig+0x2de>
 80049f8:	40022000 	.word	0x40022000
 80049fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <HAL_RCC_ClockConfig+0x2e8>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	491a      	ldr	r1, [pc, #104]	; (8004a84 <HAL_RCC_ClockConfig+0x2e8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2a:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <HAL_RCC_ClockConfig+0x2e8>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4912      	ldr	r1, [pc, #72]	; (8004a84 <HAL_RCC_ClockConfig+0x2e8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a3e:	f000 f829 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8004a42:	4601      	mov	r1, r0
 8004a44:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <HAL_RCC_ClockConfig+0x2e8>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a4c:	22f0      	movs	r2, #240	; 0xf0
 8004a4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	fa92 f2a2 	rbit	r2, r2
 8004a56:	60fa      	str	r2, [r7, #12]
  return result;
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	fab2 f282 	clz	r2, r2
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	40d3      	lsrs	r3, r2
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x2ec>)
 8004a64:	5cd3      	ldrb	r3, [r2, r3]
 8004a66:	fa21 f303 	lsr.w	r3, r1, r3
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <HAL_RCC_ClockConfig+0x2f0>)
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <HAL_RCC_ClockConfig+0x2f4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fc f926 	bl	8000cc4 <HAL_InitTick>
  
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3778      	adds	r7, #120	; 0x78
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	08010068 	.word	0x08010068
 8004a8c:	20000040 	.word	0x20000040
 8004a90:	20000000 	.word	0x20000000

08004a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b08b      	sub	sp, #44	; 0x2c
 8004a98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004aae:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0x36>
 8004ac2:	e03f      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ac4:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ac6:	623b      	str	r3, [r7, #32]
      break;
 8004ac8:	e03f      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004ad0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004ad4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	fa92 f2a2 	rbit	r2, r2
 8004adc:	607a      	str	r2, [r7, #4]
  return result;
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	fab2 f282 	clz	r2, r2
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	40d3      	lsrs	r3, r2
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004aea:	5cd3      	ldrb	r3, [r2, r3]
 8004aec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004aee:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	220f      	movs	r2, #15
 8004af8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	fa92 f2a2 	rbit	r2, r2
 8004b00:	60fa      	str	r2, [r7, #12]
  return result;
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	fab2 f282 	clz	r2, r2
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	40d3      	lsrs	r3, r2
 8004b0c:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b1c:	4a0f      	ldr	r2, [pc, #60]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2c:	e007      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b2e:	4a0b      	ldr	r2, [pc, #44]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	623b      	str	r3, [r7, #32]
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b46:	623b      	str	r3, [r7, #32]
      break;
 8004b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	372c      	adds	r7, #44	; 0x2c
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	007a1200 	.word	0x007a1200
 8004b60:	0800c068 	.word	0x0800c068
 8004b64:	0800c078 	.word	0x0800c078

08004b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000040 	.word	0x20000040

08004b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b86:	f7ff ffef 	bl	8004b68 <HAL_RCC_GetHCLKFreq>
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	fa92 f2a2 	rbit	r2, r2
 8004ba0:	603a      	str	r2, [r7, #0]
  return result;
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	fab2 f282 	clz	r2, r2
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	40d3      	lsrs	r3, r2
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004bae:	5cd3      	ldrb	r3, [r2, r3]
 8004bb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	08010078 	.word	0x08010078

08004bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004bca:	f7ff ffcd 	bl	8004b68 <HAL_RCC_GetHCLKFreq>
 8004bce:	4601      	mov	r1, r0
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004bd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	fa92 f2a2 	rbit	r2, r2
 8004be4:	603a      	str	r2, [r7, #0]
  return result;
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	fab2 f282 	clz	r2, r2
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	40d3      	lsrs	r3, r2
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004bf2:	5cd3      	ldrb	r3, [r2, r3]
 8004bf4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000
 8004c04:	08010078 	.word	0x08010078

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b092      	sub	sp, #72	; 0x48
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80d7 	beq.w	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10e      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c38:	4b4b      	ldr	r3, [pc, #300]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4a4a      	ldr	r2, [pc, #296]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c42:	61d3      	str	r3, [r2, #28]
 8004c44:	4b48      	ldr	r3, [pc, #288]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c56:	4b45      	ldr	r3, [pc, #276]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d118      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c62:	4b42      	ldr	r3, [pc, #264]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a41      	ldr	r2, [pc, #260]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c6e:	f7fc f86d 	bl	8000d4c <HAL_GetTick>
 8004c72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c74:	e008      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c76:	f7fc f869 	bl	8000d4c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b64      	cmp	r3, #100	; 0x64
 8004c82:	d901      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e1d6      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c94:	4b34      	ldr	r3, [pc, #208]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8084 	beq.w	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d07c      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb4:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2301      	movs	r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	461a      	mov	r2, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d04b      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d16:	f7fc f819 	bl	8000d4c <HAL_GetTick>
 8004d1a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1e:	f7fc f815 	bl	8000d4c <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e180      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d34:	2302      	movs	r3, #2
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	fa93 f3a3 	rbit	r3, r3
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d40:	2302      	movs	r3, #2
 8004d42:	623b      	str	r3, [r7, #32]
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	fa93 f3a3 	rbit	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
  return result;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	fab3 f383 	clz	r3, r3
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f043 0302 	orr.w	r3, r3, #2
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d108      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d62:	4b01      	ldr	r3, [pc, #4]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	e00d      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40007000 	.word	0x40007000
 8004d70:	10908100 	.word	0x10908100
 8004d74:	2302      	movs	r3, #2
 8004d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	4ba0      	ldr	r3, [pc, #640]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2202      	movs	r2, #2
 8004d86:	613a      	str	r2, [r7, #16]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	fa92 f2a2 	rbit	r2, r2
 8004d8e:	60fa      	str	r2, [r7, #12]
  return result;
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	fab2 f282 	clz	r2, r2
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	f002 021f 	and.w	r2, r2, #31
 8004da2:	2101      	movs	r1, #1
 8004da4:	fa01 f202 	lsl.w	r2, r1, r2
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0b7      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004dae:	4b95      	ldr	r3, [pc, #596]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4992      	ldr	r1, [pc, #584]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4b8e      	ldr	r3, [pc, #568]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4a8d      	ldr	r2, [pc, #564]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004de0:	4b88      	ldr	r3, [pc, #544]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	f023 0203 	bic.w	r2, r3, #3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4985      	ldr	r1, [pc, #532]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dfe:	4b81      	ldr	r3, [pc, #516]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	497e      	ldr	r1, [pc, #504]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e1c:	4b79      	ldr	r3, [pc, #484]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	4976      	ldr	r1, [pc, #472]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e3a:	4b72      	ldr	r3, [pc, #456]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	f023 0210 	bic.w	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	496f      	ldr	r1, [pc, #444]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e58:	4b6a      	ldr	r3, [pc, #424]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e64:	4967      	ldr	r1, [pc, #412]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e76:	4b63      	ldr	r3, [pc, #396]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	f023 0220 	bic.w	r2, r3, #32
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	4960      	ldr	r1, [pc, #384]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e94:	4b5b      	ldr	r3, [pc, #364]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	4958      	ldr	r1, [pc, #352]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eb2:	4b54      	ldr	r3, [pc, #336]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	4951      	ldr	r1, [pc, #324]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ed0:	4b4c      	ldr	r3, [pc, #304]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	4949      	ldr	r1, [pc, #292]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eee:	4b45      	ldr	r3, [pc, #276]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	4942      	ldr	r1, [pc, #264]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f0c:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	493a      	ldr	r1, [pc, #232]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f2a:	4b36      	ldr	r3, [pc, #216]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	4933      	ldr	r1, [pc, #204]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f48:	4b2e      	ldr	r3, [pc, #184]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f54:	492b      	ldr	r1, [pc, #172]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f66:	4b27      	ldr	r3, [pc, #156]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	4924      	ldr	r1, [pc, #144]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004f84:	4b1f      	ldr	r3, [pc, #124]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	491c      	ldr	r1, [pc, #112]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	4915      	ldr	r1, [pc, #84]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	490d      	ldr	r1, [pc, #52]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fea:	4906      	ldr	r1, [pc, #24]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00c      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004ffc:	4b01      	ldr	r3, [pc, #4]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	e002      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005010:	490b      	ldr	r1, [pc, #44]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005012:	4313      	orrs	r3, r2
 8005014:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005022:	4b07      	ldr	r3, [pc, #28]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502e:	4904      	ldr	r1, [pc, #16]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005030:	4313      	orrs	r3, r2
 8005032:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3748      	adds	r7, #72	; 0x48
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000

08005044 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005044:	b5b0      	push	{r4, r5, r7, lr}
 8005046:	b090      	sub	sp, #64	; 0x40
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* frequency == 0 : means that no available frequency for the peripheral */
  uint32_t frequency = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint32_t srcclk = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR2_ADCPRE12) || defined(RCC_CFGR2_ADCPRE34)
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8005054:	4bb1      	ldr	r3, [pc, #708]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005056:	f107 0408 	add.w	r4, r7, #8
 800505a:	461d      	mov	r5, r3
 800505c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800505e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005060:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif /* RCC_CFGR_SDPRE */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	f000 826d 	beq.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x508>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	d829      	bhi.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8005078:	2b10      	cmp	r3, #16
 800507a:	f000 8157 	beq.w	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800507e:	2b10      	cmp	r3, #16
 8005080:	d80f      	bhi.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005082:	2b02      	cmp	r3, #2
 8005084:	f000 80b6 	beq.w	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8005088:	2b02      	cmp	r3, #2
 800508a:	d803      	bhi.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800508c:	2b01      	cmp	r3, #1
 800508e:	f000 8083 	beq.w	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      break;
    }
#endif /* RCC_CFGR3_CECSW */
  default: 
    {
      break;
 8005092:	e368      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
  switch (PeriphClk)
 8005094:	2b04      	cmp	r3, #4
 8005096:	f000 80de 	beq.w	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800509a:	2b08      	cmp	r3, #8
 800509c:	f000 810c 	beq.w	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      break;
 80050a0:	e361      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
  switch (PeriphClk)
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	f000 81f0 	beq.w	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x444>
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d806      	bhi.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	f000 816e 	beq.w	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	f000 8184 	beq.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
      break;
 80050b8:	e355      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
  switch (PeriphClk)
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050be:	f000 8214 	beq.w	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	f000 81ad 	beq.w	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
      break;
 80050ca:	e34c      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
  switch (PeriphClk)
 80050cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d0:	f000 8258 	beq.w	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80050d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d8:	d813      	bhi.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80050da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050de:	d029      	beq.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e4:	d804      	bhi.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	f000 826f 	beq.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
      break;
 80050ee:	e33a      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
  switch (PeriphClk)
 80050f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f4:	f000 81aa 	beq.w	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 80050f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050fc:	f000 8179 	beq.w	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
      break;
 8005100:	e331      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
  switch (PeriphClk)
 8005102:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005106:	f000 8299 	beq.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800510a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800510e:	d808      	bhi.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005114:	f000 82e3 	beq.w	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8005118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511c:	f000 8272 	beq.w	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
      break;
 8005120:	e321      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
  switch (PeriphClk)
 8005122:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005126:	f000 82a4 	beq.w	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800512a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800512e:	f000 82bb 	beq.w	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
      break;
 8005132:	e318      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005134:	4b7a      	ldr	r3, [pc, #488]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005144:	d109      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8005146:	4b76      	ldr	r3, [pc, #472]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d103      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005158:	e01d      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005160:	d109      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8005162:	4b6f      	ldr	r3, [pc, #444]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d103      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
        frequency = LSI_VALUE;
 800516e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005174:	e00f      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517c:	f040 82ca 	bne.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
 8005180:	4b67      	ldr	r3, [pc, #412]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800518c:	f040 82c2 	bne.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
        frequency = HSE_VALUE / 32U;
 8005190:	4b64      	ldr	r3, [pc, #400]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005194:	e2be      	b.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
 8005196:	e2bd      	b.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005198:	4b61      	ldr	r3, [pc, #388]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	63bb      	str	r3, [r7, #56]	; 0x38
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        frequency = HAL_RCC_GetPCLK2Freq();
 80051a8:	f7ff fd0c 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 80051ac:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80051ae:	e2b3      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d108      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80051b6:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d102      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
        frequency = HSI_VALUE;
 80051c2:	4b59      	ldr	r3, [pc, #356]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80051c6:	e2a7      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d103      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
        frequency = HAL_RCC_GetSysClockFreq();
 80051ce:	f7ff fc61 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 80051d2:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80051d4:	e2a0      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	2b02      	cmp	r3, #2
 80051da:	f040 829d 	bne.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80051de:	4b50      	ldr	r3, [pc, #320]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	f040 8296 	bne.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
        frequency = LSE_VALUE;
 80051ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80051f2:	e291      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80051f4:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d103      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005204:	f7ff fcbc 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8005208:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 800520a:	e287      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005212:	d108      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8005214:	4b42      	ldr	r3, [pc, #264]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b02      	cmp	r3, #2
 800521e:	d102      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
        frequency = HSI_VALUE;
 8005220:	4b41      	ldr	r3, [pc, #260]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005224:	e27a      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d103      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
        frequency = HAL_RCC_GetSysClockFreq();
 800522e:	f7ff fc31 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8005232:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 8005234:	e272      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800523c:	f040 826e 	bne.w	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005240:	4b37      	ldr	r3, [pc, #220]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	f040 8267 	bne.w	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
        frequency = LSE_VALUE;
 800524e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005254:	e262      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005256:	4b32      	ldr	r3, [pc, #200]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005266:	f7ff fc8b 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 800526a:	63f8      	str	r0, [r7, #60]	; 0x3c
     break;
 800526c:	e258      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
      else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005274:	d108      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005276:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d102      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
        frequency = HSI_VALUE;
 8005282:	4b29      	ldr	r3, [pc, #164]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
     break;
 8005286:	e24b      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
      else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800528e:	d103      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
        frequency = HAL_RCC_GetSysClockFreq();
 8005290:	f7ff fc00 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8005294:	63f8      	str	r0, [r7, #60]	; 0x3c
     break;
 8005296:	e243      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
      else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800529e:	f040 823f 	bne.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80052a2:	4b1f      	ldr	r3, [pc, #124]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	f040 8238 	bne.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
        frequency = LSE_VALUE;
 80052b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b4:	63fb      	str	r3, [r7, #60]	; 0x3c
     break;
 80052b6:	e233      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80052b8:	4b19      	ldr	r3, [pc, #100]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80052c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d103      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7ff fc5a 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 80052cc:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80052ce:	e229      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052d6:	d108      	bne.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80052d8:	4b11      	ldr	r3, [pc, #68]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d102      	bne.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        frequency = HSI_VALUE;
 80052e4:	4b10      	ldr	r3, [pc, #64]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80052e8:	e21c      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
      else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f0:	d103      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x2b6>
        frequency = HAL_RCC_GetSysClockFreq();
 80052f2:	f7ff fbcf 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 80052f6:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80052f8:	e214      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005300:	f040 8210 	bne.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	f040 8209 	bne.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
        frequency = LSE_VALUE;
 8005312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005318:	e204      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800531a:	bf00      	nop
 800531c:	0800bf08 	.word	0x0800bf08
 8005320:	40021000 	.word	0x40021000
 8005324:	0003d090 	.word	0x0003d090
 8005328:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800532c:	4ba3      	ldr	r3, [pc, #652]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005334:	63bb      	str	r3, [r7, #56]	; 0x38
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	2b00      	cmp	r3, #0
 800533a:	d103      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        frequency = HAL_RCC_GetPCLK1Freq();
 800533c:	f7ff fc20 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8005340:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 8005342:	e1f1      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800534a:	d108      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800534c:	4b9b      	ldr	r3, [pc, #620]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d102      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
        frequency = HSI_VALUE;
 8005358:	4b99      	ldr	r3, [pc, #612]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 800535c:	e1e4      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005364:	d103      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        frequency = HAL_RCC_GetSysClockFreq();
 8005366:	f7ff fb95 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 800536a:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 800536c:	e1dc      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005374:	f040 81d8 	bne.w	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8005378:	4b90      	ldr	r3, [pc, #576]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	f040 81d1 	bne.w	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
        frequency = LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 800538c:	e1cc      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800538e:	4b8b      	ldr	r3, [pc, #556]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	2b00      	cmp	r3, #0
 800539c:	d108      	bne.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 800539e:	4b87      	ldr	r3, [pc, #540]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d102      	bne.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        frequency = HSI_VALUE;
 80053aa:	4b85      	ldr	r3, [pc, #532]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80053ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80053ae:	e1bd      	b.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	f040 81ba 	bne.w	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
        frequency = HAL_RCC_GetSysClockFreq();
 80053b8:	f7ff fb6c 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 80053bc:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80053be:	e1b5      	b.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80053c0:	4b7e      	ldr	r3, [pc, #504]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d108      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80053d0:	4b7a      	ldr	r3, [pc, #488]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d102      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
        frequency = HSI_VALUE;
 80053dc:	4b78      	ldr	r3, [pc, #480]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80053e0:	e1a6      	b.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
      else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	f040 81a3 	bne.w	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
        frequency = HAL_RCC_GetSysClockFreq();
 80053ea:	f7ff fb53 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 80053ee:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80053f0:	e19e      	b.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80053f2:	4b72      	ldr	r3, [pc, #456]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d108      	bne.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
 8005402:	4b6e      	ldr	r3, [pc, #440]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b02      	cmp	r3, #2
 800540c:	d102      	bne.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
        frequency = HSI_VALUE;
 800540e:	4b6c      	ldr	r3, [pc, #432]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005410:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005412:	e18f      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	f040 818c 	bne.w	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = HAL_RCC_GetSysClockFreq();
 800541c:	f7ff fb3a 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8005420:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 8005422:	e187      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005424:	4b65      	ldr	r3, [pc, #404]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800542c:	63bb      	str	r3, [r7, #56]	; 0x38
      if (srcclk == RCC_I2SCLKSOURCE_EXT)
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005434:	d102      	bne.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
        frequency = 0xDEADDEADU;
 8005436:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 800543a:	e17d      	b.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
      else if (srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	2b00      	cmp	r3, #0
 8005440:	f040 817a 	bne.w	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        frequency = HAL_RCC_GetSysClockFreq();
 8005444:	f7ff fb26 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8005448:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 800544a:	e175      	b.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800544c:	4b5b      	ldr	r3, [pc, #364]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005458:	f040 8170 	bne.w	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800545c:	4b57      	ldr	r3, [pc, #348]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005464:	63bb      	str	r3, [r7, #56]	; 0x38
        if (srcclk == RCC_USBCLKSOURCE_PLL)
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800546c:	d103      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
          frequency = RCC_GetPLLCLKFreq();
 800546e:	f000 f983 	bl	8005778 <RCC_GetPLLCLKFreq>
 8005472:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 8005474:	e162      	b.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          frequency = (RCC_GetPLLCLKFreq() * 3U) / 2U;
 8005476:	f000 f97f 	bl	8005778 <RCC_GetPLLCLKFreq>
 800547a:	4602      	mov	r2, r0
 800547c:	4613      	mov	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4413      	add	r3, r2
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005486:	e159      	b.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8005488:	4b4c      	ldr	r3, [pc, #304]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38
      if (srcclk == RCC_ADC12PLLCLK_OFF)
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = SystemCoreClock;
 8005498:	4b4b      	ldr	r3, [pc, #300]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 800549e:	e14f      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054a0:	4b46      	ldr	r3, [pc, #280]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ac:	f040 8148 	bne.w	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE12)) & 0xF];
 80054b0:	f000 f962 	bl	8005778 <RCC_GetPLLCLKFreq>
 80054b4:	4602      	mov	r2, r0
 80054b6:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	fa93 f3a3 	rbit	r3, r3
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	fab3 f383 	clz	r3, r3
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	40cb      	lsrs	r3, r1
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80054dc:	440b      	add	r3, r1
 80054de:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80054e8:	e12a      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
      srcclk = __HAL_RCC_GET_ADC34_SOURCE();
 80054ea:	4b34      	ldr	r3, [pc, #208]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80054f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if (srcclk == RCC_ADC34PLLCLK_OFF)
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d103      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          frequency = SystemCoreClock;
 80054fa:	4b33      	ldr	r3, [pc, #204]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005500:	e120      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005502:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800550e:	f040 8119 	bne.w	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8005512:	f000 f931 	bl	8005778 <RCC_GetPLLCLKFreq>
 8005516:	4602      	mov	r2, r0
 8005518:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	fa93 f3a3 	rbit	r3, r3
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	fab3 f383 	clz	r3, r3
 800552c:	b2db      	uxtb	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	40cb      	lsrs	r3, r1
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800553e:	440b      	add	r3, r1
 8005540:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 800554a:	e0fb      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
      srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_TIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555c:	d10a      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
 800555e:	4b17      	ldr	r3, [pc, #92]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800556a:	d103      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = RCC_GetPLLCLKFreq();
 800556c:	f000 f904 	bl	8005778 <RCC_GetPLLCLKFreq>
 8005570:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 8005572:	e0e9      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
      else if (srcclk == RCC_TIM1CLK_HCLK)
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 80e6 	bne.w	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        frequency = SystemCoreClock;
 800557c:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005582:	e0e1      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
      srcclk = __HAL_RCC_GET_TIM2_SOURCE();
 8005584:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800558c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_TIM2CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005594:	d10a      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055a2:	d103      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x568>
        frequency = RCC_GetPLLCLKFreq();
 80055a4:	f000 f8e8 	bl	8005778 <RCC_GetPLLCLKFreq>
 80055a8:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80055aa:	e0cf      	b.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
      else if (srcclk == RCC_TIM2CLK_HCLK)
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 80cc 	bne.w	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
        frequency = SystemCoreClock;
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80055ba:	e0c7      	b.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 80055bc:	40021000 	.word	0x40021000
 80055c0:	007a1200 	.word	0x007a1200
 80055c4:	deaddead 	.word	0xdeaddead
 80055c8:	20000040 	.word	0x20000040
      srcclk = __HAL_RCC_GET_TIM8_SOURCE();
 80055cc:	4b68      	ldr	r3, [pc, #416]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_TIM8CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055dc:	d10a      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80055de:	4b64      	ldr	r3, [pc, #400]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ea:	d103      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
        frequency = RCC_GetPLLCLKFreq();
 80055ec:	f000 f8c4 	bl	8005778 <RCC_GetPLLCLKFreq>
 80055f0:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80055f2:	e0ad      	b.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
      else if (srcclk == RCC_TIM8CLK_HCLK)
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 80aa 	bne.w	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
        frequency = SystemCoreClock;
 80055fc:	4b5d      	ldr	r3, [pc, #372]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005602:	e0a5      	b.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
      srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8005604:	4b5a      	ldr	r3, [pc, #360]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_TIM15CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005614:	d10a      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005616:	4b56      	ldr	r3, [pc, #344]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005622:	d103      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
        frequency = RCC_GetPLLCLKFreq();
 8005624:	f000 f8a8 	bl	8005778 <RCC_GetPLLCLKFreq>
 8005628:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 800562a:	e093      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
      else if (srcclk == RCC_TIM15CLK_HCLK)
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	f040 8090 	bne.w	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        frequency = SystemCoreClock;
 8005634:	4b4f      	ldr	r3, [pc, #316]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 800563a:	e08b      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
      srcclk = __HAL_RCC_GET_TIM16_SOURCE();
 800563c:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_TIM16CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d10a      	bne.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800564e:	4b48      	ldr	r3, [pc, #288]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800565a:	d103      	bne.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        frequency = RCC_GetPLLCLKFreq();
 800565c:	f000 f88c 	bl	8005778 <RCC_GetPLLCLKFreq>
 8005660:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 8005662:	e079      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
      else if (srcclk == RCC_TIM16CLK_HCLK)
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	2b00      	cmp	r3, #0
 8005668:	d176      	bne.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
        frequency = SystemCoreClock;
 800566a:	4b42      	ldr	r3, [pc, #264]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005670:	e072      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
      srcclk = __HAL_RCC_GET_TIM17_SOURCE();
 8005672:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800567a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_TIM17CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005682:	d10a      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 8005684:	4b3a      	ldr	r3, [pc, #232]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005690:	d103      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
        frequency = RCC_GetPLLCLKFreq();
 8005692:	f000 f871 	bl	8005778 <RCC_GetPLLCLKFreq>
 8005696:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 8005698:	e060      	b.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
      else if (srcclk == RCC_TIM17CLK_HCLK)
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d15d      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
        frequency = SystemCoreClock;
 80056a0:	4b34      	ldr	r3, [pc, #208]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80056a6:	e059      	b.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();
 80056a8:	4b31      	ldr	r3, [pc, #196]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056b0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b8:	d10a      	bne.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80056ba:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c6:	d103      	bne.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        frequency = RCC_GetPLLCLKFreq();
 80056c8:	f000 f856 	bl	8005778 <RCC_GetPLLCLKFreq>
 80056cc:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 80056ce:	e047      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
      else if (srcclk == RCC_TIM20CLK_HCLK)
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d144      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        frequency = SystemCoreClock;
 80056d6:	4b27      	ldr	r3, [pc, #156]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 80056dc:	e040      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
      srcclk = __HAL_RCC_GET_TIM34_SOURCE();
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056ee:	d10a      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 80056f0:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056fc:	d103      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        frequency = RCC_GetPLLCLKFreq();
 80056fe:	f000 f83b 	bl	8005778 <RCC_GetPLLCLKFreq>
 8005702:	63f8      	str	r0, [r7, #60]	; 0x3c
      break;
 8005704:	e02e      	b.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
      else if (srcclk == RCC_TIM34CLK_HCLK)
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2b00      	cmp	r3, #0
 800570a:	d12b      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = SystemCoreClock;
 800570c:	4b19      	ldr	r3, [pc, #100]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8005712:	e027      	b.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
      break;
 8005714:	bf00      	nop
 8005716:	e026      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005718:	bf00      	nop
 800571a:	e024      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 800571c:	bf00      	nop
 800571e:	e022      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
     break;
 8005720:	bf00      	nop
 8005722:	e020      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005724:	bf00      	nop
 8005726:	e01e      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005728:	bf00      	nop
 800572a:	e01c      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 800572c:	bf00      	nop
 800572e:	e01a      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005730:	bf00      	nop
 8005732:	e018      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005734:	bf00      	nop
 8005736:	e016      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005738:	bf00      	nop
 800573a:	e014      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 800573c:	bf00      	nop
 800573e:	e012      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005740:	bf00      	nop
 8005742:	e010      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005744:	bf00      	nop
 8005746:	e00e      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005748:	bf00      	nop
 800574a:	e00c      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 800574c:	bf00      	nop
 800574e:	e00a      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005750:	bf00      	nop
 8005752:	e008      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005754:	bf00      	nop
 8005756:	e006      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005758:	bf00      	nop
 800575a:	e004      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 800575c:	bf00      	nop
 800575e:	e002      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005760:	bf00      	nop
 8005762:	e000      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
      break;
 8005764:	bf00      	nop
    }
  }
  return(frequency);
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005768:	4618      	mov	r0, r3
 800576a:	3740      	adds	r7, #64	; 0x40
 800576c:	46bd      	mov	sp, r7
 800576e:	bdb0      	pop	{r4, r5, r7, pc}
 8005770:	40021000 	.word	0x40021000
 8005774:	20000040 	.word	0x20000040

08005778 <RCC_GetPLLCLKFreq>:

/** @addtogroup RCCEx_Private_Functions
  * @{
  */
static uint32_t RCC_GetPLLCLKFreq(void)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
  uint32_t pllmul = 0U, pllsource = 0U, prediv = 0U, pllclk = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	2300      	movs	r3, #0
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]

  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800578e:	4b18      	ldr	r3, [pc, #96]	; (80057f0 <RCC_GetPLLCLKFreq+0x78>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005796:	60bb      	str	r3, [r7, #8]
  pllmul = ( pllmul >> 18U) + 2U;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	0c9b      	lsrs	r3, r3, #18
 800579c:	3302      	adds	r3, #2
 800579e:	60bb      	str	r3, [r7, #8]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80057a0:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <RCC_GetPLLCLKFreq+0x78>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80057a8:	607b      	str	r3, [r7, #4]
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/2U * PLLMUL */
    pllclk = (HSI_VALUE >> 1U) * pllmul;
  }
#else
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 80057aa:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <RCC_GetPLLCLKFreq+0x78>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	3301      	adds	r3, #1
 80057b4:	603b      	str	r3, [r7, #0]
  if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d108      	bne.n	80057d0 <RCC_GetPLLCLKFreq+0x58>
  {
    /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
    pllclk = (HSE_VALUE/prediv) * pllmul;
 80057be:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <RCC_GetPLLCLKFreq+0x7c>)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	fb02 f303 	mul.w	r3, r2, r3
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	e007      	b.n	80057e0 <RCC_GetPLLCLKFreq+0x68>
  }
  else
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
    pllclk = (HSI_VALUE/prediv) * pllmul;
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <RCC_GetPLLCLKFreq+0x7c>)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	60fb      	str	r3, [r7, #12]
  }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

  return pllclk;
 80057e0:	68fb      	ldr	r3, [r7, #12]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000
 80057f4:	007a1200 	.word	0x007a1200

080057f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e01d      	b.n	8005846 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f004 f95a 	bl	8009ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 fa3e 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <HAL_TIM_Base_Start+0x50>)
 8005868:	4013      	ands	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b06      	cmp	r3, #6
 8005870:	d00b      	beq.n	800588a <HAL_TIM_Base_Start+0x3a>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005878:	d007      	beq.n	800588a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	00010007 	.word	0x00010007

080058a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d122      	bne.n	8005900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d11b      	bne.n	8005900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0202 	mvn.w	r2, #2
 80058d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9c8 	bl	8005c7c <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9ba 	bl	8005c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f9cb 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b04      	cmp	r3, #4
 800590c:	d122      	bne.n	8005954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d11b      	bne.n	8005954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0204 	mvn.w	r2, #4
 8005924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f99e 	bl	8005c7c <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f990 	bl	8005c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f9a1 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b08      	cmp	r3, #8
 8005960:	d122      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b08      	cmp	r3, #8
 800596e:	d11b      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0208 	mvn.w	r2, #8
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2204      	movs	r2, #4
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f974 	bl	8005c7c <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f966 	bl	8005c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f977 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d122      	bne.n	80059fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d11b      	bne.n	80059fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0210 	mvn.w	r2, #16
 80059cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2208      	movs	r2, #8
 80059d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f94a 	bl	8005c7c <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f93c 	bl	8005c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f94d 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d10e      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d107      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0201 	mvn.w	r2, #1
 8005a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f916 	bl	8005c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a32:	2b80      	cmp	r3, #128	; 0x80
 8005a34:	d10e      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d107      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fb00 	bl	8006054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a62:	d10e      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 faf3 	bl	8006068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d10e      	bne.n	8005aae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d107      	bne.n	8005aae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8fb 	bl	8005ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d10e      	bne.n	8005ada <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0220 	mvn.w	r2, #32
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fab3 	bl	8006040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_ConfigClockSource+0x18>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e0a8      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x16a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b24:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d067      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x124>
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d80b      	bhi.n	8005b52 <HAL_TIM_ConfigClockSource+0x70>
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d073      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x144>
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d802      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x66>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d06f      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b46:	e078      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d06c      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x144>
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d06a      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005b50:	e073      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b52:	2b70      	cmp	r3, #112	; 0x70
 8005b54:	d00d      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0x90>
 8005b56:	2b70      	cmp	r3, #112	; 0x70
 8005b58:	d804      	bhi.n	8005b64 <HAL_TIM_ConfigClockSource+0x82>
 8005b5a:	2b50      	cmp	r3, #80	; 0x50
 8005b5c:	d033      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0xe4>
 8005b5e:	2b60      	cmp	r3, #96	; 0x60
 8005b60:	d041      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005b62:	e06a      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b68:	d066      	beq.n	8005c38 <HAL_TIM_ConfigClockSource+0x156>
 8005b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6e:	d017      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005b70:	e063      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6899      	ldr	r1, [r3, #8]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f000 f9b1 	bl	8005ee8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	609a      	str	r2, [r3, #8]
      break;
 8005b9e:	e04c      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f000 f99a 	bl	8005ee8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bc2:	609a      	str	r2, [r3, #8]
      break;
 8005bc4:	e039      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 f90e 	bl	8005df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2150      	movs	r1, #80	; 0x50
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f967 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005be4:	e029      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f000 f92d 	bl	8005e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2160      	movs	r1, #96	; 0x60
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f957 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c04:	e019      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f000 f8ee 	bl	8005df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f947 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c24:	e009      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f000 f93e 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c36:	e000      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005c38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a42      	ldr	r2, [pc, #264]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd6:	d00f      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3f      	ldr	r2, [pc, #252]	; (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a3e      	ldr	r2, [pc, #248]	; (8005ddc <TIM_Base_SetConfig+0x124>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a3d      	ldr	r2, [pc, #244]	; (8005de0 <TIM_Base_SetConfig+0x128>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a3c      	ldr	r2, [pc, #240]	; (8005de4 <TIM_Base_SetConfig+0x12c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d108      	bne.n	8005d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a31      	ldr	r2, [pc, #196]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01f      	beq.n	8005d52 <TIM_Base_SetConfig+0x9a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d18:	d01b      	beq.n	8005d52 <TIM_Base_SetConfig+0x9a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2e      	ldr	r2, [pc, #184]	; (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d017      	beq.n	8005d52 <TIM_Base_SetConfig+0x9a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2d      	ldr	r2, [pc, #180]	; (8005ddc <TIM_Base_SetConfig+0x124>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <TIM_Base_SetConfig+0x9a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2c      	ldr	r2, [pc, #176]	; (8005de0 <TIM_Base_SetConfig+0x128>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <TIM_Base_SetConfig+0x9a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2c      	ldr	r2, [pc, #176]	; (8005de8 <TIM_Base_SetConfig+0x130>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00b      	beq.n	8005d52 <TIM_Base_SetConfig+0x9a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2b      	ldr	r2, [pc, #172]	; (8005dec <TIM_Base_SetConfig+0x134>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <TIM_Base_SetConfig+0x9a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2a      	ldr	r2, [pc, #168]	; (8005df0 <TIM_Base_SetConfig+0x138>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <TIM_Base_SetConfig+0x9a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <TIM_Base_SetConfig+0x12c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d108      	bne.n	8005d64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <TIM_Base_SetConfig+0x100>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <TIM_Base_SetConfig+0x128>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00f      	beq.n	8005db8 <TIM_Base_SetConfig+0x100>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <TIM_Base_SetConfig+0x130>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <TIM_Base_SetConfig+0x100>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a12      	ldr	r2, [pc, #72]	; (8005dec <TIM_Base_SetConfig+0x134>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <TIM_Base_SetConfig+0x100>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <TIM_Base_SetConfig+0x138>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_Base_SetConfig+0x100>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <TIM_Base_SetConfig+0x12c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d103      	bne.n	8005dc0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	615a      	str	r2, [r3, #20]
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40013400 	.word	0x40013400
 8005de4:	40015000 	.word	0x40015000
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f023 0201 	bic.w	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 030a 	bic.w	r3, r3, #10
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b087      	sub	sp, #28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f023 0210 	bic.w	r2, r3, #16
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	031b      	lsls	r3, r3, #12
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f043 0307 	orr.w	r3, r3, #7
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	609a      	str	r2, [r3, #8]
}
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	021a      	lsls	r2, r3, #8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	609a      	str	r2, [r3, #8]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e06d      	b.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a30      	ldr	r2, [pc, #192]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d009      	beq.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2f      	ldr	r2, [pc, #188]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d108      	bne.n	8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d01d      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbc:	d018      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1a      	ldr	r2, [pc, #104]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00e      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d009      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a16      	ldr	r2, [pc, #88]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a11      	ldr	r2, [pc, #68]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d10c      	bne.n	800600a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40013400 	.word	0x40013400
 8006030:	40015000 	.word	0x40015000
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40014000 	.word	0x40014000

08006040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e040      	b.n	8006110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f003 fda8 	bl	8009bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2224      	movs	r2, #36	; 0x24
 80060a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fabc 	bl	8006638 <UART_SetConfig>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e022      	b.n	8006110 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fcca 	bl	8006a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fd51 	bl	8006bb0 <UART_CheckIdleState>
 800610e:	4603      	mov	r3, r0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	; 0x28
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612c:	2b20      	cmp	r3, #32
 800612e:	f040 8081 	bne.w	8006234 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_UART_Transmit+0x26>
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e079      	b.n	8006236 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_UART_Transmit+0x38>
 800614c:	2302      	movs	r3, #2
 800614e:	e072      	b.n	8006236 <HAL_UART_Transmit+0x11e>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2221      	movs	r2, #33	; 0x21
 8006162:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006164:	f7fa fdf2 	bl	8000d4c <HAL_GetTick>
 8006168:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	88fa      	ldrh	r2, [r7, #6]
 800616e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	88fa      	ldrh	r2, [r7, #6]
 8006176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006182:	d108      	bne.n	8006196 <HAL_UART_Transmit+0x7e>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800618c:	2300      	movs	r3, #0
 800618e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	e003      	b.n	800619e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800619e:	e02d      	b.n	80061fc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2200      	movs	r2, #0
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fd45 	bl	8006c3a <UART_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e03d      	b.n	8006236 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	881a      	ldrh	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061cc:	b292      	uxth	r2, r2
 80061ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	3302      	adds	r3, #2
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e008      	b.n	80061ea <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	781a      	ldrb	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	b292      	uxth	r2, r2
 80061e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3301      	adds	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1cb      	bne.n	80061a0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2200      	movs	r2, #0
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fd11 	bl	8006c3a <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e009      	b.n	8006236 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006252:	2b20      	cmp	r3, #32
 8006254:	f040 808a 	bne.w	800636c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_UART_Receive_IT+0x24>
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e082      	b.n	800636e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_UART_Receive_IT+0x36>
 8006272:	2302      	movs	r3, #2
 8006274:	e07b      	b.n	800636e <HAL_UART_Receive_IT+0x12e>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a2:	d10e      	bne.n	80062c2 <HAL_UART_Receive_IT+0x82>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d105      	bne.n	80062b8 <HAL_UART_Receive_IT+0x78>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062b6:	e02d      	b.n	8006314 <HAL_UART_Receive_IT+0xd4>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	22ff      	movs	r2, #255	; 0xff
 80062bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062c0:	e028      	b.n	8006314 <HAL_UART_Receive_IT+0xd4>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10d      	bne.n	80062e6 <HAL_UART_Receive_IT+0xa6>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <HAL_UART_Receive_IT+0x9c>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	22ff      	movs	r2, #255	; 0xff
 80062d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062da:	e01b      	b.n	8006314 <HAL_UART_Receive_IT+0xd4>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	227f      	movs	r2, #127	; 0x7f
 80062e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062e4:	e016      	b.n	8006314 <HAL_UART_Receive_IT+0xd4>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ee:	d10d      	bne.n	800630c <HAL_UART_Receive_IT+0xcc>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <HAL_UART_Receive_IT+0xc2>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	227f      	movs	r2, #127	; 0x7f
 80062fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006300:	e008      	b.n	8006314 <HAL_UART_Receive_IT+0xd4>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	223f      	movs	r2, #63	; 0x3f
 8006306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800630a:	e003      	b.n	8006314 <HAL_UART_Receive_IT+0xd4>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2222      	movs	r2, #34	; 0x22
 800631e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006338:	d107      	bne.n	800634a <HAL_UART_Receive_IT+0x10a>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d103      	bne.n	800634a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a0d      	ldr	r2, [pc, #52]	; (800637c <HAL_UART_Receive_IT+0x13c>)
 8006346:	661a      	str	r2, [r3, #96]	; 0x60
 8006348:	e002      	b.n	8006350 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a0c      	ldr	r2, [pc, #48]	; (8006380 <HAL_UART_Receive_IT+0x140>)
 800634e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006366:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	e000      	b.n	800636e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800636c:	2302      	movs	r3, #2
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	08006e75 	.word	0x08006e75
 8006380:	08006dcf 	.word	0x08006dcf

08006384 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80063aa:	4013      	ands	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d113      	bne.n	80063dc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00e      	beq.n	80063dc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8114 	beq.w	80065fa <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
      }
      return;
 80063da:	e10e      	b.n	80065fa <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80d6 	beq.w	8006590 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80cb 	beq.w	8006590 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00e      	beq.n	8006422 <HAL_UART_IRQHandler+0x9e>
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2201      	movs	r2, #1
 8006414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641a:	f043 0201 	orr.w	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00e      	beq.n	800644a <HAL_UART_IRQHandler+0xc6>
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2202      	movs	r2, #2
 800643c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006442:	f043 0204 	orr.w	r2, r3, #4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00e      	beq.n	8006472 <HAL_UART_IRQHandler+0xee>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2204      	movs	r2, #4
 8006464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646a:	f043 0202 	orr.w	r2, r3, #2
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d013      	beq.n	80064a4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649c:	f043 0208 	orr.w	r2, r3, #8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00f      	beq.n	80064ce <HAL_UART_IRQHandler+0x14a>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	f043 0220 	orr.w	r2, r3, #32
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8093 	beq.w	80065fe <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00c      	beq.n	80064fc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006500:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	d004      	beq.n	800651a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006516:	2b00      	cmp	r3, #0
 8006518:	d031      	beq.n	800657e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fc08 	bl	8006d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d123      	bne.n	8006576 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800653c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d013      	beq.n	800656e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654a:	4a30      	ldr	r2, [pc, #192]	; (800660c <HAL_UART_IRQHandler+0x288>)
 800654c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006552:	4618      	mov	r0, r3
 8006554:	f7fc ff12 	bl	800337c <HAL_DMA_Abort_IT>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d016      	beq.n	800658c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006568:	4610      	mov	r0, r2
 800656a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	e00e      	b.n	800658c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f858 	bl	8006624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	e00a      	b.n	800658c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f854 	bl	8006624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	e006      	b.n	800658c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f850 	bl	8006624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800658a:	e038      	b.n	80065fe <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	bf00      	nop
    return;
 800658e:	e036      	b.n	80065fe <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00d      	beq.n	80065b6 <HAL_UART_IRQHandler+0x232>
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fcb3 	bl	8006f1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065b4:	e026      	b.n	8006604 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00d      	beq.n	80065dc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d017      	beq.n	8006602 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	4798      	blx	r3
    }
    return;
 80065da:	e012      	b.n	8006602 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00e      	beq.n	8006604 <HAL_UART_IRQHandler+0x280>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fbd3 	bl	8006d9c <UART_EndTransmit_IT>
    return;
 80065f6:	bf00      	nop
 80065f8:	e004      	b.n	8006604 <HAL_UART_IRQHandler+0x280>
      return;
 80065fa:	bf00      	nop
 80065fc:	e002      	b.n	8006604 <HAL_UART_IRQHandler+0x280>
    return;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <HAL_UART_IRQHandler+0x280>
    return;
 8006602:	bf00      	nop
  }

}
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	08006d71 	.word	0x08006d71

08006610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006640:	2300      	movs	r3, #0
 8006642:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4bac      	ldr	r3, [pc, #688]	; (8006918 <UART_SetConfig+0x2e0>)
 8006668:	4013      	ands	r3, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	6939      	ldr	r1, [r7, #16]
 8006670:	430b      	orrs	r3, r1
 8006672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a9a      	ldr	r2, [pc, #616]	; (800691c <UART_SetConfig+0x2e4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d121      	bne.n	80066fc <UART_SetConfig+0xc4>
 80066b8:	4b99      	ldr	r3, [pc, #612]	; (8006920 <UART_SetConfig+0x2e8>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d817      	bhi.n	80066f4 <UART_SetConfig+0xbc>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <UART_SetConfig+0x94>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066e9 	.word	0x080066e9
 80066d4:	080066ef 	.word	0x080066ef
 80066d8:	080066e3 	.word	0x080066e3
 80066dc:	2301      	movs	r3, #1
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e0b2      	b.n	8006848 <UART_SetConfig+0x210>
 80066e2:	2302      	movs	r3, #2
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e0af      	b.n	8006848 <UART_SetConfig+0x210>
 80066e8:	2304      	movs	r3, #4
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e0ac      	b.n	8006848 <UART_SetConfig+0x210>
 80066ee:	2308      	movs	r3, #8
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e0a9      	b.n	8006848 <UART_SetConfig+0x210>
 80066f4:	2310      	movs	r3, #16
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	bf00      	nop
 80066fa:	e0a5      	b.n	8006848 <UART_SetConfig+0x210>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a88      	ldr	r2, [pc, #544]	; (8006924 <UART_SetConfig+0x2ec>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d123      	bne.n	800674e <UART_SetConfig+0x116>
 8006706:	4b86      	ldr	r3, [pc, #536]	; (8006920 <UART_SetConfig+0x2e8>)
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006712:	d012      	beq.n	800673a <UART_SetConfig+0x102>
 8006714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006718:	d802      	bhi.n	8006720 <UART_SetConfig+0xe8>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <UART_SetConfig+0xf6>
 800671e:	e012      	b.n	8006746 <UART_SetConfig+0x10e>
 8006720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006724:	d00c      	beq.n	8006740 <UART_SetConfig+0x108>
 8006726:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800672a:	d003      	beq.n	8006734 <UART_SetConfig+0xfc>
 800672c:	e00b      	b.n	8006746 <UART_SetConfig+0x10e>
 800672e:	2300      	movs	r3, #0
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e089      	b.n	8006848 <UART_SetConfig+0x210>
 8006734:	2302      	movs	r3, #2
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e086      	b.n	8006848 <UART_SetConfig+0x210>
 800673a:	2304      	movs	r3, #4
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e083      	b.n	8006848 <UART_SetConfig+0x210>
 8006740:	2308      	movs	r3, #8
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e080      	b.n	8006848 <UART_SetConfig+0x210>
 8006746:	2310      	movs	r3, #16
 8006748:	77fb      	strb	r3, [r7, #31]
 800674a:	bf00      	nop
 800674c:	e07c      	b.n	8006848 <UART_SetConfig+0x210>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a75      	ldr	r2, [pc, #468]	; (8006928 <UART_SetConfig+0x2f0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d123      	bne.n	80067a0 <UART_SetConfig+0x168>
 8006758:	4b71      	ldr	r3, [pc, #452]	; (8006920 <UART_SetConfig+0x2e8>)
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006764:	d012      	beq.n	800678c <UART_SetConfig+0x154>
 8006766:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800676a:	d802      	bhi.n	8006772 <UART_SetConfig+0x13a>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <UART_SetConfig+0x148>
 8006770:	e012      	b.n	8006798 <UART_SetConfig+0x160>
 8006772:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006776:	d00c      	beq.n	8006792 <UART_SetConfig+0x15a>
 8006778:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800677c:	d003      	beq.n	8006786 <UART_SetConfig+0x14e>
 800677e:	e00b      	b.n	8006798 <UART_SetConfig+0x160>
 8006780:	2300      	movs	r3, #0
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e060      	b.n	8006848 <UART_SetConfig+0x210>
 8006786:	2302      	movs	r3, #2
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e05d      	b.n	8006848 <UART_SetConfig+0x210>
 800678c:	2304      	movs	r3, #4
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e05a      	b.n	8006848 <UART_SetConfig+0x210>
 8006792:	2308      	movs	r3, #8
 8006794:	77fb      	strb	r3, [r7, #31]
 8006796:	e057      	b.n	8006848 <UART_SetConfig+0x210>
 8006798:	2310      	movs	r3, #16
 800679a:	77fb      	strb	r3, [r7, #31]
 800679c:	bf00      	nop
 800679e:	e053      	b.n	8006848 <UART_SetConfig+0x210>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a61      	ldr	r2, [pc, #388]	; (800692c <UART_SetConfig+0x2f4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d123      	bne.n	80067f2 <UART_SetConfig+0x1ba>
 80067aa:	4b5d      	ldr	r3, [pc, #372]	; (8006920 <UART_SetConfig+0x2e8>)
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80067b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b6:	d012      	beq.n	80067de <UART_SetConfig+0x1a6>
 80067b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067bc:	d802      	bhi.n	80067c4 <UART_SetConfig+0x18c>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <UART_SetConfig+0x19a>
 80067c2:	e012      	b.n	80067ea <UART_SetConfig+0x1b2>
 80067c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c8:	d00c      	beq.n	80067e4 <UART_SetConfig+0x1ac>
 80067ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067ce:	d003      	beq.n	80067d8 <UART_SetConfig+0x1a0>
 80067d0:	e00b      	b.n	80067ea <UART_SetConfig+0x1b2>
 80067d2:	2300      	movs	r3, #0
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e037      	b.n	8006848 <UART_SetConfig+0x210>
 80067d8:	2302      	movs	r3, #2
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e034      	b.n	8006848 <UART_SetConfig+0x210>
 80067de:	2304      	movs	r3, #4
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e031      	b.n	8006848 <UART_SetConfig+0x210>
 80067e4:	2308      	movs	r3, #8
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e02e      	b.n	8006848 <UART_SetConfig+0x210>
 80067ea:	2310      	movs	r3, #16
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	bf00      	nop
 80067f0:	e02a      	b.n	8006848 <UART_SetConfig+0x210>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a4e      	ldr	r2, [pc, #312]	; (8006930 <UART_SetConfig+0x2f8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d123      	bne.n	8006844 <UART_SetConfig+0x20c>
 80067fc:	4b48      	ldr	r3, [pc, #288]	; (8006920 <UART_SetConfig+0x2e8>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006808:	d012      	beq.n	8006830 <UART_SetConfig+0x1f8>
 800680a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800680e:	d802      	bhi.n	8006816 <UART_SetConfig+0x1de>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <UART_SetConfig+0x1ec>
 8006814:	e012      	b.n	800683c <UART_SetConfig+0x204>
 8006816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800681a:	d00c      	beq.n	8006836 <UART_SetConfig+0x1fe>
 800681c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006820:	d003      	beq.n	800682a <UART_SetConfig+0x1f2>
 8006822:	e00b      	b.n	800683c <UART_SetConfig+0x204>
 8006824:	2300      	movs	r3, #0
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e00e      	b.n	8006848 <UART_SetConfig+0x210>
 800682a:	2302      	movs	r3, #2
 800682c:	77fb      	strb	r3, [r7, #31]
 800682e:	e00b      	b.n	8006848 <UART_SetConfig+0x210>
 8006830:	2304      	movs	r3, #4
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e008      	b.n	8006848 <UART_SetConfig+0x210>
 8006836:	2308      	movs	r3, #8
 8006838:	77fb      	strb	r3, [r7, #31]
 800683a:	e005      	b.n	8006848 <UART_SetConfig+0x210>
 800683c:	2310      	movs	r3, #16
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	bf00      	nop
 8006842:	e001      	b.n	8006848 <UART_SetConfig+0x210>
 8006844:	2310      	movs	r3, #16
 8006846:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006850:	f040 8090 	bne.w	8006974 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8006854:	7ffb      	ldrb	r3, [r7, #31]
 8006856:	2b08      	cmp	r3, #8
 8006858:	d86c      	bhi.n	8006934 <UART_SetConfig+0x2fc>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0x228>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006885 	.word	0x08006885
 8006864:	080068a5 	.word	0x080068a5
 8006868:	080068c5 	.word	0x080068c5
 800686c:	08006935 	.word	0x08006935
 8006870:	080068e1 	.word	0x080068e1
 8006874:	08006935 	.word	0x08006935
 8006878:	08006935 	.word	0x08006935
 800687c:	08006935 	.word	0x08006935
 8006880:	08006901 	.word	0x08006901
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006884:	f7fe f97c 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8006888:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	005a      	lsls	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	fbb2 f3f3 	udiv	r3, r2, r3
 800689e:	b29b      	uxth	r3, r3
 80068a0:	61bb      	str	r3, [r7, #24]
        break;
 80068a2:	e04a      	b.n	800693a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a4:	f7fe f98e 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 80068a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	005a      	lsls	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	441a      	add	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80068be:	b29b      	uxth	r3, r3
 80068c0:	61bb      	str	r3, [r7, #24]
        break;
 80068c2:	e03a      	b.n	800693a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80068ce:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6852      	ldr	r2, [r2, #4]
 80068d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	61bb      	str	r3, [r7, #24]
        break;
 80068de:	e02c      	b.n	800693a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e0:	f7fe f8d8 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 80068e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	005a      	lsls	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	441a      	add	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	61bb      	str	r3, [r7, #24]
        break;
 80068fe:	e01c      	b.n	800693a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	085b      	lsrs	r3, r3, #1
 8006906:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	b29b      	uxth	r3, r3
 8006914:	61bb      	str	r3, [r7, #24]
        break;
 8006916:	e010      	b.n	800693a <UART_SetConfig+0x302>
 8006918:	efff69f3 	.word	0xefff69f3
 800691c:	40013800 	.word	0x40013800
 8006920:	40021000 	.word	0x40021000
 8006924:	40004400 	.word	0x40004400
 8006928:	40004800 	.word	0x40004800
 800692c:	40004c00 	.word	0x40004c00
 8006930:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
        break;
 8006938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b0f      	cmp	r3, #15
 800693e:	d916      	bls.n	800696e <UART_SetConfig+0x336>
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006946:	d212      	bcs.n	800696e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f023 030f 	bic.w	r3, r3, #15
 8006950:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	b29b      	uxth	r3, r3
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	b29a      	uxth	r2, r3
 800695e:	897b      	ldrh	r3, [r7, #10]
 8006960:	4313      	orrs	r3, r2
 8006962:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	897a      	ldrh	r2, [r7, #10]
 800696a:	60da      	str	r2, [r3, #12]
 800696c:	e072      	b.n	8006a54 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	75fb      	strb	r3, [r7, #23]
 8006972:	e06f      	b.n	8006a54 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8006974:	7ffb      	ldrb	r3, [r7, #31]
 8006976:	2b08      	cmp	r3, #8
 8006978:	d85b      	bhi.n	8006a32 <UART_SetConfig+0x3fa>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0x348>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069c3 	.word	0x080069c3
 8006988:	080069e1 	.word	0x080069e1
 800698c:	08006a33 	.word	0x08006a33
 8006990:	080069fd 	.word	0x080069fd
 8006994:	08006a33 	.word	0x08006a33
 8006998:	08006a33 	.word	0x08006a33
 800699c:	08006a33 	.word	0x08006a33
 80069a0:	08006a1b 	.word	0x08006a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fe f8ec 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 80069a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	085a      	lsrs	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	441a      	add	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	61bb      	str	r3, [r7, #24]
        break;
 80069c0:	e03a      	b.n	8006a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c2:	f7fe f8ff 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 80069c6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	085a      	lsrs	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	441a      	add	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	b29b      	uxth	r3, r3
 80069dc:	61bb      	str	r3, [r7, #24]
        break;
 80069de:	e02b      	b.n	8006a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80069ea:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6852      	ldr	r2, [r2, #4]
 80069f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	61bb      	str	r3, [r7, #24]
        break;
 80069fa:	e01d      	b.n	8006a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069fc:	f7fe f84a 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8006a00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	085a      	lsrs	r2, r3, #1
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	441a      	add	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	61bb      	str	r3, [r7, #24]
        break;
 8006a18:	e00e      	b.n	8006a38 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	61bb      	str	r3, [r7, #24]
        break;
 8006a30:	e002      	b.n	8006a38 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
        break;
 8006a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	d908      	bls.n	8006a50 <UART_SetConfig+0x418>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d204      	bcs.n	8006a50 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	60da      	str	r2, [r3, #12]
 8006a4e:	e001      	b.n	8006a54 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop

08006a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01a      	beq.n	8006b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b6a:	d10a      	bne.n	8006b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006bbe:	f7fa f8c5 	bl	8000d4c <HAL_GetTick>
 8006bc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d10e      	bne.n	8006bf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f82a 	bl	8006c3a <UART_WaitOnFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e020      	b.n	8006c32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d10e      	bne.n	8006c1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f814 	bl	8006c3a <UART_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e00a      	b.n	8006c32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	4613      	mov	r3, r2
 8006c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4a:	e05d      	b.n	8006d08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d059      	beq.n	8006d08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c54:	f7fa f87a 	bl	8000d4c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d302      	bcc.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d11b      	bne.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0201 	bic.w	r2, r2, #1
 8006c88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e042      	b.n	8006d28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02b      	beq.n	8006d08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cbe:	d123      	bne.n	8006d08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cc8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e00f      	b.n	8006d28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69da      	ldr	r2, [r3, #28]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	4013      	ands	r3, r2
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	bf0c      	ite	eq
 8006d18:	2301      	moveq	r3, #1
 8006d1a:	2300      	movne	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d092      	beq.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0201 	bic.w	r2, r2, #1
 8006d56:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff fc48 	bl	8006624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fc25 	bl	8006610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ddc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de2:	2b22      	cmp	r3, #34	; 0x22
 8006de4:	d13a      	bne.n	8006e5c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006dec:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dee:	89bb      	ldrh	r3, [r7, #12]
 8006df0:	b2d9      	uxtb	r1, r3
 8006df2:	89fb      	ldrh	r3, [r7, #14]
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	400a      	ands	r2, r1
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d121      	bne.n	8006e6c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e36:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f002 f873 	bl	8008f40 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e5a:	e007      	b.n	8006e6c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0208 	orr.w	r2, r2, #8
 8006e6a:	619a      	str	r2, [r3, #24]
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e82:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e88:	2b22      	cmp	r3, #34	; 0x22
 8006e8a:	d13a      	bne.n	8006f02 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e92:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e9a:	89ba      	ldrh	r2, [r7, #12]
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eaa:	1c9a      	adds	r2, r3, #2
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d121      	bne.n	8006f12 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006edc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f002 f820 	bl	8008f40 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f00:	e007      	b.n	8006f12 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0208 	orr.w	r2, r2, #8
 8006f10:	619a      	str	r2, [r3, #24]
}
 8006f12:	bf00      	nop
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006f36:	f107 031c 	add.w	r3, r7, #28
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	605a      	str	r2, [r3, #4]
 8006f40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006f42:	1d3b      	adds	r3, r7, #4
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	609a      	str	r2, [r3, #8]
 8006f4c:	60da      	str	r2, [r3, #12]
 8006f4e:	611a      	str	r2, [r3, #16]
 8006f50:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006f52:	4b31      	ldr	r3, [pc, #196]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006f5a:	4b2f      	ldr	r3, [pc, #188]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006f60:	4b2d      	ldr	r3, [pc, #180]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006f66:	4b2c      	ldr	r3, [pc, #176]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006f6c:	4b2a      	ldr	r3, [pc, #168]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006f72:	4b29      	ldr	r3, [pc, #164]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8006f7a:	4b27      	ldr	r3, [pc, #156]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8006f82:	4b25      	ldr	r3, [pc, #148]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f84:	f44f 7260 	mov.w	r2, #896	; 0x380
 8006f88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006f8a:	4b23      	ldr	r3, [pc, #140]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006f90:	4b21      	ldr	r3, [pc, #132]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f92:	2201      	movs	r2, #1
 8006f94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006f96:	4b20      	ldr	r3, [pc, #128]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006f9e:	4b1e      	ldr	r3, [pc, #120]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006fa4:	4b1c      	ldr	r3, [pc, #112]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006fb0:	4819      	ldr	r0, [pc, #100]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006fb2:	f7f9 ff0d 	bl	8000dd0 <HAL_ADC_Init>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006fbc:	f002 fbcc 	bl	8009758 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT_ALTERTRIG;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8006fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc8:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006fce:	f107 031c 	add.w	r3, r7, #28
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4810      	ldr	r0, [pc, #64]	; (8007018 <MX_ADC1_Init+0xe8>)
 8006fd6:	f7fb fa99 	bl	800250c <HAL_ADCEx_MultiModeConfigChannel>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006fe0:	f002 fbba 	bl	8009758 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006fe4:	2306      	movs	r3, #6
 8006fe6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006fec:	2300      	movs	r3, #0
 8006fee:	613b      	str	r3, [r7, #16]
 // sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8006ff0:	2307      	movs	r3, #7
 8006ff2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006ffc:	1d3b      	adds	r3, r7, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	4805      	ldr	r0, [pc, #20]	; (8007018 <MX_ADC1_Init+0xe8>)
 8007002:	f7fa ff97 	bl	8001f34 <HAL_ADC_ConfigChannel>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800700c:	f002 fba4 	bl	8009758 <Error_Handler>
  }

}
 8007010:	bf00      	nop
 8007012:	3728      	adds	r7, #40	; 0x28
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	200002d8 	.word	0x200002d8

0800701c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007022:	463b      	mov	r3, r7
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	609a      	str	r2, [r3, #8]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	611a      	str	r2, [r3, #16]
 8007030:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <MX_ADC2_Init+0xa8>)
 8007034:	4a24      	ldr	r2, [pc, #144]	; (80070c8 <MX_ADC2_Init+0xac>)
 8007036:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007038:	4b22      	ldr	r3, [pc, #136]	; (80070c4 <MX_ADC2_Init+0xa8>)
 800703a:	2200      	movs	r2, #0
 800703c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800703e:	4b21      	ldr	r3, [pc, #132]	; (80070c4 <MX_ADC2_Init+0xa8>)
 8007040:	2200      	movs	r2, #0
 8007042:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007044:	4b1f      	ldr	r3, [pc, #124]	; (80070c4 <MX_ADC2_Init+0xa8>)
 8007046:	2200      	movs	r2, #0
 8007048:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800704a:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <MX_ADC2_Init+0xa8>)
 800704c:	2200      	movs	r2, #0
 800704e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007050:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <MX_ADC2_Init+0xa8>)
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007058:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <MX_ADC2_Init+0xa8>)
 800705a:	2200      	movs	r2, #0
 800705c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800705e:	4b19      	ldr	r3, [pc, #100]	; (80070c4 <MX_ADC2_Init+0xa8>)
 8007060:	2201      	movs	r2, #1
 8007062:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007064:	4b17      	ldr	r3, [pc, #92]	; (80070c4 <MX_ADC2_Init+0xa8>)
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800706c:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <MX_ADC2_Init+0xa8>)
 800706e:	2208      	movs	r2, #8
 8007070:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <MX_ADC2_Init+0xa8>)
 8007074:	2200      	movs	r2, #0
 8007076:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007078:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <MX_ADC2_Init+0xa8>)
 800707a:	2200      	movs	r2, #0
 800707c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800707e:	4811      	ldr	r0, [pc, #68]	; (80070c4 <MX_ADC2_Init+0xa8>)
 8007080:	f7f9 fea6 	bl	8000dd0 <HAL_ADC_Init>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800708a:	f002 fb65 	bl	8009758 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800708e:	2307      	movs	r3, #7
 8007090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007092:	2301      	movs	r3, #1
 8007094:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
  //sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800709a:	2307      	movs	r3, #7
 800709c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800709e:	2300      	movs	r3, #0
 80070a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80070a6:	463b      	mov	r3, r7
 80070a8:	4619      	mov	r1, r3
 80070aa:	4806      	ldr	r0, [pc, #24]	; (80070c4 <MX_ADC2_Init+0xa8>)
 80070ac:	f7fa ff42 	bl	8001f34 <HAL_ADC_ConfigChannel>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 80070b6:	f002 fb4f 	bl	8009758 <Error_Handler>
  }

}
 80070ba:	bf00      	nop
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000288 	.word	0x20000288
 80070c8:	50000100 	.word	0x50000100

080070cc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08c      	sub	sp, #48	; 0x30
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d4:	f107 031c 	add.w	r3, r7, #28
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	609a      	str	r2, [r3, #8]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ec:	d15e      	bne.n	80071ac <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80070ee:	4b4e      	ldr	r3, [pc, #312]	; (8007228 <HAL_ADC_MspInit+0x15c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3301      	adds	r3, #1
 80070f4:	4a4c      	ldr	r2, [pc, #304]	; (8007228 <HAL_ADC_MspInit+0x15c>)
 80070f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80070f8:	4b4b      	ldr	r3, [pc, #300]	; (8007228 <HAL_ADC_MspInit+0x15c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d10b      	bne.n	8007118 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8007100:	4b4a      	ldr	r3, [pc, #296]	; (800722c <HAL_ADC_MspInit+0x160>)
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	4a49      	ldr	r2, [pc, #292]	; (800722c <HAL_ADC_MspInit+0x160>)
 8007106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800710a:	6153      	str	r3, [r2, #20]
 800710c:	4b47      	ldr	r3, [pc, #284]	; (800722c <HAL_ADC_MspInit+0x160>)
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007118:	4b44      	ldr	r3, [pc, #272]	; (800722c <HAL_ADC_MspInit+0x160>)
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	4a43      	ldr	r2, [pc, #268]	; (800722c <HAL_ADC_MspInit+0x160>)
 800711e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007122:	6153      	str	r3, [r2, #20]
 8007124:	4b41      	ldr	r3, [pc, #260]	; (800722c <HAL_ADC_MspInit+0x160>)
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007130:	2301      	movs	r3, #1
 8007132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007134:	2303      	movs	r3, #3
 8007136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007138:	2300      	movs	r3, #0
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800713c:	f107 031c 	add.w	r3, r7, #28
 8007140:	4619      	mov	r1, r3
 8007142:	483b      	ldr	r0, [pc, #236]	; (8007230 <HAL_ADC_MspInit+0x164>)
 8007144:	f7fc fa66 	bl	8003614 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007148:	4b3a      	ldr	r3, [pc, #232]	; (8007234 <HAL_ADC_MspInit+0x168>)
 800714a:	4a3b      	ldr	r2, [pc, #236]	; (8007238 <HAL_ADC_MspInit+0x16c>)
 800714c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800714e:	4b39      	ldr	r3, [pc, #228]	; (8007234 <HAL_ADC_MspInit+0x168>)
 8007150:	2200      	movs	r2, #0
 8007152:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007154:	4b37      	ldr	r3, [pc, #220]	; (8007234 <HAL_ADC_MspInit+0x168>)
 8007156:	2200      	movs	r2, #0
 8007158:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800715a:	4b36      	ldr	r3, [pc, #216]	; (8007234 <HAL_ADC_MspInit+0x168>)
 800715c:	2280      	movs	r2, #128	; 0x80
 800715e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007160:	4b34      	ldr	r3, [pc, #208]	; (8007234 <HAL_ADC_MspInit+0x168>)
 8007162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007166:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007168:	4b32      	ldr	r3, [pc, #200]	; (8007234 <HAL_ADC_MspInit+0x168>)
 800716a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800716e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007170:	4b30      	ldr	r3, [pc, #192]	; (8007234 <HAL_ADC_MspInit+0x168>)
 8007172:	2220      	movs	r2, #32
 8007174:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8007176:	4b2f      	ldr	r3, [pc, #188]	; (8007234 <HAL_ADC_MspInit+0x168>)
 8007178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800717c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800717e:	482d      	ldr	r0, [pc, #180]	; (8007234 <HAL_ADC_MspInit+0x168>)
 8007180:	f7fc f81d 	bl	80031be <HAL_DMA_Init>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800718a:	f002 fae5 	bl	8009758 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a28      	ldr	r2, [pc, #160]	; (8007234 <HAL_ADC_MspInit+0x168>)
 8007192:	639a      	str	r2, [r3, #56]	; 0x38
 8007194:	4a27      	ldr	r2, [pc, #156]	; (8007234 <HAL_ADC_MspInit+0x168>)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6253      	str	r3, [r2, #36]	; 0x24


    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800719a:	2200      	movs	r2, #0
 800719c:	2102      	movs	r1, #2
 800719e:	2012      	movs	r0, #18
 80071a0:	f7fb fd53 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80071a4:	2012      	movs	r0, #18
 80071a6:	f7fb fd6c 	bl	8002c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80071aa:	e039      	b.n	8007220 <HAL_ADC_MspInit+0x154>
  else if(adcHandle->Instance==ADC2)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a22      	ldr	r2, [pc, #136]	; (800723c <HAL_ADC_MspInit+0x170>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d134      	bne.n	8007220 <HAL_ADC_MspInit+0x154>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80071b6:	4b1c      	ldr	r3, [pc, #112]	; (8007228 <HAL_ADC_MspInit+0x15c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3301      	adds	r3, #1
 80071bc:	4a1a      	ldr	r2, [pc, #104]	; (8007228 <HAL_ADC_MspInit+0x15c>)
 80071be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80071c0:	4b19      	ldr	r3, [pc, #100]	; (8007228 <HAL_ADC_MspInit+0x15c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d10b      	bne.n	80071e0 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80071c8:	4b18      	ldr	r3, [pc, #96]	; (800722c <HAL_ADC_MspInit+0x160>)
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	4a17      	ldr	r2, [pc, #92]	; (800722c <HAL_ADC_MspInit+0x160>)
 80071ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d2:	6153      	str	r3, [r2, #20]
 80071d4:	4b15      	ldr	r3, [pc, #84]	; (800722c <HAL_ADC_MspInit+0x160>)
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071e0:	4b12      	ldr	r3, [pc, #72]	; (800722c <HAL_ADC_MspInit+0x160>)
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	4a11      	ldr	r2, [pc, #68]	; (800722c <HAL_ADC_MspInit+0x160>)
 80071e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071ea:	6153      	str	r3, [r2, #20]
 80071ec:	4b0f      	ldr	r3, [pc, #60]	; (800722c <HAL_ADC_MspInit+0x160>)
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80071f8:	2302      	movs	r3, #2
 80071fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071fc:	2303      	movs	r3, #3
 80071fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007200:	2300      	movs	r3, #0
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007204:	f107 031c 	add.w	r3, r7, #28
 8007208:	4619      	mov	r1, r3
 800720a:	4809      	ldr	r0, [pc, #36]	; (8007230 <HAL_ADC_MspInit+0x164>)
 800720c:	f7fc fa02 	bl	8003614 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8007210:	2200      	movs	r2, #0
 8007212:	2102      	movs	r1, #2
 8007214:	2012      	movs	r0, #18
 8007216:	f7fb fd18 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800721a:	2012      	movs	r0, #18
 800721c:	f7fb fd31 	bl	8002c82 <HAL_NVIC_EnableIRQ>
}
 8007220:	bf00      	nop
 8007222:	3730      	adds	r7, #48	; 0x30
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000234 	.word	0x20000234
 800722c:	40021000 	.word	0x40021000
 8007230:	48000800 	.word	0x48000800
 8007234:	20000328 	.word	0x20000328
 8007238:	40020008 	.word	0x40020008
 800723c:	50000100 	.word	0x50000100

08007240 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8007246:	1d3b      	adds	r3, r7, #4
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	609a      	str	r2, [r3, #8]

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8007250:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <MX_DAC1_Init+0x68>)
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <MX_DAC1_Init+0x6c>)
 8007254:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007256:	4814      	ldr	r0, [pc, #80]	; (80072a8 <MX_DAC1_Init+0x68>)
 8007258:	f7fb fd2d 	bl	8002cb6 <HAL_DAC_Init>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8007262:	f002 fa79 	bl	8009758 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8007266:	2304      	movs	r3, #4
 8007268:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800726a:	2300      	movs	r3, #0
 800726c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800726e:	1d3b      	adds	r3, r7, #4
 8007270:	2200      	movs	r2, #0
 8007272:	4619      	mov	r1, r3
 8007274:	480c      	ldr	r0, [pc, #48]	; (80072a8 <MX_DAC1_Init+0x68>)
 8007276:	f7fb fec1 	bl	8002ffc <HAL_DAC_ConfigChannel>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8007280:	f002 fa6a 	bl	8009758 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8007284:	2314      	movs	r3, #20
 8007286:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007288:	1d3b      	adds	r3, r7, #4
 800728a:	2210      	movs	r2, #16
 800728c:	4619      	mov	r1, r3
 800728e:	4806      	ldr	r0, [pc, #24]	; (80072a8 <MX_DAC1_Init+0x68>)
 8007290:	f7fb feb4 	bl	8002ffc <HAL_DAC_ConfigChannel>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 800729a:	f002 fa5d 	bl	8009758 <Error_Handler>
  }

}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200003b0 	.word	0x200003b0
 80072ac:	40007400 	.word	0x40007400

080072b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	60da      	str	r2, [r3, #12]
 80072c6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a49      	ldr	r2, [pc, #292]	; (80073f4 <HAL_DAC_MspInit+0x144>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	f040 808b 	bne.w	80073ea <HAL_DAC_MspInit+0x13a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80072d4:	4b48      	ldr	r3, [pc, #288]	; (80073f8 <HAL_DAC_MspInit+0x148>)
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	4a47      	ldr	r2, [pc, #284]	; (80073f8 <HAL_DAC_MspInit+0x148>)
 80072da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072de:	61d3      	str	r3, [r2, #28]
 80072e0:	4b45      	ldr	r3, [pc, #276]	; (80073f8 <HAL_DAC_MspInit+0x148>)
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e8:	613b      	str	r3, [r7, #16]
 80072ea:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ec:	4b42      	ldr	r3, [pc, #264]	; (80073f8 <HAL_DAC_MspInit+0x148>)
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	4a41      	ldr	r2, [pc, #260]	; (80073f8 <HAL_DAC_MspInit+0x148>)
 80072f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f6:	6153      	str	r3, [r2, #20]
 80072f8:	4b3f      	ldr	r3, [pc, #252]	; (80073f8 <HAL_DAC_MspInit+0x148>)
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = G1_Pin|G2_Pin;
 8007304:	2330      	movs	r3, #48	; 0x30
 8007306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007308:	2303      	movs	r3, #3
 800730a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730c:	2300      	movs	r3, #0
 800730e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007310:	f107 0314 	add.w	r3, r7, #20
 8007314:	4619      	mov	r1, r3
 8007316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800731a:	f7fc f97b 	bl	8003614 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800731e:	4b37      	ldr	r3, [pc, #220]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007320:	4a37      	ldr	r2, [pc, #220]	; (8007400 <HAL_DAC_MspInit+0x150>)
 8007322:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007324:	4b35      	ldr	r3, [pc, #212]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007326:	2210      	movs	r2, #16
 8007328:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800732a:	4b34      	ldr	r3, [pc, #208]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 800732c:	2200      	movs	r2, #0
 800732e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007330:	4b32      	ldr	r3, [pc, #200]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007332:	2280      	movs	r2, #128	; 0x80
 8007334:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007336:	4b31      	ldr	r3, [pc, #196]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800733c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800733e:	4b2f      	ldr	r3, [pc, #188]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007344:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007346:	4b2d      	ldr	r3, [pc, #180]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007348:	2220      	movs	r2, #32
 800734a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800734c:	4b2b      	ldr	r3, [pc, #172]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 800734e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007352:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007354:	4829      	ldr	r0, [pc, #164]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007356:	f7fb ff32 	bl	80031be <HAL_DMA_Init>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8007360:	f002 f9fa 	bl	8009758 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8007364:	4b27      	ldr	r3, [pc, #156]	; (8007404 <HAL_DAC_MspInit+0x154>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a26      	ldr	r2, [pc, #152]	; (8007404 <HAL_DAC_MspInit+0x154>)
 800736a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800736e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a22      	ldr	r2, [pc, #136]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007374:	609a      	str	r2, [r3, #8]
 8007376:	4a21      	ldr	r2, [pc, #132]	; (80073fc <HAL_DAC_MspInit+0x14c>)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 800737c:	4b22      	ldr	r3, [pc, #136]	; (8007408 <HAL_DAC_MspInit+0x158>)
 800737e:	4a23      	ldr	r2, [pc, #140]	; (800740c <HAL_DAC_MspInit+0x15c>)
 8007380:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007382:	4b21      	ldr	r3, [pc, #132]	; (8007408 <HAL_DAC_MspInit+0x158>)
 8007384:	2210      	movs	r2, #16
 8007386:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007388:	4b1f      	ldr	r3, [pc, #124]	; (8007408 <HAL_DAC_MspInit+0x158>)
 800738a:	2200      	movs	r2, #0
 800738c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800738e:	4b1e      	ldr	r3, [pc, #120]	; (8007408 <HAL_DAC_MspInit+0x158>)
 8007390:	2280      	movs	r2, #128	; 0x80
 8007392:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007394:	4b1c      	ldr	r3, [pc, #112]	; (8007408 <HAL_DAC_MspInit+0x158>)
 8007396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800739a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800739c:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <HAL_DAC_MspInit+0x158>)
 800739e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073a2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80073a4:	4b18      	ldr	r3, [pc, #96]	; (8007408 <HAL_DAC_MspInit+0x158>)
 80073a6:	2220      	movs	r2, #32
 80073a8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80073aa:	4b17      	ldr	r3, [pc, #92]	; (8007408 <HAL_DAC_MspInit+0x158>)
 80073ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80073b2:	4815      	ldr	r0, [pc, #84]	; (8007408 <HAL_DAC_MspInit+0x158>)
 80073b4:	f7fb ff03 	bl	80031be <HAL_DMA_Init>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 80073be:	f002 f9cb 	bl	8009758 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <HAL_DAC_MspInit+0x154>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a0f      	ldr	r2, [pc, #60]	; (8007404 <HAL_DAC_MspInit+0x154>)
 80073c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073cc:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a0d      	ldr	r2, [pc, #52]	; (8007408 <HAL_DAC_MspInit+0x158>)
 80073d2:	60da      	str	r2, [r3, #12]
 80073d4:	4a0c      	ldr	r2, [pc, #48]	; (8007408 <HAL_DAC_MspInit+0x158>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	2036      	movs	r0, #54	; 0x36
 80073e0:	f7fb fc33 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80073e4:	2036      	movs	r0, #54	; 0x36
 80073e6:	f7fb fc4c 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80073ea:	bf00      	nop
 80073ec:	3728      	adds	r7, #40	; 0x28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40007400 	.word	0x40007400
 80073f8:	40021000 	.word	0x40021000
 80073fc:	200003c4 	.word	0x200003c4
 8007400:	40020030 	.word	0x40020030
 8007404:	40010000 	.word	0x40010000
 8007408:	2000036c 	.word	0x2000036c
 800740c:	40020044 	.word	0x40020044

08007410 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <MX_DMA_Init+0x58>)
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	4a13      	ldr	r2, [pc, #76]	; (8007468 <MX_DMA_Init+0x58>)
 800741c:	f043 0301 	orr.w	r3, r3, #1
 8007420:	6153      	str	r3, [r2, #20]
 8007422:	4b11      	ldr	r3, [pc, #68]	; (8007468 <MX_DMA_Init+0x58>)
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800742e:	2200      	movs	r2, #0
 8007430:	2101      	movs	r1, #1
 8007432:	200b      	movs	r0, #11
 8007434:	f7fb fc09 	bl	8002c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007438:	200b      	movs	r0, #11
 800743a:	f7fb fc22 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 800743e:	2200      	movs	r2, #0
 8007440:	2102      	movs	r1, #2
 8007442:	200d      	movs	r0, #13
 8007444:	f7fb fc01 	bl	8002c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007448:	200d      	movs	r0, #13
 800744a:	f7fb fc1a 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 800744e:	2200      	movs	r2, #0
 8007450:	2103      	movs	r1, #3
 8007452:	200e      	movs	r0, #14
 8007454:	f7fb fbf9 	bl	8002c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007458:	200e      	movs	r0, #14
 800745a:	f7fb fc12 	bl	8002c82 <HAL_NVIC_EnableIRQ>

}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	40021000 	.word	0x40021000

0800746c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	; 0x28
 8007470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007472:	f107 0314 	add.w	r3, r7, #20
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	605a      	str	r2, [r3, #4]
 800747c:	609a      	str	r2, [r3, #8]
 800747e:	60da      	str	r2, [r3, #12]
 8007480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007482:	4b44      	ldr	r3, [pc, #272]	; (8007594 <MX_GPIO_Init+0x128>)
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	4a43      	ldr	r2, [pc, #268]	; (8007594 <MX_GPIO_Init+0x128>)
 8007488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800748c:	6153      	str	r3, [r2, #20]
 800748e:	4b41      	ldr	r3, [pc, #260]	; (8007594 <MX_GPIO_Init+0x128>)
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800749a:	4b3e      	ldr	r3, [pc, #248]	; (8007594 <MX_GPIO_Init+0x128>)
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	4a3d      	ldr	r2, [pc, #244]	; (8007594 <MX_GPIO_Init+0x128>)
 80074a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074a4:	6153      	str	r3, [r2, #20]
 80074a6:	4b3b      	ldr	r3, [pc, #236]	; (8007594 <MX_GPIO_Init+0x128>)
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b2:	4b38      	ldr	r3, [pc, #224]	; (8007594 <MX_GPIO_Init+0x128>)
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	4a37      	ldr	r2, [pc, #220]	; (8007594 <MX_GPIO_Init+0x128>)
 80074b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074bc:	6153      	str	r3, [r2, #20]
 80074be:	4b35      	ldr	r3, [pc, #212]	; (8007594 <MX_GPIO_Init+0x128>)
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c6:	60bb      	str	r3, [r7, #8]
 80074c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ca:	4b32      	ldr	r3, [pc, #200]	; (8007594 <MX_GPIO_Init+0x128>)
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	4a31      	ldr	r2, [pc, #196]	; (8007594 <MX_GPIO_Init+0x128>)
 80074d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074d4:	6153      	str	r3, [r2, #20]
 80074d6:	4b2f      	ldr	r3, [pc, #188]	; (8007594 <MX_GPIO_Init+0x128>)
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074e2:	4b2c      	ldr	r3, [pc, #176]	; (8007594 <MX_GPIO_Init+0x128>)
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	4a2b      	ldr	r2, [pc, #172]	; (8007594 <MX_GPIO_Init+0x128>)
 80074e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ec:	6153      	str	r3, [r2, #20]
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <MX_GPIO_Init+0x128>)
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80074fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007500:	4b25      	ldr	r3, [pc, #148]	; (8007598 <MX_GPIO_Init+0x12c>)
 8007502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007504:	2300      	movs	r3, #0
 8007506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	4619      	mov	r1, r3
 800750e:	4823      	ldr	r0, [pc, #140]	; (800759c <MX_GPIO_Init+0x130>)
 8007510:	f7fc f880 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8007514:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8007518:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800751a:	2303      	movs	r3, #3
 800751c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751e:	2300      	movs	r3, #0
 8007520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007522:	f107 0314 	add.w	r3, r7, #20
 8007526:	4619      	mov	r1, r3
 8007528:	481c      	ldr	r0, [pc, #112]	; (800759c <MX_GPIO_Init+0x130>)
 800752a:	f7fc f873 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7 
 800752e:	f649 73c3 	movw	r3, #40899	; 0x9fc3
 8007532:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007534:	2303      	movs	r3, #3
 8007536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007538:	2300      	movs	r3, #0
 800753a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800753c:	f107 0314 	add.w	r3, r7, #20
 8007540:	4619      	mov	r1, r3
 8007542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007546:	f7fc f865 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800754a:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800754e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007550:	2303      	movs	r3, #3
 8007552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007554:	2300      	movs	r3, #0
 8007556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007558:	f107 0314 	add.w	r3, r7, #20
 800755c:	4619      	mov	r1, r3
 800755e:	4810      	ldr	r0, [pc, #64]	; (80075a0 <MX_GPIO_Init+0x134>)
 8007560:	f7fc f858 	bl	8003614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007564:	2304      	movs	r3, #4
 8007566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007568:	2303      	movs	r3, #3
 800756a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007570:	f107 0314 	add.w	r3, r7, #20
 8007574:	4619      	mov	r1, r3
 8007576:	480b      	ldr	r0, [pc, #44]	; (80075a4 <MX_GPIO_Init+0x138>)
 8007578:	f7fc f84c 	bl	8003614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	2028      	movs	r0, #40	; 0x28
 8007582:	f7fb fb62 	bl	8002c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007586:	2028      	movs	r0, #40	; 0x28
 8007588:	f7fb fb7b 	bl	8002c82 <HAL_NVIC_EnableIRQ>

}
 800758c:	bf00      	nop
 800758e:	3728      	adds	r7, #40	; 0x28
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40021000 	.word	0x40021000
 8007598:	10110000 	.word	0x10110000
 800759c:	48000800 	.word	0x48000800
 80075a0:	48000400 	.word	0x48000400
 80075a4:	48000c00 	.word	0x48000c00

080075a8 <timReconfigure>:

PSARRFREQ pafa0 [LINESIZE];
PSARRFREQ pafa1 [LINESIZE];

uint8_t timReconfigure(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, uint8_t isFreqPassed) {
 80075a8:	b480      	push	{r7}
 80075aa:	b08d      	sub	sp, #52	; 0x34
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]

	int32_t clkDiv;
	uint32_t errMinRatio = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t result = 1;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t prescaler=0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t autoReloadReg;



	if (isFreqPassed == 1) {
 80075c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d108      	bne.n	80075de <timReconfigure+0x36>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	005a      	lsls	r2, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d6:	3301      	adds	r3, #1
 80075d8:	085b      	lsrs	r3, r3, #1
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075dc:	e001      	b.n	80075e2 <timReconfigure+0x3a>
	} else {
		clkDiv = samplingFreq;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (clkDiv == 0) { //error
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <timReconfigure+0x48>
		result = 1;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075ee:	e04e      	b.n	800768e <timReconfigure+0xe6>
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f6:	da09      	bge.n	800760c <timReconfigure+0x64>
		prescaler = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		autoReloadReg = clkDiv - 1;
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	847b      	strh	r3, [r7, #34]	; 0x22
		result = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800760a:	e040      	b.n	800768e <timReconfigure+0xe6>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 800760c:	f04f 33ff 	mov.w	r3, #4294967295
 8007610:	61fb      	str	r3, [r7, #28]
		uint32_t errMin = 0xFFFFFFFF;
 8007612:	f04f 33ff 	mov.w	r3, #4294967295
 8007616:	61bb      	str	r3, [r7, #24]
		uint16_t ratio = clkDiv >> 16;
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	141b      	asrs	r3, r3, #16
 800761c:	82fb      	strh	r3, [r7, #22]
		uint16_t div;

		while (errVal != 0) {
 800761e:	e023      	b.n	8007668 <timReconfigure+0xc0>
			ratio++;
 8007620:	8afb      	ldrh	r3, [r7, #22]
 8007622:	3301      	adds	r3, #1
 8007624:	82fb      	strh	r3, [r7, #22]
			div = clkDiv / ratio;
 8007626:	8afb      	ldrh	r3, [r7, #22]
 8007628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800762a:	fb92 f3f3 	sdiv	r3, r2, r3
 800762e:	82bb      	strh	r3, [r7, #20]
			errVal = clkDiv - (div * ratio);
 8007630:	8abb      	ldrh	r3, [r7, #20]
 8007632:	8afa      	ldrh	r2, [r7, #22]
 8007634:	fb02 f303 	mul.w	r3, r2, r3
 8007638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	61fb      	str	r3, [r7, #28]

			if (errVal < errMin) {
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	429a      	cmp	r2, r3
 8007644:	d203      	bcs.n	800764e <timReconfigure+0xa6>
				errMin = errVal;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	61bb      	str	r3, [r7, #24]
				errMinRatio = ratio;
 800764a:	8afb      	ldrh	r3, [r7, #22]
 800764c:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800764e:	8afb      	ldrh	r3, [r7, #22]
 8007650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007654:	4293      	cmp	r3, r2
 8007656:	d107      	bne.n	8007668 <timReconfigure+0xc0>
				div = clkDiv / errMinRatio;
 8007658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	82bb      	strh	r3, [r7, #20]
				ratio = errMinRatio;
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	82fb      	strh	r3, [r7, #22]
				break;
 8007666:	e002      	b.n	800766e <timReconfigure+0xc6>
		while (errVal != 0) {
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1d8      	bne.n	8007620 <timReconfigure+0x78>
			}
		}

		//if (ratio > div) {
			prescaler = div - 1;
 800766e:	8abb      	ldrh	r3, [r7, #20]
 8007670:	3b01      	subs	r3, #1
 8007672:	84bb      	strh	r3, [r7, #36]	; 0x24
			autoReloadReg = ratio - 1;
 8007674:	8afb      	ldrh	r3, [r7, #22]
 8007676:	3b01      	subs	r3, #1
 8007678:	847b      	strh	r3, [r7, #34]	; 0x22
		//} else {
		//	prescaler = ratio - 1;
		//	autoReloadReg = div - 1;
		//}

		if (errVal) {
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <timReconfigure+0xe0>
			result = 1;
 8007680:	2301      	movs	r3, #1
 8007682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007686:	e002      	b.n	800768e <timReconfigure+0xe6>
		} else {
			result = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	if (realFreq != 0) {
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <timReconfigure+0x104>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 8007694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007696:	3301      	adds	r3, #1
 8007698:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800769a:	3201      	adds	r2, #1
 800769c:	fb02 f303 	mul.w	r3, r2, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	601a      	str	r2, [r3, #0]
	}

	htim_base->Instance->PSC = prescaler;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076b2:	629a      	str	r2, [r3, #40]	; 0x28
	htim_base->Instance->ARR = autoReloadReg;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80076ba:	62da      	str	r2, [r3, #44]	; 0x2c

	SET_BIT(htim_base->Instance->EGR, TIM_EGR_UG);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	615a      	str	r2, [r3, #20]
	return (result);
 80076cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3734      	adds	r7, #52	; 0x34
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <timReconfigureForGenerator>:
uint8_t timReconfigureForGenerator(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	460b      	mov	r3, r1
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	72fb      	strb	r3, [r7, #11]
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 80076ea:	f7fd fa49 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 80076ee:	4603      	mov	r3, r0
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
	if(chan==0){
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <timReconfigureForGenerator+0x32>
		return (timReconfigure(&htim6,periphClock,samplingFreq,realFreq,1));
 80076fa:	2301      	movs	r3, #1
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	6979      	ldr	r1, [r7, #20]
 8007704:	480b      	ldr	r0, [pc, #44]	; (8007734 <timReconfigureForGenerator+0x58>)
 8007706:	f7ff ff4f 	bl	80075a8 <timReconfigure>
 800770a:	4603      	mov	r3, r0
 800770c:	e00d      	b.n	800772a <timReconfigureForGenerator+0x4e>
	}else if(chan==1){
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d109      	bne.n	8007728 <timReconfigureForGenerator+0x4c>
		return (timReconfigure(&htim7,periphClock,samplingFreq,realFreq,1));
 8007714:	2301      	movs	r3, #1
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	4806      	ldr	r0, [pc, #24]	; (8007738 <timReconfigureForGenerator+0x5c>)
 8007720:	f7ff ff42 	bl	80075a8 <timReconfigure>
 8007724:	4603      	mov	r3, r0
 8007726:	e000      	b.n	800772a <timReconfigureForGenerator+0x4e>
	}else{
		return (0);
 8007728:	2300      	movs	r3, #0
	}
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	2000e7ac 	.word	0x2000e7ac
 8007738:	2000e7ec 	.word	0x2000e7ec

0800773c <setFreq>:
PSARRFREQ setFreq(uint32_t samplingFreq) {
 800773c:	b580      	push	{r7, lr}
 800773e:	b08c      	sub	sp, #48	; 0x30
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
	int32_t clkDiv;
	uint32_t errMinRatio = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t prescaler=0;
 800774a:	2300      	movs	r3, #0
 800774c:	83fb      	strh	r3, [r7, #30]
	uint16_t autoReloadReg;
	PSARRFREQ pafa;
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 800774e:	f7fd fa17 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8007752:	4603      	mov	r3, r0
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	61bb      	str	r3, [r7, #24]
	clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	005a      	lsls	r2, r3, #1
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	3301      	adds	r3, #1
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	617b      	str	r3, [r7, #20]
	if (clkDiv == 0) { //error
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d04d      	beq.n	800780a <setFreq+0xce>

	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007774:	da0c      	bge.n	8007790 <setFreq+0x54>
		prescaler = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	83fb      	strh	r3, [r7, #30]
		autoReloadReg = clkDiv - 1;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	827b      	strh	r3, [r7, #18]

		pafa.autoReloadReg = autoReloadReg;
 8007782:	8a7b      	ldrh	r3, [r7, #18]
 8007784:	817b      	strh	r3, [r7, #10]
		pafa.prescaler =prescaler;
 8007786:	8bfb      	ldrh	r3, [r7, #30]
 8007788:	813b      	strh	r3, [r7, #8]
		pafa.freq =samplingFreq;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e03c      	b.n	800780a <setFreq+0xce>
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t errMin = 0xFFFFFFFF;
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
		uint16_t ratio = clkDiv >> 16;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	141b      	asrs	r3, r3, #16
 80077a0:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t div;

		while (errVal != 0) {
 80077a2:	e023      	b.n	80077ec <setFreq+0xb0>
			ratio++;
 80077a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077a6:	3301      	adds	r3, #1
 80077a8:	847b      	strh	r3, [r7, #34]	; 0x22
			div = clkDiv / ratio;
 80077aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80077b2:	843b      	strh	r3, [r7, #32]
			errVal = clkDiv - (div * ratio);
 80077b4:	8c3b      	ldrh	r3, [r7, #32]
 80077b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28

			if (errVal < errMin) {
 80077c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d203      	bcs.n	80077d2 <setFreq+0x96>
			errMin = errVal;
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
			errMinRatio = ratio;
 80077ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 80077d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077d8:	4293      	cmp	r3, r2
 80077da:	d107      	bne.n	80077ec <setFreq+0xb0>
			div = clkDiv / errMinRatio;
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e4:	843b      	strh	r3, [r7, #32]
			ratio = errMinRatio;
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	847b      	strh	r3, [r7, #34]	; 0x22
			break;
 80077ea:	e002      	b.n	80077f2 <setFreq+0xb6>
		while (errVal != 0) {
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1d8      	bne.n	80077a4 <setFreq+0x68>
			}
		}

	//	if (ratio > div) {
			prescaler = div - 1;
 80077f2:	8c3b      	ldrh	r3, [r7, #32]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	83fb      	strh	r3, [r7, #30]
			autoReloadReg = ratio - 1;
 80077f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077fa:	3b01      	subs	r3, #1
 80077fc:	827b      	strh	r3, [r7, #18]
	//	} else {
	//		prescaler = ratio - 1;
	//		autoReloadReg = div - 1;
	//	}
		pafa.autoReloadReg = autoReloadReg;
 80077fe:	8a7b      	ldrh	r3, [r7, #18]
 8007800:	817b      	strh	r3, [r7, #10]
		pafa.prescaler =prescaler;
 8007802:	8bfb      	ldrh	r3, [r7, #30]
 8007804:	813b      	strh	r3, [r7, #8]
		pafa.freq =samplingFreq;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	60fb      	str	r3, [r7, #12]
	}
	return (pafa);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	461a      	mov	r2, r3
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007816:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	3730      	adds	r7, #48	; 0x30
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <setPath>:
int setPath(uint32_t minF,uint32_t maxF,uint16_t step,uint16_t size,int channel){
 8007824:	b5b0      	push	{r4, r5, r7, lr}
 8007826:	b090      	sub	sp, #64	; 0x40
 8007828:	af00      	add	r7, sp, #0
 800782a:	6178      	str	r0, [r7, #20]
 800782c:	6139      	str	r1, [r7, #16]
 800782e:	4611      	mov	r1, r2
 8007830:	461a      	mov	r2, r3
 8007832:	460b      	mov	r3, r1
 8007834:	81fb      	strh	r3, [r7, #14]
 8007836:	4613      	mov	r3, r2
 8007838:	81bb      	strh	r3, [r7, #12]
	if(channel==0){
 800783a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 808b 	bne.w	8007958 <setPath+0x134>
		if(step==0 && size!=0){
 8007842:	89fb      	ldrh	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d14c      	bne.n	80078e2 <setPath+0xbe>
 8007848:	89bb      	ldrh	r3, [r7, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d049      	beq.n	80078e2 <setPath+0xbe>
			uint32_t freq;
			uint16_t index = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	877b      	strh	r3, [r7, #58]	; 0x3a
			freq = minF;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c
			step = (uint16_t)((maxF*1.0-minF*1.0)/(size*1.0));
 8007856:	6938      	ldr	r0, [r7, #16]
 8007858:	f7f8 fe5c 	bl	8000514 <__aeabi_ui2d>
 800785c:	4604      	mov	r4, r0
 800785e:	460d      	mov	r5, r1
 8007860:	6978      	ldr	r0, [r7, #20]
 8007862:	f7f8 fe57 	bl	8000514 <__aeabi_ui2d>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4620      	mov	r0, r4
 800786c:	4629      	mov	r1, r5
 800786e:	f7f8 fd13 	bl	8000298 <__aeabi_dsub>
 8007872:	4603      	mov	r3, r0
 8007874:	460c      	mov	r4, r1
 8007876:	4625      	mov	r5, r4
 8007878:	461c      	mov	r4, r3
 800787a:	89bb      	ldrh	r3, [r7, #12]
 800787c:	4618      	mov	r0, r3
 800787e:	f7f8 fe59 	bl	8000534 <__aeabi_i2d>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f8 ffe7 	bl	800085c <__aeabi_ddiv>
 800788e:	4603      	mov	r3, r0
 8007890:	460c      	mov	r4, r1
 8007892:	4618      	mov	r0, r3
 8007894:	4621      	mov	r1, r4
 8007896:	f7f9 f98f 	bl	8000bb8 <__aeabi_d2uiz>
 800789a:	4603      	mov	r3, r0
 800789c:	81fb      	strh	r3, [r7, #14]
			while(index<=size&& index<=LINESIZE){
 800789e:	e014      	b.n	80078ca <setPath+0xa6>
				pafa0[index] = setFreq(freq);
 80078a0:	8f7c      	ldrh	r4, [r7, #58]	; 0x3a
 80078a2:	4d73      	ldr	r5, [pc, #460]	; (8007a70 <setPath+0x24c>)
 80078a4:	463b      	mov	r3, r7
 80078a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff ff47 	bl	800773c <setFreq>
 80078ae:	00e3      	lsls	r3, r4, #3
 80078b0:	442b      	add	r3, r5
 80078b2:	463a      	mov	r2, r7
 80078b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078b8:	e883 0003 	stmia.w	r3, {r0, r1}
				freq+=step;
 80078bc:	89fb      	ldrh	r3, [r7, #14]
 80078be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078c0:	4413      	add	r3, r2
 80078c2:	63fb      	str	r3, [r7, #60]	; 0x3c
				index++;
 80078c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80078c6:	3301      	adds	r3, #1
 80078c8:	877b      	strh	r3, [r7, #58]	; 0x3a
			while(index<=size&& index<=LINESIZE){
 80078ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80078cc:	89bb      	ldrh	r3, [r7, #12]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d802      	bhi.n	80078d8 <setPath+0xb4>
 80078d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80078d4:	2b64      	cmp	r3, #100	; 0x64
 80078d6:	d9e3      	bls.n	80078a0 <setPath+0x7c>
			}
			return (--index);
 80078d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80078da:	3b01      	subs	r3, #1
 80078dc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80078de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80078e0:	e0c1      	b.n	8007a66 <setPath+0x242>
		}else if (step!=0 && size==0){
 80078e2:	89fb      	ldrh	r3, [r7, #14]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d034      	beq.n	8007952 <setPath+0x12e>
 80078e8:	89bb      	ldrh	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d131      	bne.n	8007952 <setPath+0x12e>
			uint32_t freq;
			uint16_t index = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	867b      	strh	r3, [r7, #50]	; 0x32
			freq = minF;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
			PSARRFREQ temp;
			while(freq < maxF-step && index<=LINESIZE){
 80078f6:	e01e      	b.n	8007936 <setPath+0x112>
				temp = setFreq(freq);
 80078f8:	f107 0318 	add.w	r3, r7, #24
 80078fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff ff1c 	bl	800773c <setFreq>
				pafa0[index].autoReloadReg = temp.autoReloadReg;
 8007904:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007906:	8b79      	ldrh	r1, [r7, #26]
 8007908:	4a59      	ldr	r2, [pc, #356]	; (8007a70 <setPath+0x24c>)
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4413      	add	r3, r2
 800790e:	460a      	mov	r2, r1
 8007910:	805a      	strh	r2, [r3, #2]
				pafa0[index].prescaler = temp.prescaler;
 8007912:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007914:	8b39      	ldrh	r1, [r7, #24]
 8007916:	4a56      	ldr	r2, [pc, #344]	; (8007a70 <setPath+0x24c>)
 8007918:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
				pafa0[index].freq = temp.freq;
 800791c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	4953      	ldr	r1, [pc, #332]	; (8007a70 <setPath+0x24c>)
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	440b      	add	r3, r1
 8007926:	605a      	str	r2, [r3, #4]
				freq+=step;
 8007928:	89fb      	ldrh	r3, [r7, #14]
 800792a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800792c:	4413      	add	r3, r2
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
				index++;
 8007930:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007932:	3301      	adds	r3, #1
 8007934:	867b      	strh	r3, [r7, #50]	; 0x32
			while(freq < maxF-step && index<=LINESIZE){
 8007936:	89fb      	ldrh	r3, [r7, #14]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800793e:	429a      	cmp	r2, r3
 8007940:	d202      	bcs.n	8007948 <setPath+0x124>
 8007942:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007944:	2b64      	cmp	r3, #100	; 0x64
 8007946:	d9d7      	bls.n	80078f8 <setPath+0xd4>
			}
			return (--index);
 8007948:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800794a:	3b01      	subs	r3, #1
 800794c:	867b      	strh	r3, [r7, #50]	; 0x32
 800794e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007950:	e089      	b.n	8007a66 <setPath+0x242>
		}else{
			return (-1);
 8007952:	f04f 33ff 	mov.w	r3, #4294967295
 8007956:	e086      	b.n	8007a66 <setPath+0x242>
		}
	}
	if(channel==1){
 8007958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800795a:	2b01      	cmp	r3, #1
 800795c:	f040 8081 	bne.w	8007a62 <setPath+0x23e>
		if(step==0 && size!=0){
 8007960:	89fb      	ldrh	r3, [r7, #14]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d14c      	bne.n	8007a00 <setPath+0x1dc>
 8007966:	89bb      	ldrh	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d049      	beq.n	8007a00 <setPath+0x1dc>
			uint32_t freq;
			uint16_t index = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	857b      	strh	r3, [r7, #42]	; 0x2a
			freq = minF;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c
			step = (uint16_t)((maxF*1.0-minF*1.0)/(size*1.0));
 8007974:	6938      	ldr	r0, [r7, #16]
 8007976:	f7f8 fdcd 	bl	8000514 <__aeabi_ui2d>
 800797a:	4604      	mov	r4, r0
 800797c:	460d      	mov	r5, r1
 800797e:	6978      	ldr	r0, [r7, #20]
 8007980:	f7f8 fdc8 	bl	8000514 <__aeabi_ui2d>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4620      	mov	r0, r4
 800798a:	4629      	mov	r1, r5
 800798c:	f7f8 fc84 	bl	8000298 <__aeabi_dsub>
 8007990:	4603      	mov	r3, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4625      	mov	r5, r4
 8007996:	461c      	mov	r4, r3
 8007998:	89bb      	ldrh	r3, [r7, #12]
 800799a:	4618      	mov	r0, r3
 800799c:	f7f8 fdca 	bl	8000534 <__aeabi_i2d>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	f7f8 ff58 	bl	800085c <__aeabi_ddiv>
 80079ac:	4603      	mov	r3, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	4618      	mov	r0, r3
 80079b2:	4621      	mov	r1, r4
 80079b4:	f7f9 f900 	bl	8000bb8 <__aeabi_d2uiz>
 80079b8:	4603      	mov	r3, r0
 80079ba:	81fb      	strh	r3, [r7, #14]
			while(index<=size&& index<=LINESIZE){
 80079bc:	e014      	b.n	80079e8 <setPath+0x1c4>
				pafa1[index] = setFreq(freq);
 80079be:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80079c0:	4d2c      	ldr	r5, [pc, #176]	; (8007a74 <setPath+0x250>)
 80079c2:	463b      	mov	r3, r7
 80079c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff feb8 	bl	800773c <setFreq>
 80079cc:	00e3      	lsls	r3, r4, #3
 80079ce:	442b      	add	r3, r5
 80079d0:	463a      	mov	r2, r7
 80079d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079d6:	e883 0003 	stmia.w	r3, {r0, r1}
				freq+=step;
 80079da:	89fb      	ldrh	r3, [r7, #14]
 80079dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079de:	4413      	add	r3, r2
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
				index++;
 80079e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80079e4:	3301      	adds	r3, #1
 80079e6:	857b      	strh	r3, [r7, #42]	; 0x2a
			while(index<=size&& index<=LINESIZE){
 80079e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80079ea:	89bb      	ldrh	r3, [r7, #12]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d802      	bhi.n	80079f6 <setPath+0x1d2>
 80079f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80079f2:	2b64      	cmp	r3, #100	; 0x64
 80079f4:	d9e3      	bls.n	80079be <setPath+0x19a>
			}
			return (--index);
 80079f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80079f8:	3b01      	subs	r3, #1
 80079fa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80079fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80079fe:	e032      	b.n	8007a66 <setPath+0x242>
		}else if (step!=0 && size==0){
 8007a00:	89fb      	ldrh	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d02a      	beq.n	8007a5c <setPath+0x238>
 8007a06:	89bb      	ldrh	r3, [r7, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d127      	bne.n	8007a5c <setPath+0x238>
			uint32_t freq;
			uint16_t index = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	847b      	strh	r3, [r7, #34]	; 0x22
			freq = minF;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
			while(freq < maxF-step && index<=LINESIZE){
 8007a14:	e014      	b.n	8007a40 <setPath+0x21c>
				pafa1[index] = setFreq(freq);
 8007a16:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8007a18:	4d16      	ldr	r5, [pc, #88]	; (8007a74 <setPath+0x250>)
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff fe8c 	bl	800773c <setFreq>
 8007a24:	00e3      	lsls	r3, r4, #3
 8007a26:	442b      	add	r3, r5
 8007a28:	463a      	mov	r2, r7
 8007a2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a2e:	e883 0003 	stmia.w	r3, {r0, r1}
				freq+=step;
 8007a32:	89fb      	ldrh	r3, [r7, #14]
 8007a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a36:	4413      	add	r3, r2
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
				index++;
 8007a3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	847b      	strh	r3, [r7, #34]	; 0x22
			while(freq < maxF-step && index<=LINESIZE){
 8007a40:	89fb      	ldrh	r3, [r7, #14]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d202      	bcs.n	8007a52 <setPath+0x22e>
 8007a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a4e:	2b64      	cmp	r3, #100	; 0x64
 8007a50:	d9e1      	bls.n	8007a16 <setPath+0x1f2>
			}
			return (--index);
 8007a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a54:	3b01      	subs	r3, #1
 8007a56:	847b      	strh	r3, [r7, #34]	; 0x22
 8007a58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a5a:	e004      	b.n	8007a66 <setPath+0x242>
		}else{
			return (-1);
 8007a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a60:	e001      	b.n	8007a66 <setPath+0x242>
		}
	}
	return (-1);
 8007a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3740      	adds	r7, #64	; 0x40
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	2000040c 	.word	0x2000040c
 8007a74:	20004750 	.word	0x20004750

08007a78 <buffersInit>:
void buffersInit(const  uint16_t * buf,uint16_t size,double scale,uint16_t offset){
 8007a78:	b590      	push	{r4, r7, lr}
 8007a7a:	b08b      	sub	sp, #44	; 0x2c
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	460b      	mov	r3, r1
 8007a82:	ed87 0b00 	vstr	d0, [r7]
 8007a86:	817b      	strh	r3, [r7, #10]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	813b      	strh	r3, [r7, #8]
	uint16_t temp;
	if(sin_square==1){
 8007a8c:	4b86      	ldr	r3, [pc, #536]	; (8007ca8 <buffersInit+0x230>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d175      	bne.n	8007b82 <buffersInit+0x10a>
		if(channel==0){
 8007a96:	4b85      	ldr	r3, [pc, #532]	; (8007cac <buffersInit+0x234>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d135      	bne.n	8007b0c <buffersInit+0x94>
			bufferSize1=size;
 8007aa0:	4a83      	ldr	r2, [pc, #524]	; (8007cb0 <buffersInit+0x238>)
 8007aa2:	897b      	ldrh	r3, [r7, #10]
 8007aa4:	8013      	strh	r3, [r2, #0]
			for (int i = 0; i < bufferSize1; ++i) {
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	623b      	str	r3, [r7, #32]
 8007aaa:	e029      	b.n	8007b00 <buffersInit+0x88>
				temp=(uint16_t)(buf[i]*scale*1.0)+offset;
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7f8 fd3c 	bl	8000534 <__aeabi_i2d>
 8007abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac0:	f7f8 fda2 	bl	8000608 <__aeabi_dmul>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	4618      	mov	r0, r3
 8007aca:	4621      	mov	r1, r4
 8007acc:	f7f9 f874 	bl	8000bb8 <__aeabi_d2uiz>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	893b      	ldrh	r3, [r7, #8]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	84fb      	strh	r3, [r7, #38]	; 0x26
				if(temp>4095){
 8007ada:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae0:	d306      	bcc.n	8007af0 <buffersInit+0x78>
				 genBuffer1[i]=4095;
 8007ae2:	4a74      	ldr	r2, [pc, #464]	; (8007cb4 <buffersInit+0x23c>)
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	f640 71ff 	movw	r1, #4095	; 0xfff
 8007aea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007aee:	e004      	b.n	8007afa <buffersInit+0x82>
				}else{
					genBuffer1[i]=temp;
 8007af0:	4970      	ldr	r1, [pc, #448]	; (8007cb4 <buffersInit+0x23c>)
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007af6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i = 0; i < bufferSize1; ++i) {
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	3301      	adds	r3, #1
 8007afe:	623b      	str	r3, [r7, #32]
 8007b00:	4b6b      	ldr	r3, [pc, #428]	; (8007cb0 <buffersInit+0x238>)
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	dbcf      	blt.n	8007aac <buffersInit+0x34>
				}
			}
		}
		if(channel==1){
 8007b0c:	4b67      	ldr	r3, [pc, #412]	; (8007cac <buffersInit+0x234>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d135      	bne.n	8007b82 <buffersInit+0x10a>
			bufferSize2=size;
 8007b16:	4a68      	ldr	r2, [pc, #416]	; (8007cb8 <buffersInit+0x240>)
 8007b18:	897b      	ldrh	r3, [r7, #10]
 8007b1a:	8013      	strh	r3, [r2, #0]
			for (int i = 0; i < bufferSize2; ++i) {
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61fb      	str	r3, [r7, #28]
 8007b20:	e029      	b.n	8007b76 <buffersInit+0xfe>
				temp=(uint16_t)(buf[i]*scale*1.0)+offset;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7f8 fd01 	bl	8000534 <__aeabi_i2d>
 8007b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b36:	f7f8 fd67 	bl	8000608 <__aeabi_dmul>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	4618      	mov	r0, r3
 8007b40:	4621      	mov	r1, r4
 8007b42:	f7f9 f839 	bl	8000bb8 <__aeabi_d2uiz>
 8007b46:	4603      	mov	r3, r0
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	893b      	ldrh	r3, [r7, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
				if(temp>4095){
 8007b50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b56:	d306      	bcc.n	8007b66 <buffersInit+0xee>
					genBuffer2[i]=4095;
 8007b58:	4a58      	ldr	r2, [pc, #352]	; (8007cbc <buffersInit+0x244>)
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8007b60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007b64:	e004      	b.n	8007b70 <buffersInit+0xf8>
				}else{
					genBuffer2[i]=temp;
 8007b66:	4955      	ldr	r1, [pc, #340]	; (8007cbc <buffersInit+0x244>)
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i = 0; i < bufferSize2; ++i) {
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3301      	adds	r3, #1
 8007b74:	61fb      	str	r3, [r7, #28]
 8007b76:	4b50      	ldr	r3, [pc, #320]	; (8007cb8 <buffersInit+0x240>)
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	dbcf      	blt.n	8007b22 <buffersInit+0xaa>
				}
			}

		}
	}
	if(sin_square==0){
 8007b82:	4b49      	ldr	r3, [pc, #292]	; (8007ca8 <buffersInit+0x230>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 8082 	bne.w	8007c92 <buffersInit+0x21a>
		if(channel==0){
 8007b8e:	4b47      	ldr	r3, [pc, #284]	; (8007cac <buffersInit+0x234>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d13b      	bne.n	8007c10 <buffersInit+0x198>
			bufferSize1=size;
 8007b98:	4a45      	ldr	r2, [pc, #276]	; (8007cb0 <buffersInit+0x238>)
 8007b9a:	897b      	ldrh	r3, [r7, #10]
 8007b9c:	8013      	strh	r3, [r2, #0]
			for (int i = 0; i < bufferSize1; ++i) {
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61bb      	str	r3, [r7, #24]
 8007ba2:	e02f      	b.n	8007c04 <buffersInit+0x18c>
				if(i<bufferSize1/2){
 8007ba4:	4b42      	ldr	r3, [pc, #264]	; (8007cb0 <buffersInit+0x238>)
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	da02      	bge.n	8007bba <buffersInit+0x142>
					temp=(uint16_t)offset;
 8007bb4:	893b      	ldrh	r3, [r7, #8]
 8007bb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007bb8:	e011      	b.n	8007bde <buffersInit+0x166>
				}else{
					temp=(uint16_t)(4095*scale*1.0)+offset;
 8007bba:	a339      	add	r3, pc, #228	; (adr r3, 8007ca0 <buffersInit+0x228>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc4:	f7f8 fd20 	bl	8000608 <__aeabi_dmul>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	4618      	mov	r0, r3
 8007bce:	4621      	mov	r1, r4
 8007bd0:	f7f8 fff2 	bl	8000bb8 <__aeabi_d2uiz>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	893b      	ldrh	r3, [r7, #8]
 8007bda:	4413      	add	r3, r2
 8007bdc:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				if(temp>4095){
 8007bde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be4:	d306      	bcc.n	8007bf4 <buffersInit+0x17c>
				 genBuffer1[i]=4095;
 8007be6:	4a33      	ldr	r2, [pc, #204]	; (8007cb4 <buffersInit+0x23c>)
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f640 71ff 	movw	r1, #4095	; 0xfff
 8007bee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007bf2:	e004      	b.n	8007bfe <buffersInit+0x186>
				}else{
					genBuffer1[i]=temp;
 8007bf4:	492f      	ldr	r1, [pc, #188]	; (8007cb4 <buffersInit+0x23c>)
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007bfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i = 0; i < bufferSize1; ++i) {
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	3301      	adds	r3, #1
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <buffersInit+0x238>)
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	dbc9      	blt.n	8007ba4 <buffersInit+0x12c>
				}
			}
		}
		if(channel==1){
 8007c10:	4b26      	ldr	r3, [pc, #152]	; (8007cac <buffersInit+0x234>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d13b      	bne.n	8007c92 <buffersInit+0x21a>
			bufferSize2=size;
 8007c1a:	4a27      	ldr	r2, [pc, #156]	; (8007cb8 <buffersInit+0x240>)
 8007c1c:	897b      	ldrh	r3, [r7, #10]
 8007c1e:	8013      	strh	r3, [r2, #0]
			for (int i = 0; i < bufferSize2; ++i) {
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	e02f      	b.n	8007c86 <buffersInit+0x20e>
				if(i<bufferSize1/2){
 8007c26:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <buffersInit+0x238>)
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	085b      	lsrs	r3, r3, #1
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	461a      	mov	r2, r3
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	4293      	cmp	r3, r2
 8007c34:	da02      	bge.n	8007c3c <buffersInit+0x1c4>
					temp=(uint16_t)offset;
 8007c36:	893b      	ldrh	r3, [r7, #8]
 8007c38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c3a:	e011      	b.n	8007c60 <buffersInit+0x1e8>
				}else{
					temp=(uint16_t)(4095*scale*1.0)+offset;
 8007c3c:	a318      	add	r3, pc, #96	; (adr r3, 8007ca0 <buffersInit+0x228>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c46:	f7f8 fcdf 	bl	8000608 <__aeabi_dmul>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	4618      	mov	r0, r3
 8007c50:	4621      	mov	r1, r4
 8007c52:	f7f8 ffb1 	bl	8000bb8 <__aeabi_d2uiz>
 8007c56:	4603      	mov	r3, r0
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	893b      	ldrh	r3, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				if(temp>4095){
 8007c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	d306      	bcc.n	8007c76 <buffersInit+0x1fe>
					genBuffer2[i]=4095;
 8007c68:	4a14      	ldr	r2, [pc, #80]	; (8007cbc <buffersInit+0x244>)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8007c70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007c74:	e004      	b.n	8007c80 <buffersInit+0x208>
				}else{
					genBuffer2[i]=temp;
 8007c76:	4911      	ldr	r1, [pc, #68]	; (8007cbc <buffersInit+0x244>)
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i = 0; i < bufferSize2; ++i) {
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3301      	adds	r3, #1
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <buffersInit+0x240>)
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	dbc9      	blt.n	8007c26 <buffersInit+0x1ae>
			}

		}

	}
}
 8007c92:	bf00      	nop
 8007c94:	372c      	adds	r7, #44	; 0x2c
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd90      	pop	{r4, r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	00000000 	.word	0x00000000
 8007ca4:	40affe00 	.word	0x40affe00
 8007ca8:	20000029 	.word	0x20000029
 8007cac:	20000249 	.word	0x20000249
 8007cb0:	20000006 	.word	0x20000006
 8007cb4:	20002750 	.word	0x20002750
 8007cb8:	20000008 	.word	0x20000008
 8007cbc:	2000072c 	.word	0x2000072c

08007cc0 <initBuffers>:
void initBuffers(int size,double scale,uint16_t offset){
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	ed87 0b00 	vstr	d0, [r7]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	817b      	strh	r3, [r7, #10]
	if(scale==0){return ;}
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cdc:	f7f8 fefc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f040 80a2 	bne.w	8007e2c <initBuffers+0x16c>
	switch(size){
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cee:	d04f      	beq.n	8007d90 <initBuffers+0xd0>
 8007cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf4:	dc0b      	bgt.n	8007d0e <initBuffers+0x4e>
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d026      	beq.n	8007d48 <initBuffers+0x88>
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	dc02      	bgt.n	8007d04 <initBuffers+0x44>
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d016      	beq.n	8007d30 <initBuffers+0x70>
 8007d02:	e086      	b.n	8007e12 <initBuffers+0x152>
 8007d04:	2b40      	cmp	r3, #64	; 0x40
 8007d06:	d02b      	beq.n	8007d60 <initBuffers+0xa0>
 8007d08:	2b80      	cmp	r3, #128	; 0x80
 8007d0a:	d035      	beq.n	8007d78 <initBuffers+0xb8>
 8007d0c:	e081      	b.n	8007e12 <initBuffers+0x152>
 8007d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d12:	d057      	beq.n	8007dc4 <initBuffers+0x104>
 8007d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d18:	dc03      	bgt.n	8007d22 <initBuffers+0x62>
 8007d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1e:	d044      	beq.n	8007daa <initBuffers+0xea>
 8007d20:	e077      	b.n	8007e12 <initBuffers+0x152>
 8007d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d26:	d05a      	beq.n	8007dde <initBuffers+0x11e>
 8007d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2c:	d064      	beq.n	8007df8 <initBuffers+0x138>
 8007d2e:	e070      	b.n	8007e12 <initBuffers+0x152>
		case 16 :size = 16;buffersInit(sin_samples16,size,scale,offset);break;
 8007d30:	2310      	movs	r3, #16
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	897a      	ldrh	r2, [r7, #10]
 8007d3a:	ed97 0b00 	vldr	d0, [r7]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	483c      	ldr	r0, [pc, #240]	; (8007e34 <initBuffers+0x174>)
 8007d42:	f7ff fe99 	bl	8007a78 <buffersInit>
 8007d46:	e072      	b.n	8007e2e <initBuffers+0x16e>
		case 32 :size = 32;buffersInit(sin_samples32,size,scale,offset);break;
 8007d48:	2320      	movs	r3, #32
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	897a      	ldrh	r2, [r7, #10]
 8007d52:	ed97 0b00 	vldr	d0, [r7]
 8007d56:	4619      	mov	r1, r3
 8007d58:	4837      	ldr	r0, [pc, #220]	; (8007e38 <initBuffers+0x178>)
 8007d5a:	f7ff fe8d 	bl	8007a78 <buffersInit>
 8007d5e:	e066      	b.n	8007e2e <initBuffers+0x16e>
		case 64 :size = 64;buffersInit(sin_samples64,size,scale,offset);break;
 8007d60:	2340      	movs	r3, #64	; 0x40
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	897a      	ldrh	r2, [r7, #10]
 8007d6a:	ed97 0b00 	vldr	d0, [r7]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4832      	ldr	r0, [pc, #200]	; (8007e3c <initBuffers+0x17c>)
 8007d72:	f7ff fe81 	bl	8007a78 <buffersInit>
 8007d76:	e05a      	b.n	8007e2e <initBuffers+0x16e>
		case 128 :size = 128;buffersInit(sin_samples128,size,scale,offset);break;
 8007d78:	2380      	movs	r3, #128	; 0x80
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	897a      	ldrh	r2, [r7, #10]
 8007d82:	ed97 0b00 	vldr	d0, [r7]
 8007d86:	4619      	mov	r1, r3
 8007d88:	482d      	ldr	r0, [pc, #180]	; (8007e40 <initBuffers+0x180>)
 8007d8a:	f7ff fe75 	bl	8007a78 <buffersInit>
 8007d8e:	e04e      	b.n	8007e2e <initBuffers+0x16e>
		case 256 :size = 256;buffersInit(sin_samples256,size,scale,offset);break;
 8007d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	897a      	ldrh	r2, [r7, #10]
 8007d9c:	ed97 0b00 	vldr	d0, [r7]
 8007da0:	4619      	mov	r1, r3
 8007da2:	4828      	ldr	r0, [pc, #160]	; (8007e44 <initBuffers+0x184>)
 8007da4:	f7ff fe68 	bl	8007a78 <buffersInit>
 8007da8:	e041      	b.n	8007e2e <initBuffers+0x16e>
		case 512 :size = 512;buffersInit(sin_samples512,size,scale,offset);break;
 8007daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	897a      	ldrh	r2, [r7, #10]
 8007db6:	ed97 0b00 	vldr	d0, [r7]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4822      	ldr	r0, [pc, #136]	; (8007e48 <initBuffers+0x188>)
 8007dbe:	f7ff fe5b 	bl	8007a78 <buffersInit>
 8007dc2:	e034      	b.n	8007e2e <initBuffers+0x16e>
		case 1024 :size = 1024;buffersInit(sin_samples1024,size,scale,offset);break;
 8007dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	897a      	ldrh	r2, [r7, #10]
 8007dd0:	ed97 0b00 	vldr	d0, [r7]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	481d      	ldr	r0, [pc, #116]	; (8007e4c <initBuffers+0x18c>)
 8007dd8:	f7ff fe4e 	bl	8007a78 <buffersInit>
 8007ddc:	e027      	b.n	8007e2e <initBuffers+0x16e>
		case 2048 :size = 2048;buffersInit(sin_samples2048,size,scale,offset);break;
 8007dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	897a      	ldrh	r2, [r7, #10]
 8007dea:	ed97 0b00 	vldr	d0, [r7]
 8007dee:	4619      	mov	r1, r3
 8007df0:	4817      	ldr	r0, [pc, #92]	; (8007e50 <initBuffers+0x190>)
 8007df2:	f7ff fe41 	bl	8007a78 <buffersInit>
 8007df6:	e01a      	b.n	8007e2e <initBuffers+0x16e>
		case 4096 :size = 4096;buffersInit(sin_samples4096,size,scale,offset);break;
 8007df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	897a      	ldrh	r2, [r7, #10]
 8007e04:	ed97 0b00 	vldr	d0, [r7]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4812      	ldr	r0, [pc, #72]	; (8007e54 <initBuffers+0x194>)
 8007e0c:	f7ff fe34 	bl	8007a78 <buffersInit>
 8007e10:	e00d      	b.n	8007e2e <initBuffers+0x16e>
		default:size = 16;buffersInit(sin_samples16,size,scale,offset);break;
 8007e12:	2310      	movs	r3, #16
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	897a      	ldrh	r2, [r7, #10]
 8007e1c:	ed97 0b00 	vldr	d0, [r7]
 8007e20:	4619      	mov	r1, r3
 8007e22:	4804      	ldr	r0, [pc, #16]	; (8007e34 <initBuffers+0x174>)
 8007e24:	f7ff fe28 	bl	8007a78 <buffersInit>
 8007e28:	bf00      	nop
 8007e2a:	e000      	b.n	8007e2e <initBuffers+0x16e>
	if(scale==0){return ;}
 8007e2c:	bf00      	nop
	}
}
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	0800c088 	.word	0x0800c088
 8007e38:	0800c0a8 	.word	0x0800c0a8
 8007e3c:	0800c0e8 	.word	0x0800c0e8
 8007e40:	0800c168 	.word	0x0800c168
 8007e44:	0800c268 	.word	0x0800c268
 8007e48:	0800c468 	.word	0x0800c468
 8007e4c:	0800c868 	.word	0x0800c868
 8007e50:	0800d068 	.word	0x0800d068
 8007e54:	0800e068 	.word	0x0800e068

08007e58 <genInit0>:
		status=HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, (uint32_t*)genBuffer1,bufferSize1, DAC_ALIGN_12B_R);
		status=HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2, (uint32_t*)genBuffer2,bufferSize2, DAC_ALIGN_12B_R);
		return (status);
}
int genInit0(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af02      	add	r7, sp, #8
		int status = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	607b      	str	r3, [r7, #4]
		HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
 8007e62:	2100      	movs	r1, #0
 8007e64:	480e      	ldr	r0, [pc, #56]	; (8007ea0 <genInit0+0x48>)
 8007e66:	f7fa ff48 	bl	8002cfa <HAL_DAC_Stop_DMA>
		status=timReconfigureForGenerator(genFreq[0],0,&realFreq1);
 8007e6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <genInit0+0x4c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a0e      	ldr	r2, [pc, #56]	; (8007ea8 <genInit0+0x50>)
 8007e70:	2100      	movs	r1, #0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fc32 	bl	80076dc <timReconfigureForGenerator>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	607b      	str	r3, [r7, #4]
		status=HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, (uint32_t*)genBuffer1,bufferSize1, DAC_ALIGN_12B_R);
 8007e7c:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <genInit0+0x54>)
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	2300      	movs	r3, #0
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4613      	mov	r3, r2
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <genInit0+0x58>)
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4804      	ldr	r0, [pc, #16]	; (8007ea0 <genInit0+0x48>)
 8007e8e:	f7fa ffad 	bl	8002dec <HAL_DAC_Start_DMA>
 8007e92:	4603      	mov	r3, r0
 8007e94:	607b      	str	r3, [r7, #4]
		return (status);
 8007e96:	687b      	ldr	r3, [r7, #4]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	200003b0 	.word	0x200003b0
 8007ea4:	2000e744 	.word	0x2000e744
 8007ea8:	20000408 	.word	0x20000408
 8007eac:	20000006 	.word	0x20000006
 8007eb0:	20002750 	.word	0x20002750

08007eb4 <genInit1>:
int genInit1(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af02      	add	r7, sp, #8
		int status = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]
		HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_2);
 8007ebe:	2110      	movs	r1, #16
 8007ec0:	480e      	ldr	r0, [pc, #56]	; (8007efc <genInit1+0x48>)
 8007ec2:	f7fa ff1a 	bl	8002cfa <HAL_DAC_Stop_DMA>
		status=timReconfigureForGenerator(genFreq[1],1,&realFreq2);
 8007ec6:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <genInit1+0x4c>)
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	4a0e      	ldr	r2, [pc, #56]	; (8007f04 <genInit1+0x50>)
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fc04 	bl	80076dc <timReconfigureForGenerator>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	607b      	str	r3, [r7, #4]
		status=HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2, (uint32_t*)genBuffer2,bufferSize2, DAC_ALIGN_12B_R);
 8007ed8:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <genInit1+0x54>)
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	2300      	movs	r3, #0
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <genInit1+0x58>)
 8007ee6:	2110      	movs	r1, #16
 8007ee8:	4804      	ldr	r0, [pc, #16]	; (8007efc <genInit1+0x48>)
 8007eea:	f7fa ff7f 	bl	8002dec <HAL_DAC_Start_DMA>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	607b      	str	r3, [r7, #4]
		return (status);
 8007ef2:	687b      	ldr	r3, [r7, #4]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	200003b0 	.word	0x200003b0
 8007f00:	2000e744 	.word	0x2000e744
 8007f04:	20002730 	.word	0x20002730
 8007f08:	20000008 	.word	0x20000008
 8007f0c:	2000072c 	.word	0x2000072c

08007f10 <DACDisableOutput0>:
void DACDisableOutput0(void){
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = G1_Pin;
 8007f16:	2310      	movs	r3, #16
 8007f18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f2a:	f7fb fb73 	bl	8003614 <HAL_GPIO_Init>
}
 8007f2e:	bf00      	nop
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <DACDisableOutput1>:
void DACDisableOutput1(void){
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b086      	sub	sp, #24
 8007f3a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = G2_Pin;
 8007f3c:	2320      	movs	r3, #32
 8007f3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f48:	1d3b      	adds	r3, r7, #4
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f50:	f7fb fb60 	bl	8003614 <HAL_GPIO_Init>
}
 8007f54:	bf00      	nop
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <genStop0>:
int genStop0(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
		int status = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
		HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
 8007f66:	2100      	movs	r1, #0
 8007f68:	4804      	ldr	r0, [pc, #16]	; (8007f7c <genStop0+0x20>)
 8007f6a:	f7fa fec6 	bl	8002cfa <HAL_DAC_Stop_DMA>
		DACDisableOutput0();
 8007f6e:	f7ff ffcf 	bl	8007f10 <DACDisableOutput0>
		return (status);
 8007f72:	687b      	ldr	r3, [r7, #4]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	200003b0 	.word	0x200003b0

08007f80 <genStop1>:
int genStop1(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
		int status = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	607b      	str	r3, [r7, #4]
		HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_2);
 8007f8a:	2110      	movs	r1, #16
 8007f8c:	4804      	ldr	r0, [pc, #16]	; (8007fa0 <genStop1+0x20>)
 8007f8e:	f7fa feb4 	bl	8002cfa <HAL_DAC_Stop_DMA>
		DACDisableOutput1();
 8007f92:	f7ff ffd0 	bl	8007f36 <DACDisableOutput1>
		return (status);
 8007f96:	687b      	ldr	r3, [r7, #4]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	200003b0 	.word	0x200003b0

08007fa4 <vprint>:

void vprint(const char *fmt, va_list argp)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b0ce      	sub	sp, #312	; 0x138
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	1d3b      	adds	r3, r7, #4
 8007fac:	6018      	str	r0, [r3, #0]
 8007fae:	463b      	mov	r3, r7
 8007fb0:	6019      	str	r1, [r3, #0]
	char string[300];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8007fb2:	463a      	mov	r2, r7
 8007fb4:	1d3b      	adds	r3, r7, #4
 8007fb6:	f107 000c 	add.w	r0, r7, #12
 8007fba:	6812      	ldr	r2, [r2, #0]
 8007fbc:	6819      	ldr	r1, [r3, #0]
 8007fbe:	f002 fbc7 	bl	800a750 <vsiprintf>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dd0c      	ble.n	8007fe2 <vprint+0x3e>
    {
    	//HAL_Delay(10);
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string),0xFFFFF); // send message via UART
 8007fc8:	f107 030c 	add.w	r3, r7, #12
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7f8 f907 	bl	80001e0 <strlen>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	f107 010c 	add.w	r1, r7, #12
 8007fda:	4b04      	ldr	r3, [pc, #16]	; (8007fec <vprint+0x48>)
 8007fdc:	4804      	ldr	r0, [pc, #16]	; (8007ff0 <vprint+0x4c>)
 8007fde:	f7fe f89b 	bl	8006118 <HAL_UART_Transmit>
    }
}
 8007fe2:	bf00      	nop
 8007fe4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	000fffff 	.word	0x000fffff
 8007ff0:	2000e82c 	.word	0x2000e82c

08007ff4 <pr>:
void pr(const char *text, ...) // custom print() function
{
 8007ff4:	b40f      	push	{r0, r1, r2, r3}
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8007ffc:	200a      	movs	r0, #10
 8007ffe:	f7f8 feb1 	bl	8000d64 <HAL_Delay>
    va_list argp;
    va_start(argp, text);
 8008002:	f107 0314 	add.w	r3, r7, #20
 8008006:	607b      	str	r3, [r7, #4]
    vprint(text, argp);
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	6938      	ldr	r0, [r7, #16]
 800800c:	f7ff ffca 	bl	8007fa4 <vprint>
    va_end(argp);
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800801a:	b004      	add	sp, #16
 800801c:	4770      	bx	lr
	...

08008020 <setSweepMaxMin>:
void setSweepMaxMin(int newinput){
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	if(sweep==1 && command==0 && newinput > 0){
 8008028:	4b13      	ldr	r3, [pc, #76]	; (8008078 <setSweepMaxMin+0x58>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b01      	cmp	r3, #1
 8008030:	d11e      	bne.n	8008070 <setSweepMaxMin+0x50>
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <setSweepMaxMin+0x5c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d11a      	bne.n	8008070 <setSweepMaxMin+0x50>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	dd17      	ble.n	8008070 <setSweepMaxMin+0x50>
		sweep=0;
 8008040:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <setSweepMaxMin+0x58>)
 8008042:	2200      	movs	r2, #0
 8008044:	701a      	strb	r2, [r3, #0]
		sweepFreq[2*channel+upDown]=newinput*bufferSize1;
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <setSweepMaxMin+0x60>)
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	fb03 f102 	mul.w	r1, r3, r2
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <setSweepMaxMin+0x64>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	4a0b      	ldr	r2, [pc, #44]	; (8008088 <setSweepMaxMin+0x68>)
 800805c:	7812      	ldrb	r2, [r2, #0]
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	4413      	add	r3, r2
 8008062:	4a0a      	ldr	r2, [pc, #40]	; (800808c <setSweepMaxMin+0x6c>)
 8008064:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pr("%d\n\r",newinput);
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	4809      	ldr	r0, [pc, #36]	; (8008090 <setSweepMaxMin+0x70>)
 800806c:	f7ff ffc2 	bl	8007ff4 <pr>
	}
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20000261 	.word	0x20000261
 800807c:	20000274 	.word	0x20000274
 8008080:	20000006 	.word	0x20000006
 8008084:	20000249 	.word	0x20000249
 8008088:	20000260 	.word	0x20000260
 800808c:	2000e74c 	.word	0x2000e74c
 8008090:	0800bf28 	.word	0x0800bf28

08008094 <printADCOut>:

void printADCOut(){
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
	//send[0]=(float)xf;
	//send[1]=(float)yf;
	//HAL_UART_Transmit(&huart2, (uint8_t*)(&send), 8,0xFFFFF);

	if(dataready==0){
 8008098:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <printADCOut+0x5c>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <printADCOut+0x14>
		pr("DNR\n\r");
 80080a2:	4814      	ldr	r0, [pc, #80]	; (80080f4 <printADCOut+0x60>)
 80080a4:	f7ff ffa6 	bl	8007ff4 <pr>
	}
	if(dataready==2){
 80080a8:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <printADCOut+0x5c>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d110      	bne.n	80080d4 <printADCOut+0x40>
		dataready = 0;
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <printADCOut+0x5c>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80080b8:	200a      	movs	r0, #10
 80080ba:	f7f8 fe53 	bl	8000d64 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)(&data), samples*4,0xFFFF);
 80080be:	4b0e      	ldr	r3, [pc, #56]	; (80080f8 <printADCOut+0x64>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080cc:	490b      	ldr	r1, [pc, #44]	; (80080fc <printADCOut+0x68>)
 80080ce:	480c      	ldr	r0, [pc, #48]	; (8008100 <printADCOut+0x6c>)
 80080d0:	f7fe f822 	bl	8006118 <HAL_UART_Transmit>
	}
	if(dataready==1){
 80080d4:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <printADCOut+0x5c>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d105      	bne.n	80080ea <printADCOut+0x56>
		pr("MD\n\r");
 80080de:	4809      	ldr	r0, [pc, #36]	; (8008104 <printADCOut+0x70>)
 80080e0:	f7ff ff88 	bl	8007ff4 <pr>
		dataready = 2;
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <printADCOut+0x5c>)
 80080e6:	2202      	movs	r2, #2
 80080e8:	701a      	strb	r2, [r3, #0]
	}


}
 80080ea:	bf00      	nop
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	2000026a 	.word	0x2000026a
 80080f4:	0800bf30 	.word	0x0800bf30
 80080f8:	2000002c 	.word	0x2000002c
 80080fc:	20004a70 	.word	0x20004a70
 8008100:	2000e82c 	.word	0x2000e82c
 8008104:	0800bf38 	.word	0x0800bf38

08008108 <selectBufferSize>:
uint16_t selectBufferSize(uint32_t frequency){
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	uint16_t option = 4096;
 8008110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008114:	81fb      	strh	r3, [r7, #14]
	for (uint i = 1255;i<=321280;i=i*2){
 8008116:	f240 43e7 	movw	r3, #1255	; 0x4e7
 800811a:	60bb      	str	r3, [r7, #8]
 800811c:	e012      	b.n	8008144 <selectBufferSize+0x3c>
		option=option/2;
 800811e:	89fb      	ldrh	r3, [r7, #14]
 8008120:	085b      	lsrs	r3, r3, #1
 8008122:	81fb      	strh	r3, [r7, #14]
		if(frequency<i*2&&i<frequency){
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d207      	bcs.n	800813e <selectBufferSize+0x36>
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d203      	bcs.n	800813e <selectBufferSize+0x36>
			return (option/2);
 8008136:	89fb      	ldrh	r3, [r7, #14]
 8008138:	085b      	lsrs	r3, r3, #1
 800813a:	b29b      	uxth	r3, r3
 800813c:	e008      	b.n	8008150 <selectBufferSize+0x48>
	for (uint i = 1255;i<=321280;i=i*2){
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	60bb      	str	r3, [r7, #8]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4a05      	ldr	r2, [pc, #20]	; (800815c <selectBufferSize+0x54>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d9e8      	bls.n	800811e <selectBufferSize+0x16>
		}

	}
	return (4096);
 800814c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	0004e700 	.word	0x0004e700

08008160 <setAmpl>:
void setAmpl(int newinput){
 8008160:	b590      	push	{r4, r7, lr}
 8008162:	b087      	sub	sp, #28
 8008164:	af02      	add	r7, sp, #8
 8008166:	6078      	str	r0, [r7, #4]
	if(ampl==1 && command==0 && newinput > 0){
 8008168:	4b69      	ldr	r3, [pc, #420]	; (8008310 <setAmpl+0x1b0>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b01      	cmp	r3, #1
 8008170:	f040 80ca 	bne.w	8008308 <setAmpl+0x1a8>
 8008174:	4b67      	ldr	r3, [pc, #412]	; (8008314 <setAmpl+0x1b4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 80c5 	bne.w	8008308 <setAmpl+0x1a8>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f340 80c1 	ble.w	8008308 <setAmpl+0x1a8>
		ampl=0;
 8008186:	4b62      	ldr	r3, [pc, #392]	; (8008310 <setAmpl+0x1b0>)
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
		if(channel==0){
 800818c:	4b62      	ldr	r3, [pc, #392]	; (8008318 <setAmpl+0x1b8>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d159      	bne.n	800824a <setAmpl+0xea>
			scale0 = (double)(newinput/100.0);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7f8 f9cc 	bl	8000534 <__aeabi_i2d>
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	4b5e      	ldr	r3, [pc, #376]	; (800831c <setAmpl+0x1bc>)
 80081a2:	f7f8 fb5b 	bl	800085c <__aeabi_ddiv>
 80081a6:	4603      	mov	r3, r0
 80081a8:	460c      	mov	r4, r1
 80081aa:	4a5d      	ldr	r2, [pc, #372]	; (8008320 <setAmpl+0x1c0>)
 80081ac:	e9c2 3400 	strd	r3, r4, [r2]
			if(scale0>=100.0){
 80081b0:	4b5b      	ldr	r3, [pc, #364]	; (8008320 <setAmpl+0x1c0>)
 80081b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	4b58      	ldr	r3, [pc, #352]	; (800831c <setAmpl+0x1bc>)
 80081bc:	f7f8 fcaa 	bl	8000b14 <__aeabi_dcmpge>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d005      	beq.n	80081d2 <setAmpl+0x72>
				scale0=100.0;
 80081c6:	4a56      	ldr	r2, [pc, #344]	; (8008320 <setAmpl+0x1c0>)
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	4c53      	ldr	r4, [pc, #332]	; (800831c <setAmpl+0x1bc>)
 80081ce:	e9c2 3400 	strd	r3, r4, [r2]
			}
			HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
 80081d2:	2100      	movs	r1, #0
 80081d4:	4853      	ldr	r0, [pc, #332]	; (8008324 <setAmpl+0x1c4>)
 80081d6:	f7fa fd90 	bl	8002cfa <HAL_DAC_Stop_DMA>
			uint16_t temparr = htim6.Instance->ARR;
 80081da:	4b53      	ldr	r3, [pc, #332]	; (8008328 <setAmpl+0x1c8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	81fb      	strh	r3, [r7, #14]
			uint16_t temppsc = htim6.Instance->PSC;
 80081e2:	4b51      	ldr	r3, [pc, #324]	; (8008328 <setAmpl+0x1c8>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	81bb      	strh	r3, [r7, #12]
			htim6.Instance->ARR = 3999;
 80081ea:	4b4f      	ldr	r3, [pc, #316]	; (8008328 <setAmpl+0x1c8>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f640 729f 	movw	r2, #3999	; 0xf9f
 80081f2:	62da      	str	r2, [r3, #44]	; 0x2c
			htim6.Instance->PSC = 9;
 80081f4:	4b4c      	ldr	r3, [pc, #304]	; (8008328 <setAmpl+0x1c8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2209      	movs	r2, #9
 80081fa:	629a      	str	r2, [r3, #40]	; 0x28
			initBuffers(bufferSize1, scale0, offset0);
 80081fc:	4b4b      	ldr	r3, [pc, #300]	; (800832c <setAmpl+0x1cc>)
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	4b47      	ldr	r3, [pc, #284]	; (8008320 <setAmpl+0x1c0>)
 8008204:	ed93 7b00 	vldr	d7, [r3]
 8008208:	4b49      	ldr	r3, [pc, #292]	; (8008330 <setAmpl+0x1d0>)
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	eeb0 0a47 	vmov.f32	s0, s14
 8008212:	eef0 0a67 	vmov.f32	s1, s15
 8008216:	4610      	mov	r0, r2
 8008218:	f7ff fd52 	bl	8007cc0 <initBuffers>
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, (uint32_t*)genBuffer1,bufferSize1, DAC_ALIGN_12B_R);
 800821c:	4b43      	ldr	r3, [pc, #268]	; (800832c <setAmpl+0x1cc>)
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	2300      	movs	r3, #0
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	4613      	mov	r3, r2
 8008228:	4a42      	ldr	r2, [pc, #264]	; (8008334 <setAmpl+0x1d4>)
 800822a:	2100      	movs	r1, #0
 800822c:	483d      	ldr	r0, [pc, #244]	; (8008324 <setAmpl+0x1c4>)
 800822e:	f7fa fddd 	bl	8002dec <HAL_DAC_Start_DMA>
			htim6.Instance->ARR = temparr;
 8008232:	4b3d      	ldr	r3, [pc, #244]	; (8008328 <setAmpl+0x1c8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	89fa      	ldrh	r2, [r7, #14]
 8008238:	62da      	str	r2, [r3, #44]	; 0x2c
			htim6.Instance->PSC = temppsc;
 800823a:	4b3b      	ldr	r3, [pc, #236]	; (8008328 <setAmpl+0x1c8>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	89ba      	ldrh	r2, [r7, #12]
 8008240:	629a      	str	r2, [r3, #40]	; 0x28
			pr("%d\n\r",newinput);
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	483c      	ldr	r0, [pc, #240]	; (8008338 <setAmpl+0x1d8>)
 8008246:	f7ff fed5 	bl	8007ff4 <pr>
		}
		if(channel==1){
 800824a:	4b33      	ldr	r3, [pc, #204]	; (8008318 <setAmpl+0x1b8>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	d159      	bne.n	8008308 <setAmpl+0x1a8>
			scale1 =  (double)(newinput/100.0);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7f8 f96d 	bl	8000534 <__aeabi_i2d>
 800825a:	f04f 0200 	mov.w	r2, #0
 800825e:	4b2f      	ldr	r3, [pc, #188]	; (800831c <setAmpl+0x1bc>)
 8008260:	f7f8 fafc 	bl	800085c <__aeabi_ddiv>
 8008264:	4603      	mov	r3, r0
 8008266:	460c      	mov	r4, r1
 8008268:	4a34      	ldr	r2, [pc, #208]	; (800833c <setAmpl+0x1dc>)
 800826a:	e9c2 3400 	strd	r3, r4, [r2]
			if(scale1>=100.0){
 800826e:	4b33      	ldr	r3, [pc, #204]	; (800833c <setAmpl+0x1dc>)
 8008270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	4b28      	ldr	r3, [pc, #160]	; (800831c <setAmpl+0x1bc>)
 800827a:	f7f8 fc4b 	bl	8000b14 <__aeabi_dcmpge>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <setAmpl+0x130>
				scale1=100.0;
 8008284:	4a2d      	ldr	r2, [pc, #180]	; (800833c <setAmpl+0x1dc>)
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	4c24      	ldr	r4, [pc, #144]	; (800831c <setAmpl+0x1bc>)
 800828c:	e9c2 3400 	strd	r3, r4, [r2]
			}
			HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_2);
 8008290:	2110      	movs	r1, #16
 8008292:	4824      	ldr	r0, [pc, #144]	; (8008324 <setAmpl+0x1c4>)
 8008294:	f7fa fd31 	bl	8002cfa <HAL_DAC_Stop_DMA>
			uint16_t temparr = htim7.Instance->ARR;
 8008298:	4b29      	ldr	r3, [pc, #164]	; (8008340 <setAmpl+0x1e0>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	817b      	strh	r3, [r7, #10]
			uint16_t temppsc = htim7.Instance->PSC;
 80082a0:	4b27      	ldr	r3, [pc, #156]	; (8008340 <setAmpl+0x1e0>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a6:	813b      	strh	r3, [r7, #8]
			htim7.Instance->ARR = 3999;
 80082a8:	4b25      	ldr	r3, [pc, #148]	; (8008340 <setAmpl+0x1e0>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f640 729f 	movw	r2, #3999	; 0xf9f
 80082b0:	62da      	str	r2, [r3, #44]	; 0x2c
			htim7.Instance->PSC = 9;
 80082b2:	4b23      	ldr	r3, [pc, #140]	; (8008340 <setAmpl+0x1e0>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2209      	movs	r2, #9
 80082b8:	629a      	str	r2, [r3, #40]	; 0x28
			initBuffers(bufferSize2, scale1, offset1);
 80082ba:	4b22      	ldr	r3, [pc, #136]	; (8008344 <setAmpl+0x1e4>)
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	4b1e      	ldr	r3, [pc, #120]	; (800833c <setAmpl+0x1dc>)
 80082c2:	ed93 7b00 	vldr	d7, [r3]
 80082c6:	4b20      	ldr	r3, [pc, #128]	; (8008348 <setAmpl+0x1e8>)
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	eeb0 0a47 	vmov.f32	s0, s14
 80082d0:	eef0 0a67 	vmov.f32	s1, s15
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7ff fcf3 	bl	8007cc0 <initBuffers>
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2, (uint32_t*)genBuffer2,bufferSize2, DAC_ALIGN_12B_R);
 80082da:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <setAmpl+0x1e4>)
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	2300      	movs	r3, #0
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	4613      	mov	r3, r2
 80082e6:	4a19      	ldr	r2, [pc, #100]	; (800834c <setAmpl+0x1ec>)
 80082e8:	2110      	movs	r1, #16
 80082ea:	480e      	ldr	r0, [pc, #56]	; (8008324 <setAmpl+0x1c4>)
 80082ec:	f7fa fd7e 	bl	8002dec <HAL_DAC_Start_DMA>
			htim7.Instance->ARR = temparr;
 80082f0:	4b13      	ldr	r3, [pc, #76]	; (8008340 <setAmpl+0x1e0>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	897a      	ldrh	r2, [r7, #10]
 80082f6:	62da      	str	r2, [r3, #44]	; 0x2c
			htim7.Instance->PSC = temppsc;
 80082f8:	4b11      	ldr	r3, [pc, #68]	; (8008340 <setAmpl+0x1e0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	893a      	ldrh	r2, [r7, #8]
 80082fe:	629a      	str	r2, [r3, #40]	; 0x28
			pr("%d\n\r",newinput);
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	480d      	ldr	r0, [pc, #52]	; (8008338 <setAmpl+0x1d8>)
 8008304:	f7ff fe76 	bl	8007ff4 <pr>
		}
	}
}
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	bd90      	pop	{r4, r7, pc}
 8008310:	20000267 	.word	0x20000267
 8008314:	20000274 	.word	0x20000274
 8008318:	20000249 	.word	0x20000249
 800831c:	40590000 	.word	0x40590000
 8008320:	20000018 	.word	0x20000018
 8008324:	200003b0 	.word	0x200003b0
 8008328:	2000e7ac 	.word	0x2000e7ac
 800832c:	20000006 	.word	0x20000006
 8008330:	20000240 	.word	0x20000240
 8008334:	20002750 	.word	0x20002750
 8008338:	0800bf28 	.word	0x0800bf28
 800833c:	20000020 	.word	0x20000020
 8008340:	2000e7ec 	.word	0x2000e7ec
 8008344:	20000008 	.word	0x20000008
 8008348:	20000242 	.word	0x20000242
 800834c:	2000072c 	.word	0x2000072c

08008350 <setFiltr>:

void setFiltr(int newinput){
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	if(setfilter==1 && command==0 && newinput > 0){
 8008358:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <setFiltr+0x78>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b01      	cmp	r3, #1
 8008360:	d128      	bne.n	80083b4 <setFiltr+0x64>
 8008362:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <setFiltr+0x7c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d124      	bne.n	80083b4 <setFiltr+0x64>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	dd21      	ble.n	80083b4 <setFiltr+0x64>
		setfilter=0;
 8008370:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <setFiltr+0x78>)
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]
		A = ((double)newinput)/100000.0;
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7f8 f8dc 	bl	8000534 <__aeabi_i2d>
 800837c:	a310      	add	r3, pc, #64	; (adr r3, 80083c0 <setFiltr+0x70>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f7f8 fa6b 	bl	800085c <__aeabi_ddiv>
 8008386:	4603      	mov	r3, r0
 8008388:	460c      	mov	r4, r1
 800838a:	4a11      	ldr	r2, [pc, #68]	; (80083d0 <setFiltr+0x80>)
 800838c:	e9c2 3400 	strd	r3, r4, [r2]
		pr("%.6f\n\r",(float)A);
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <setFiltr+0x80>)
 8008392:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008396:	4618      	mov	r0, r3
 8008398:	4621      	mov	r1, r4
 800839a:	f7f8 fc2d 	bl	8000bf8 <__aeabi_d2f>
 800839e:	4603      	mov	r3, r0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7f8 f8d9 	bl	8000558 <__aeabi_f2d>
 80083a6:	4603      	mov	r3, r0
 80083a8:	460c      	mov	r4, r1
 80083aa:	461a      	mov	r2, r3
 80083ac:	4623      	mov	r3, r4
 80083ae:	4809      	ldr	r0, [pc, #36]	; (80083d4 <setFiltr+0x84>)
 80083b0:	f7ff fe20 	bl	8007ff4 <pr>
	}
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd90      	pop	{r4, r7, pc}
 80083bc:	f3af 8000 	nop.w
 80083c0:	00000000 	.word	0x00000000
 80083c4:	40f86a00 	.word	0x40f86a00
 80083c8:	2000026b 	.word	0x2000026b
 80083cc:	20000274 	.word	0x20000274
 80083d0:	20000038 	.word	0x20000038
 80083d4:	0800bf40 	.word	0x0800bf40

080083d8 <setFrequency>:
void setFrequency(int newinput){
 80083d8:	b590      	push	{r4, r7, lr}
 80083da:	b085      	sub	sp, #20
 80083dc:	af02      	add	r7, sp, #8
 80083de:	6078      	str	r0, [r7, #4]
	if(freq==1 && command==0 && newinput > 0){
 80083e0:	4b71      	ldr	r3, [pc, #452]	; (80085a8 <setFrequency+0x1d0>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	f040 80da 	bne.w	80085a0 <setFrequency+0x1c8>
 80083ec:	4b6f      	ldr	r3, [pc, #444]	; (80085ac <setFrequency+0x1d4>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f040 80d5 	bne.w	80085a0 <setFrequency+0x1c8>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f340 80d1 	ble.w	80085a0 <setFrequency+0x1c8>
		freq=0;
 80083fe:	4b6a      	ldr	r3, [pc, #424]	; (80085a8 <setFrequency+0x1d0>)
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
		if(channel==0){
 8008404:	4b6a      	ldr	r3, [pc, #424]	; (80085b0 <setFrequency+0x1d8>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d161      	bne.n	80084d2 <setFrequency+0xfa>
			sweep0=0;
 800840e:	4b69      	ldr	r3, [pc, #420]	; (80085b4 <setFrequency+0x1dc>)
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
 8008414:	2100      	movs	r1, #0
 8008416:	4868      	ldr	r0, [pc, #416]	; (80085b8 <setFrequency+0x1e0>)
 8008418:	f7fa fc6f 	bl	8002cfa <HAL_DAC_Stop_DMA>

			htim6.Instance->ARR = 3999;
 800841c:	4b67      	ldr	r3, [pc, #412]	; (80085bc <setFrequency+0x1e4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f640 729f 	movw	r2, #3999	; 0xf9f
 8008424:	62da      	str	r2, [r3, #44]	; 0x2c
			htim6.Instance->PSC = 9;
 8008426:	4b65      	ldr	r3, [pc, #404]	; (80085bc <setFrequency+0x1e4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2209      	movs	r2, #9
 800842c:	629a      	str	r2, [r3, #40]	; 0x28
			bufferSize1 = selectBufferSize(newinput);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff fe69 	bl	8008108 <selectBufferSize>
 8008436:	4603      	mov	r3, r0
 8008438:	461a      	mov	r2, r3
 800843a:	4b61      	ldr	r3, [pc, #388]	; (80085c0 <setFrequency+0x1e8>)
 800843c:	801a      	strh	r2, [r3, #0]
			initBuffers(bufferSize1, scale0, offset0);
 800843e:	4b60      	ldr	r3, [pc, #384]	; (80085c0 <setFrequency+0x1e8>)
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	4b5f      	ldr	r3, [pc, #380]	; (80085c4 <setFrequency+0x1ec>)
 8008446:	ed93 7b00 	vldr	d7, [r3]
 800844a:	4b5f      	ldr	r3, [pc, #380]	; (80085c8 <setFrequency+0x1f0>)
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	4619      	mov	r1, r3
 8008450:	eeb0 0a47 	vmov.f32	s0, s14
 8008454:	eef0 0a67 	vmov.f32	s1, s15
 8008458:	4610      	mov	r0, r2
 800845a:	f7ff fc31 	bl	8007cc0 <initBuffers>
			genFreq[0]=newinput*bufferSize1;
 800845e:	4b58      	ldr	r3, [pc, #352]	; (80085c0 <setFrequency+0x1e8>)
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	fb03 f302 	mul.w	r3, r3, r2
 800846a:	461a      	mov	r2, r3
 800846c:	4b57      	ldr	r3, [pc, #348]	; (80085cc <setFrequency+0x1f4>)
 800846e:	601a      	str	r2, [r3, #0]
			posintable0=0;
 8008470:	4b57      	ldr	r3, [pc, #348]	; (80085d0 <setFrequency+0x1f8>)
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
			posintable1=0;
 8008476:	4b57      	ldr	r3, [pc, #348]	; (80085d4 <setFrequency+0x1fc>)
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
			timReconfigureForGenerator(genFreq[0],0,&realFreq1);
 800847c:	4b53      	ldr	r3, [pc, #332]	; (80085cc <setFrequency+0x1f4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a55      	ldr	r2, [pc, #340]	; (80085d8 <setFrequency+0x200>)
 8008482:	2100      	movs	r1, #0
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff f929 	bl	80076dc <timReconfigureForGenerator>
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, (uint32_t*)genBuffer1,bufferSize1, DAC_ALIGN_12B_R);
 800848a:	4b4d      	ldr	r3, [pc, #308]	; (80085c0 <setFrequency+0x1e8>)
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	2300      	movs	r3, #0
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	4613      	mov	r3, r2
 8008496:	4a51      	ldr	r2, [pc, #324]	; (80085dc <setFrequency+0x204>)
 8008498:	2100      	movs	r1, #0
 800849a:	4847      	ldr	r0, [pc, #284]	; (80085b8 <setFrequency+0x1e0>)
 800849c:	f7fa fca6 	bl	8002dec <HAL_DAC_Start_DMA>
			pr("%.3f\n",(float)realFreq1/(float)bufferSize1);
 80084a0:	4b4d      	ldr	r3, [pc, #308]	; (80085d8 <setFrequency+0x200>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80084ac:	4b44      	ldr	r3, [pc, #272]	; (80085c0 <setFrequency+0x1e8>)
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80084bc:	ee16 0a90 	vmov	r0, s13
 80084c0:	f7f8 f84a 	bl	8000558 <__aeabi_f2d>
 80084c4:	4603      	mov	r3, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	461a      	mov	r2, r3
 80084ca:	4623      	mov	r3, r4
 80084cc:	4844      	ldr	r0, [pc, #272]	; (80085e0 <setFrequency+0x208>)
 80084ce:	f7ff fd91 	bl	8007ff4 <pr>
			//pr("%d\n\r",newinput);
			//setAmpl(scale0);
		}
		if(channel==1){
 80084d2:	4b37      	ldr	r3, [pc, #220]	; (80085b0 <setFrequency+0x1d8>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d161      	bne.n	80085a0 <setFrequency+0x1c8>
			sweep1=0;
 80084dc:	4b41      	ldr	r3, [pc, #260]	; (80085e4 <setFrequency+0x20c>)
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_2);
 80084e2:	2110      	movs	r1, #16
 80084e4:	4834      	ldr	r0, [pc, #208]	; (80085b8 <setFrequency+0x1e0>)
 80084e6:	f7fa fc08 	bl	8002cfa <HAL_DAC_Stop_DMA>
			htim7.Instance->ARR = 3999;
 80084ea:	4b3f      	ldr	r3, [pc, #252]	; (80085e8 <setFrequency+0x210>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f640 729f 	movw	r2, #3999	; 0xf9f
 80084f2:	62da      	str	r2, [r3, #44]	; 0x2c
			htim7.Instance->PSC = 9;
 80084f4:	4b3c      	ldr	r3, [pc, #240]	; (80085e8 <setFrequency+0x210>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2209      	movs	r2, #9
 80084fa:	629a      	str	r2, [r3, #40]	; 0x28
			bufferSize2 = selectBufferSize(newinput);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fe02 	bl	8008108 <selectBufferSize>
 8008504:	4603      	mov	r3, r0
 8008506:	461a      	mov	r2, r3
 8008508:	4b38      	ldr	r3, [pc, #224]	; (80085ec <setFrequency+0x214>)
 800850a:	801a      	strh	r2, [r3, #0]
			initBuffers(bufferSize2, scale1, offset1);
 800850c:	4b37      	ldr	r3, [pc, #220]	; (80085ec <setFrequency+0x214>)
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	4b37      	ldr	r3, [pc, #220]	; (80085f0 <setFrequency+0x218>)
 8008514:	ed93 7b00 	vldr	d7, [r3]
 8008518:	4b36      	ldr	r3, [pc, #216]	; (80085f4 <setFrequency+0x21c>)
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	4619      	mov	r1, r3
 800851e:	eeb0 0a47 	vmov.f32	s0, s14
 8008522:	eef0 0a67 	vmov.f32	s1, s15
 8008526:	4610      	mov	r0, r2
 8008528:	f7ff fbca 	bl	8007cc0 <initBuffers>
			genFreq[1]=newinput*bufferSize2;
 800852c:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <setFrequency+0x214>)
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	fb03 f302 	mul.w	r3, r3, r2
 8008538:	461a      	mov	r2, r3
 800853a:	4b24      	ldr	r3, [pc, #144]	; (80085cc <setFrequency+0x1f4>)
 800853c:	605a      	str	r2, [r3, #4]
			posintable0=0;
 800853e:	4b24      	ldr	r3, [pc, #144]	; (80085d0 <setFrequency+0x1f8>)
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
			posintable1=0;
 8008544:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <setFrequency+0x1fc>)
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2, (uint32_t*)genBuffer2,bufferSize2, DAC_ALIGN_12B_R);
 800854a:	4b28      	ldr	r3, [pc, #160]	; (80085ec <setFrequency+0x214>)
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	2300      	movs	r3, #0
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	4613      	mov	r3, r2
 8008556:	4a28      	ldr	r2, [pc, #160]	; (80085f8 <setFrequency+0x220>)
 8008558:	2110      	movs	r1, #16
 800855a:	4817      	ldr	r0, [pc, #92]	; (80085b8 <setFrequency+0x1e0>)
 800855c:	f7fa fc46 	bl	8002dec <HAL_DAC_Start_DMA>
			timReconfigureForGenerator(genFreq[1],1,&realFreq2);
 8008560:	4b1a      	ldr	r3, [pc, #104]	; (80085cc <setFrequency+0x1f4>)
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	4a25      	ldr	r2, [pc, #148]	; (80085fc <setFrequency+0x224>)
 8008566:	2101      	movs	r1, #1
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff f8b7 	bl	80076dc <timReconfigureForGenerator>
			//pr("%d\n\r",newinput);
			pr("%.3f\n",(float)realFreq2/(float)bufferSize2);
 800856e:	4b23      	ldr	r3, [pc, #140]	; (80085fc <setFrequency+0x224>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800857a:	4b1c      	ldr	r3, [pc, #112]	; (80085ec <setFrequency+0x214>)
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008586:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800858a:	ee16 0a90 	vmov	r0, s13
 800858e:	f7f7 ffe3 	bl	8000558 <__aeabi_f2d>
 8008592:	4603      	mov	r3, r0
 8008594:	460c      	mov	r4, r1
 8008596:	461a      	mov	r2, r3
 8008598:	4623      	mov	r3, r4
 800859a:	4811      	ldr	r0, [pc, #68]	; (80085e0 <setFrequency+0x208>)
 800859c:	f7ff fd2a 	bl	8007ff4 <pr>
		}
	}
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd90      	pop	{r4, r7, pc}
 80085a8:	20000248 	.word	0x20000248
 80085ac:	20000274 	.word	0x20000274
 80085b0:	20000249 	.word	0x20000249
 80085b4:	20000263 	.word	0x20000263
 80085b8:	200003b0 	.word	0x200003b0
 80085bc:	2000e7ac 	.word	0x2000e7ac
 80085c0:	20000006 	.word	0x20000006
 80085c4:	20000018 	.word	0x20000018
 80085c8:	20000240 	.word	0x20000240
 80085cc:	2000e744 	.word	0x2000e744
 80085d0:	20000265 	.word	0x20000265
 80085d4:	20000266 	.word	0x20000266
 80085d8:	20000408 	.word	0x20000408
 80085dc:	20002750 	.word	0x20002750
 80085e0:	0800bf48 	.word	0x0800bf48
 80085e4:	20000264 	.word	0x20000264
 80085e8:	2000e7ec 	.word	0x2000e7ec
 80085ec:	20000008 	.word	0x20000008
 80085f0:	20000020 	.word	0x20000020
 80085f4:	20000242 	.word	0x20000242
 80085f8:	2000072c 	.word	0x2000072c
 80085fc:	20002730 	.word	0x20002730

08008600 <setStep>:
void setStep(int newinput){
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
	if(step==1 && command==0 && newinput > 0){
 8008608:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <setStep+0x78>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b01      	cmp	r3, #1
 8008610:	d12d      	bne.n	800866e <setStep+0x6e>
 8008612:	4b1a      	ldr	r3, [pc, #104]	; (800867c <setStep+0x7c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d129      	bne.n	800866e <setStep+0x6e>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dd26      	ble.n	800866e <setStep+0x6e>
		step=0;
 8008620:	4b15      	ldr	r3, [pc, #84]	; (8008678 <setStep+0x78>)
 8008622:	2200      	movs	r2, #0
 8008624:	701a      	strb	r2, [r3, #0]
		if(channel==0){
 8008626:	4b16      	ldr	r3, [pc, #88]	; (8008680 <setStep+0x80>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10c      	bne.n	800864a <setStep+0x4a>
			fstep0 = newinput*bufferSize1;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	b29a      	uxth	r2, r3
 8008634:	4b13      	ldr	r3, [pc, #76]	; (8008684 <setStep+0x84>)
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	fb12 f303 	smulbb	r3, r2, r3
 800863c:	b29a      	uxth	r2, r3
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <setStep+0x88>)
 8008640:	801a      	strh	r2, [r3, #0]
			pr("%d\n\r",newinput);
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4811      	ldr	r0, [pc, #68]	; (800868c <setStep+0x8c>)
 8008646:	f7ff fcd5 	bl	8007ff4 <pr>
		}
		if(channel==1){
 800864a:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <setStep+0x80>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b01      	cmp	r3, #1
 8008652:	d10c      	bne.n	800866e <setStep+0x6e>
			fstep1 = newinput*bufferSize2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	b29a      	uxth	r2, r3
 8008658:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <setStep+0x90>)
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	fb12 f303 	smulbb	r3, r2, r3
 8008660:	b29a      	uxth	r2, r3
 8008662:	4b0c      	ldr	r3, [pc, #48]	; (8008694 <setStep+0x94>)
 8008664:	801a      	strh	r2, [r3, #0]
			pr("%d\n\r",newinput);
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	4808      	ldr	r0, [pc, #32]	; (800868c <setStep+0x8c>)
 800866a:	f7ff fcc3 	bl	8007ff4 <pr>
		}
	}
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000247 	.word	0x20000247
 800867c:	20000274 	.word	0x20000274
 8008680:	20000249 	.word	0x20000249
 8008684:	20000006 	.word	0x20000006
 8008688:	2000000c 	.word	0x2000000c
 800868c:	0800bf28 	.word	0x0800bf28
 8008690:	20000008 	.word	0x20000008
 8008694:	2000000e 	.word	0x2000000e

08008698 <setSampleRate>:
void setSampleRate(int newinput){
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	if(samplerate==1 && command==0 && newinput > 0){
 80086a0:	4b0d      	ldr	r3, [pc, #52]	; (80086d8 <setSampleRate+0x40>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d112      	bne.n	80086d0 <setSampleRate+0x38>
 80086aa:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <setSampleRate+0x44>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10e      	bne.n	80086d0 <setSampleRate+0x38>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd0b      	ble.n	80086d0 <setSampleRate+0x38>
		samplerate=0;
 80086b8:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <setSampleRate+0x40>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
		adcsamples = newinput;
 80086be:	4a08      	ldr	r2, [pc, #32]	; (80086e0 <setSampleRate+0x48>)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6013      	str	r3, [r2, #0]
		pr("%d\n\r",adcsamples);
 80086c4:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <setSampleRate+0x48>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4619      	mov	r1, r3
 80086ca:	4806      	ldr	r0, [pc, #24]	; (80086e4 <setSampleRate+0x4c>)
 80086cc:	f7ff fc92 	bl	8007ff4 <pr>
	}
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	2000026e 	.word	0x2000026e
 80086dc:	20000274 	.word	0x20000274
 80086e0:	20000030 	.word	0x20000030
 80086e4:	0800bf28 	.word	0x0800bf28

080086e8 <setOffset>:
void setOffset(int newinput){
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	af02      	add	r7, sp, #8
 80086ee:	6078      	str	r0, [r7, #4]
	if(off==1 && command==0 && newinput > 0){
 80086f0:	4b53      	ldr	r3, [pc, #332]	; (8008840 <setOffset+0x158>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	f040 809d 	bne.w	8008836 <setOffset+0x14e>
 80086fc:	4b51      	ldr	r3, [pc, #324]	; (8008844 <setOffset+0x15c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f040 8098 	bne.w	8008836 <setOffset+0x14e>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f340 8094 	ble.w	8008836 <setOffset+0x14e>
		off=0;
 800870e:	4b4c      	ldr	r3, [pc, #304]	; (8008840 <setOffset+0x158>)
 8008710:	2200      	movs	r2, #0
 8008712:	701a      	strb	r2, [r3, #0]
		if(newinput ==5000)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f241 3288 	movw	r2, #5000	; 0x1388
 800871a:	4293      	cmp	r3, r2
 800871c:	d101      	bne.n	8008722 <setOffset+0x3a>
			newinput =0;
 800871e:	2300      	movs	r3, #0
 8008720:	607b      	str	r3, [r7, #4]
		if(channel==0){
 8008722:	4b49      	ldr	r3, [pc, #292]	; (8008848 <setOffset+0x160>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d13f      	bne.n	80087ac <setOffset+0xc4>
			offset0 = newinput;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	b29a      	uxth	r2, r3
 8008730:	4b46      	ldr	r3, [pc, #280]	; (800884c <setOffset+0x164>)
 8008732:	801a      	strh	r2, [r3, #0]
			uint32_t temparr = htim6.Instance->ARR;
 8008734:	4b46      	ldr	r3, [pc, #280]	; (8008850 <setOffset+0x168>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	617b      	str	r3, [r7, #20]
			uint32_t temppsc = htim6.Instance->PSC;
 800873c:	4b44      	ldr	r3, [pc, #272]	; (8008850 <setOffset+0x168>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	613b      	str	r3, [r7, #16]
			htim6.Instance->ARR = 3999;
 8008744:	4b42      	ldr	r3, [pc, #264]	; (8008850 <setOffset+0x168>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f640 729f 	movw	r2, #3999	; 0xf9f
 800874c:	62da      	str	r2, [r3, #44]	; 0x2c
			htim6.Instance->PSC = 9;
 800874e:	4b40      	ldr	r3, [pc, #256]	; (8008850 <setOffset+0x168>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2209      	movs	r2, #9
 8008754:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
 8008756:	2100      	movs	r1, #0
 8008758:	483e      	ldr	r0, [pc, #248]	; (8008854 <setOffset+0x16c>)
 800875a:	f7fa face 	bl	8002cfa <HAL_DAC_Stop_DMA>
			initBuffers(bufferSize1, scale0, offset0);
 800875e:	4b3e      	ldr	r3, [pc, #248]	; (8008858 <setOffset+0x170>)
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	4b3d      	ldr	r3, [pc, #244]	; (800885c <setOffset+0x174>)
 8008766:	ed93 7b00 	vldr	d7, [r3]
 800876a:	4b38      	ldr	r3, [pc, #224]	; (800884c <setOffset+0x164>)
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	4619      	mov	r1, r3
 8008770:	eeb0 0a47 	vmov.f32	s0, s14
 8008774:	eef0 0a67 	vmov.f32	s1, s15
 8008778:	4610      	mov	r0, r2
 800877a:	f7ff faa1 	bl	8007cc0 <initBuffers>
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, (uint32_t*)genBuffer1,bufferSize1, DAC_ALIGN_12B_R);
 800877e:	4b36      	ldr	r3, [pc, #216]	; (8008858 <setOffset+0x170>)
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	2300      	movs	r3, #0
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	4613      	mov	r3, r2
 800878a:	4a35      	ldr	r2, [pc, #212]	; (8008860 <setOffset+0x178>)
 800878c:	2100      	movs	r1, #0
 800878e:	4831      	ldr	r0, [pc, #196]	; (8008854 <setOffset+0x16c>)
 8008790:	f7fa fb2c 	bl	8002dec <HAL_DAC_Start_DMA>
			htim6.Instance->ARR = temparr;
 8008794:	4b2e      	ldr	r3, [pc, #184]	; (8008850 <setOffset+0x168>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	62da      	str	r2, [r3, #44]	; 0x2c
			htim6.Instance->PSC = temppsc;
 800879c:	4b2c      	ldr	r3, [pc, #176]	; (8008850 <setOffset+0x168>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	629a      	str	r2, [r3, #40]	; 0x28
			pr("%d\n\r",newinput);
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	482f      	ldr	r0, [pc, #188]	; (8008864 <setOffset+0x17c>)
 80087a8:	f7ff fc24 	bl	8007ff4 <pr>
		}
		if(channel==1){
 80087ac:	4b26      	ldr	r3, [pc, #152]	; (8008848 <setOffset+0x160>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d13f      	bne.n	8008836 <setOffset+0x14e>
			offset1 = newinput;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	4b2b      	ldr	r3, [pc, #172]	; (8008868 <setOffset+0x180>)
 80087bc:	801a      	strh	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_2);
 80087be:	2110      	movs	r1, #16
 80087c0:	4824      	ldr	r0, [pc, #144]	; (8008854 <setOffset+0x16c>)
 80087c2:	f7fa fa9a 	bl	8002cfa <HAL_DAC_Stop_DMA>
			uint32_t temparr = htim7.Instance->ARR;
 80087c6:	4b29      	ldr	r3, [pc, #164]	; (800886c <setOffset+0x184>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	60fb      	str	r3, [r7, #12]
			uint32_t temppsc = htim7.Instance->PSC;
 80087ce:	4b27      	ldr	r3, [pc, #156]	; (800886c <setOffset+0x184>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	60bb      	str	r3, [r7, #8]
			htim7.Instance->ARR = 3999;
 80087d6:	4b25      	ldr	r3, [pc, #148]	; (800886c <setOffset+0x184>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f640 729f 	movw	r2, #3999	; 0xf9f
 80087de:	62da      	str	r2, [r3, #44]	; 0x2c
			htim7.Instance->PSC = 9;
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <setOffset+0x184>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2209      	movs	r2, #9
 80087e6:	629a      	str	r2, [r3, #40]	; 0x28
			initBuffers(bufferSize2, scale1, offset1);
 80087e8:	4b21      	ldr	r3, [pc, #132]	; (8008870 <setOffset+0x188>)
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	4b21      	ldr	r3, [pc, #132]	; (8008874 <setOffset+0x18c>)
 80087f0:	ed93 7b00 	vldr	d7, [r3]
 80087f4:	4b1c      	ldr	r3, [pc, #112]	; (8008868 <setOffset+0x180>)
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	4619      	mov	r1, r3
 80087fa:	eeb0 0a47 	vmov.f32	s0, s14
 80087fe:	eef0 0a67 	vmov.f32	s1, s15
 8008802:	4610      	mov	r0, r2
 8008804:	f7ff fa5c 	bl	8007cc0 <initBuffers>
			HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2, (uint32_t*)genBuffer2,bufferSize2, DAC_ALIGN_12B_R);
 8008808:	4b19      	ldr	r3, [pc, #100]	; (8008870 <setOffset+0x188>)
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	461a      	mov	r2, r3
 800880e:	2300      	movs	r3, #0
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	4613      	mov	r3, r2
 8008814:	4a18      	ldr	r2, [pc, #96]	; (8008878 <setOffset+0x190>)
 8008816:	2110      	movs	r1, #16
 8008818:	480e      	ldr	r0, [pc, #56]	; (8008854 <setOffset+0x16c>)
 800881a:	f7fa fae7 	bl	8002dec <HAL_DAC_Start_DMA>
			htim7.Instance->ARR = temparr;
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <setOffset+0x184>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	62da      	str	r2, [r3, #44]	; 0x2c
			htim7.Instance->PSC = temppsc;
 8008826:	4b11      	ldr	r3, [pc, #68]	; (800886c <setOffset+0x184>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	629a      	str	r2, [r3, #40]	; 0x28
			pr("%d\n\r",newinput);
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	480c      	ldr	r0, [pc, #48]	; (8008864 <setOffset+0x17c>)
 8008832:	f7ff fbdf 	bl	8007ff4 <pr>
		}
	}
}
 8008836:	bf00      	nop
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000268 	.word	0x20000268
 8008844:	20000274 	.word	0x20000274
 8008848:	20000249 	.word	0x20000249
 800884c:	20000240 	.word	0x20000240
 8008850:	2000e7ac 	.word	0x2000e7ac
 8008854:	200003b0 	.word	0x200003b0
 8008858:	20000006 	.word	0x20000006
 800885c:	20000018 	.word	0x20000018
 8008860:	20002750 	.word	0x20002750
 8008864:	0800bf28 	.word	0x0800bf28
 8008868:	20000242 	.word	0x20000242
 800886c:	2000e7ec 	.word	0x2000e7ec
 8008870:	20000008 	.word	0x20000008
 8008874:	20000020 	.word	0x20000020
 8008878:	2000072c 	.word	0x2000072c

0800887c <sweepUpdate>:
void sweepUpdate(){
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
	if(sweep0==1){
 8008880:	4b29      	ldr	r3, [pc, #164]	; (8008928 <sweepUpdate+0xac>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b01      	cmp	r3, #1
 8008888:	d121      	bne.n	80088ce <sweepUpdate+0x52>
		htim6.Instance->ARR = pafa0[sweepPathPos0].autoReloadReg;
 800888a:	4b28      	ldr	r3, [pc, #160]	; (800892c <sweepUpdate+0xb0>)
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	4a28      	ldr	r2, [pc, #160]	; (8008930 <sweepUpdate+0xb4>)
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	4413      	add	r3, r2
 8008894:	885a      	ldrh	r2, [r3, #2]
 8008896:	4b27      	ldr	r3, [pc, #156]	; (8008934 <sweepUpdate+0xb8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim6.Instance->PSC = pafa0[sweepPathPos0].prescaler;
 800889c:	4b23      	ldr	r3, [pc, #140]	; (800892c <sweepUpdate+0xb0>)
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	4b23      	ldr	r3, [pc, #140]	; (8008930 <sweepUpdate+0xb4>)
 80088a4:	f833 2032 	ldrh.w	r2, [r3, r2, lsl #3]
 80088a8:	4b22      	ldr	r3, [pc, #136]	; (8008934 <sweepUpdate+0xb8>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	629a      	str	r2, [r3, #40]	; 0x28
		if(sweepPathPos0stop>sweepPathPos0){
 80088ae:	4b22      	ldr	r3, [pc, #136]	; (8008938 <sweepUpdate+0xbc>)
 80088b0:	881a      	ldrh	r2, [r3, #0]
 80088b2:	4b1e      	ldr	r3, [pc, #120]	; (800892c <sweepUpdate+0xb0>)
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d906      	bls.n	80088c8 <sweepUpdate+0x4c>
			sweepPathPos0++;
 80088ba:	4b1c      	ldr	r3, [pc, #112]	; (800892c <sweepUpdate+0xb0>)
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	3301      	adds	r3, #1
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	4b1a      	ldr	r3, [pc, #104]	; (800892c <sweepUpdate+0xb0>)
 80088c4:	801a      	strh	r2, [r3, #0]
 80088c6:	e002      	b.n	80088ce <sweepUpdate+0x52>
		}else{
			sweepPathPos0=0;
 80088c8:	4b18      	ldr	r3, [pc, #96]	; (800892c <sweepUpdate+0xb0>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	801a      	strh	r2, [r3, #0]
		}
	}
	if(sweep1==1){
 80088ce:	4b1b      	ldr	r3, [pc, #108]	; (800893c <sweepUpdate+0xc0>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d121      	bne.n	800891c <sweepUpdate+0xa0>
		htim7.Instance->ARR = pafa1[sweepPathPos1].autoReloadReg;
 80088d8:	4b19      	ldr	r3, [pc, #100]	; (8008940 <sweepUpdate+0xc4>)
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	4a19      	ldr	r2, [pc, #100]	; (8008944 <sweepUpdate+0xc8>)
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	4413      	add	r3, r2
 80088e2:	885a      	ldrh	r2, [r3, #2]
 80088e4:	4b18      	ldr	r3, [pc, #96]	; (8008948 <sweepUpdate+0xcc>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	62da      	str	r2, [r3, #44]	; 0x2c
		htim7.Instance->PSC = pafa1[sweepPathPos1].prescaler;
 80088ea:	4b15      	ldr	r3, [pc, #84]	; (8008940 <sweepUpdate+0xc4>)
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	4b14      	ldr	r3, [pc, #80]	; (8008944 <sweepUpdate+0xc8>)
 80088f2:	f833 2032 	ldrh.w	r2, [r3, r2, lsl #3]
 80088f6:	4b14      	ldr	r3, [pc, #80]	; (8008948 <sweepUpdate+0xcc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	629a      	str	r2, [r3, #40]	; 0x28
		if(sweepPathPos1stop>sweepPathPos1){
 80088fc:	4b13      	ldr	r3, [pc, #76]	; (800894c <sweepUpdate+0xd0>)
 80088fe:	881a      	ldrh	r2, [r3, #0]
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <sweepUpdate+0xc4>)
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d906      	bls.n	8008916 <sweepUpdate+0x9a>
			sweepPathPos1++;
 8008908:	4b0d      	ldr	r3, [pc, #52]	; (8008940 <sweepUpdate+0xc4>)
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <sweepUpdate+0xc4>)
 8008912:	801a      	strh	r2, [r3, #0]
		}else{
			sweepPathPos1=0;
		}
	}
}
 8008914:	e002      	b.n	800891c <sweepUpdate+0xa0>
			sweepPathPos1=0;
 8008916:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <sweepUpdate+0xc4>)
 8008918:	2200      	movs	r2, #0
 800891a:	801a      	strh	r2, [r3, #0]
}
 800891c:	bf00      	nop
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	20000263 	.word	0x20000263
 800892c:	2000023c 	.word	0x2000023c
 8008930:	2000040c 	.word	0x2000040c
 8008934:	2000e7ac 	.word	0x2000e7ac
 8008938:	20000010 	.word	0x20000010
 800893c:	20000264 	.word	0x20000264
 8008940:	2000023e 	.word	0x2000023e
 8008944:	20004750 	.word	0x20004750
 8008948:	2000e7ec 	.word	0x2000e7ec
 800894c:	20000012 	.word	0x20000012

08008950 <toggleSweep>:

void toggleSweep(){
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af02      	add	r7, sp, #8
	if(togglesweep==1){
 8008956:	4b2d      	ldr	r3, [pc, #180]	; (8008a0c <toggleSweep+0xbc>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b01      	cmp	r3, #1
 800895e:	d152      	bne.n	8008a06 <toggleSweep+0xb6>
		togglesweep=0;
 8008960:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <toggleSweep+0xbc>)
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
		if(channel==0){
 8008966:	4b2a      	ldr	r3, [pc, #168]	; (8008a10 <toggleSweep+0xc0>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d122      	bne.n	80089b6 <toggleSweep+0x66>
			if(sweep0==0){
 8008970:	4b28      	ldr	r3, [pc, #160]	; (8008a14 <toggleSweep+0xc4>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d115      	bne.n	80089a6 <toggleSweep+0x56>

				sweepPathPos0=0;
 800897a:	4b27      	ldr	r3, [pc, #156]	; (8008a18 <toggleSweep+0xc8>)
 800897c:	2200      	movs	r2, #0
 800897e:	801a      	strh	r2, [r3, #0]
				sweepPathPos0stop=setPath(sweepFreq[0], sweepFreq[1], fstep0, 0, 0);
 8008980:	4b26      	ldr	r3, [pc, #152]	; (8008a1c <toggleSweep+0xcc>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	4b25      	ldr	r3, [pc, #148]	; (8008a1c <toggleSweep+0xcc>)
 8008986:	6859      	ldr	r1, [r3, #4]
 8008988:	4b25      	ldr	r3, [pc, #148]	; (8008a20 <toggleSweep+0xd0>)
 800898a:	881a      	ldrh	r2, [r3, #0]
 800898c:	2300      	movs	r3, #0
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	2300      	movs	r3, #0
 8008992:	f7fe ff47 	bl	8007824 <setPath>
 8008996:	4603      	mov	r3, r0
 8008998:	b29a      	uxth	r2, r3
 800899a:	4b22      	ldr	r3, [pc, #136]	; (8008a24 <toggleSweep+0xd4>)
 800899c:	801a      	strh	r2, [r3, #0]
				sweep0=1;
 800899e:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <toggleSweep+0xc4>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	e007      	b.n	80089b6 <toggleSweep+0x66>
			}
			else if(sweep0==1)
 80089a6:	4b1b      	ldr	r3, [pc, #108]	; (8008a14 <toggleSweep+0xc4>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d102      	bne.n	80089b6 <toggleSweep+0x66>
				sweep0=0;
 80089b0:	4b18      	ldr	r3, [pc, #96]	; (8008a14 <toggleSweep+0xc4>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
		}
		if(channel==1){
 80089b6:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <toggleSweep+0xc0>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d122      	bne.n	8008a06 <toggleSweep+0xb6>
			if(sweep1==0){
 80089c0:	4b19      	ldr	r3, [pc, #100]	; (8008a28 <toggleSweep+0xd8>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d115      	bne.n	80089f6 <toggleSweep+0xa6>

				sweepPathPos1=0;
 80089ca:	4b18      	ldr	r3, [pc, #96]	; (8008a2c <toggleSweep+0xdc>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	801a      	strh	r2, [r3, #0]
				sweepPathPos1stop=setPath(sweepFreq[2], sweepFreq[3], fstep1, 0, 1);
 80089d0:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <toggleSweep+0xcc>)
 80089d2:	6898      	ldr	r0, [r3, #8]
 80089d4:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <toggleSweep+0xcc>)
 80089d6:	68d9      	ldr	r1, [r3, #12]
 80089d8:	4b15      	ldr	r3, [pc, #84]	; (8008a30 <toggleSweep+0xe0>)
 80089da:	881a      	ldrh	r2, [r3, #0]
 80089dc:	2301      	movs	r3, #1
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	2300      	movs	r3, #0
 80089e2:	f7fe ff1f 	bl	8007824 <setPath>
 80089e6:	4603      	mov	r3, r0
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	4b12      	ldr	r3, [pc, #72]	; (8008a34 <toggleSweep+0xe4>)
 80089ec:	801a      	strh	r2, [r3, #0]
				sweep1=1;
 80089ee:	4b0e      	ldr	r3, [pc, #56]	; (8008a28 <toggleSweep+0xd8>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	701a      	strb	r2, [r3, #0]
			}
			else if(sweep1==1)
				sweep1=0;
		}
	}
}
 80089f4:	e007      	b.n	8008a06 <toggleSweep+0xb6>
			else if(sweep1==1)
 80089f6:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <toggleSweep+0xd8>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d102      	bne.n	8008a06 <toggleSweep+0xb6>
				sweep1=0;
 8008a00:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <toggleSweep+0xd8>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	701a      	strb	r2, [r3, #0]
}
 8008a06:	bf00      	nop
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20000262 	.word	0x20000262
 8008a10:	20000249 	.word	0x20000249
 8008a14:	20000263 	.word	0x20000263
 8008a18:	2000023c 	.word	0x2000023c
 8008a1c:	2000e74c 	.word	0x2000e74c
 8008a20:	2000000c 	.word	0x2000000c
 8008a24:	20000010 	.word	0x20000010
 8008a28:	20000264 	.word	0x20000264
 8008a2c:	2000023e 	.word	0x2000023e
 8008a30:	2000000e 	.word	0x2000000e
 8008a34:	20000012 	.word	0x20000012

08008a38 <compare_strings>:
int compare_strings(char a[], char b[])
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
   int c = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]

   while (a[c] == b[c]) {
 8008a46:	e00e      	b.n	8008a66 <compare_strings+0x2e>
      if (a[c] == '\n' || b[c] == '\n')
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b0a      	cmp	r3, #10
 8008a52:	d012      	beq.n	8008a7a <compare_strings+0x42>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	4413      	add	r3, r2
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b0a      	cmp	r3, #10
 8008a5e:	d00c      	beq.n	8008a7a <compare_strings+0x42>
         break;
      c++;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3301      	adds	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]
   while (a[c] == b[c]) {
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	440b      	add	r3, r1
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d0e6      	beq.n	8008a48 <compare_strings+0x10>
   }

   if (a[c] == '\n' && b[c] == '\n')
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b0a      	cmp	r3, #10
 8008a84:	d107      	bne.n	8008a96 <compare_strings+0x5e>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b0a      	cmp	r3, #10
 8008a90:	d101      	bne.n	8008a96 <compare_strings+0x5e>
      return (0);
 8008a92:	2300      	movs	r3, #0
 8008a94:	e001      	b.n	8008a9a <compare_strings+0x62>
   else
      return (-1);
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <getRequest>:
int getRequest(){
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b0a4      	sub	sp, #144	; 0x90
 8008aac:	af00      	add	r7, sp, #0
	char buf1 [5] = {'I','D','N','?','\n'};
 8008aae:	4ab4      	ldr	r2, [pc, #720]	; (8008d80 <getRequest+0x2d8>)
 8008ab0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ab8:	6018      	str	r0, [r3, #0]
 8008aba:	3304      	adds	r3, #4
 8008abc:	7019      	strb	r1, [r3, #0]
	char buf2 [5] = {'V','E','R','?','\n'};
 8008abe:	4ab1      	ldr	r2, [pc, #708]	; (8008d84 <getRequest+0x2dc>)
 8008ac0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ac8:	6018      	str	r0, [r3, #0]
 8008aca:	3304      	adds	r3, #4
 8008acc:	7019      	strb	r1, [r3, #0]
	char buf3 [5] = {'F','R','Q','?','\n'};
 8008ace:	4aae      	ldr	r2, [pc, #696]	; (8008d88 <getRequest+0x2e0>)
 8008ad0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ad8:	6018      	str	r0, [r3, #0]
 8008ada:	3304      	adds	r3, #4
 8008adc:	7019      	strb	r1, [r3, #0]
	char buf4 [5] = {'F','R','Q','!','\n'};
 8008ade:	4aab      	ldr	r2, [pc, #684]	; (8008d8c <getRequest+0x2e4>)
 8008ae0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ae8:	6018      	str	r0, [r3, #0]
 8008aea:	3304      	adds	r3, #4
 8008aec:	7019      	strb	r1, [r3, #0]
	char buf5 [6] = {'S','T','A','R', 'T','\n'};
 8008aee:	4aa8      	ldr	r2, [pc, #672]	; (8008d90 <getRequest+0x2e8>)
 8008af0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008af8:	6018      	str	r0, [r3, #0]
 8008afa:	3304      	adds	r3, #4
 8008afc:	8019      	strh	r1, [r3, #0]
	char buf6 [5] = {'S','T','O','P','\n'};
 8008afe:	4aa5      	ldr	r2, [pc, #660]	; (8008d94 <getRequest+0x2ec>)
 8008b00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b08:	6018      	str	r0, [r3, #0]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	7019      	strb	r1, [r3, #0]
	char buf7 [2] = {'0','\n'};
 8008b0e:	4ba2      	ldr	r3, [pc, #648]	; (8008d98 <getRequest+0x2f0>)
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	char buf8 [2] = {'1','\n'};
 8008b16:	4ba1      	ldr	r3, [pc, #644]	; (8008d9c <getRequest+0x2f4>)
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	char buf9 [5] = {'S','W','E','P','\n'};
 8008b1e:	4aa0      	ldr	r2, [pc, #640]	; (8008da0 <getRequest+0x2f8>)
 8008b20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b28:	6018      	str	r0, [r3, #0]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	7019      	strb	r1, [r3, #0]
	char buf10 [2] = {'D','\n'};
 8008b2e:	4b9d      	ldr	r3, [pc, #628]	; (8008da4 <getRequest+0x2fc>)
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	char buf11 [2] = {'U','\n'};
 8008b36:	4b9c      	ldr	r3, [pc, #624]	; (8008da8 <getRequest+0x300>)
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	char buf12 [6] = {'S','W','E','P','S','\n'};
 8008b3e:	4a9b      	ldr	r2, [pc, #620]	; (8008dac <getRequest+0x304>)
 8008b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b48:	6018      	str	r0, [r3, #0]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	8019      	strh	r1, [r3, #0]
	char buf13 [5] = {'S','T','E','P','\n'};
 8008b4e:	4a98      	ldr	r2, [pc, #608]	; (8008db0 <getRequest+0x308>)
 8008b50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b58:	6018      	str	r0, [r3, #0]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	7019      	strb	r1, [r3, #0]
	char buf14 [5] = {'A','M','P','L','\n'};
 8008b5e:	4a95      	ldr	r2, [pc, #596]	; (8008db4 <getRequest+0x30c>)
 8008b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b68:	6018      	str	r0, [r3, #0]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	7019      	strb	r1, [r3, #0]
	char buf15 [5] = {'O','F','F','S','\n'};
 8008b6e:	4a92      	ldr	r2, [pc, #584]	; (8008db8 <getRequest+0x310>)
 8008b70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b78:	6018      	str	r0, [r3, #0]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	7019      	strb	r1, [r3, #0]
	char buf16 [5] = {'D','A','T','A','\n'};
 8008b7e:	4a8f      	ldr	r2, [pc, #572]	; (8008dbc <getRequest+0x314>)
 8008b80:	f107 0320 	add.w	r3, r7, #32
 8008b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b88:	6018      	str	r0, [r3, #0]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	7019      	strb	r1, [r3, #0]
	char buf17 [5] = {'M','E','A','S','\n'};
 8008b8e:	4a8c      	ldr	r2, [pc, #560]	; (8008dc0 <getRequest+0x318>)
 8008b90:	f107 0318 	add.w	r3, r7, #24
 8008b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b98:	6018      	str	r0, [r3, #0]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	7019      	strb	r1, [r3, #0]
	char buf18 [5] = {'S','A','M','P','\n'};
 8008b9e:	4a89      	ldr	r2, [pc, #548]	; (8008dc4 <getRequest+0x31c>)
 8008ba0:	f107 0310 	add.w	r3, r7, #16
 8008ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ba8:	6018      	str	r0, [r3, #0]
 8008baa:	3304      	adds	r3, #4
 8008bac:	7019      	strb	r1, [r3, #0]
	char buf19 [5] = {'F','I','L','T','\n'};
 8008bae:	4a86      	ldr	r2, [pc, #536]	; (8008dc8 <getRequest+0x320>)
 8008bb0:	f107 0308 	add.w	r3, r7, #8
 8008bb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bb8:	6018      	str	r0, [r3, #0]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	7019      	strb	r1, [r3, #0]
	char buf20 [5] = {'S','I','N','S','\n'};
 8008bbe:	4a83      	ldr	r2, [pc, #524]	; (8008dcc <getRequest+0x324>)
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bc6:	6018      	str	r0, [r3, #0]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	7019      	strb	r1, [r3, #0]

	if(compare_strings(buf1,Rx_Buffer)==0){
 8008bcc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008bd0:	497f      	ldr	r1, [pc, #508]	; (8008dd0 <getRequest+0x328>)
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff ff30 	bl	8008a38 <compare_strings>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <getRequest+0x140>
		command = 0;
 8008bde:	4b7d      	ldr	r3, [pc, #500]	; (8008dd4 <getRequest+0x32c>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
		return (1);
 8008be4:	2301      	movs	r3, #1
 8008be6:	e193      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf2,Rx_Buffer)==0){
 8008be8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008bec:	4978      	ldr	r1, [pc, #480]	; (8008dd0 <getRequest+0x328>)
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff ff22 	bl	8008a38 <compare_strings>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d104      	bne.n	8008c04 <getRequest+0x15c>
		command = 0;
 8008bfa:	4b76      	ldr	r3, [pc, #472]	; (8008dd4 <getRequest+0x32c>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
		return (2);
 8008c00:	2302      	movs	r3, #2
 8008c02:	e185      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf3,Rx_Buffer)==0){
 8008c04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008c08:	4971      	ldr	r1, [pc, #452]	; (8008dd0 <getRequest+0x328>)
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff ff14 	bl	8008a38 <compare_strings>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d104      	bne.n	8008c20 <getRequest+0x178>
		command = 0;
 8008c16:	4b6f      	ldr	r3, [pc, #444]	; (8008dd4 <getRequest+0x32c>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
		return (3);
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e177      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf4,Rx_Buffer)==0){
 8008c20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008c24:	496a      	ldr	r1, [pc, #424]	; (8008dd0 <getRequest+0x328>)
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff ff06 	bl	8008a38 <compare_strings>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d107      	bne.n	8008c42 <getRequest+0x19a>
		command = 1;
 8008c32:	4b68      	ldr	r3, [pc, #416]	; (8008dd4 <getRequest+0x32c>)
 8008c34:	2201      	movs	r2, #1
 8008c36:	601a      	str	r2, [r3, #0]
		freq=1;
 8008c38:	4b67      	ldr	r3, [pc, #412]	; (8008dd8 <getRequest+0x330>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	701a      	strb	r2, [r3, #0]
		return (4);
 8008c3e:	2304      	movs	r3, #4
 8008c40:	e166      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf5,Rx_Buffer)==0){
 8008c42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008c46:	4962      	ldr	r1, [pc, #392]	; (8008dd0 <getRequest+0x328>)
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fef5 	bl	8008a38 <compare_strings>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d107      	bne.n	8008c64 <getRequest+0x1bc>
		command = 1;
 8008c54:	4b5f      	ldr	r3, [pc, #380]	; (8008dd4 <getRequest+0x32c>)
 8008c56:	2201      	movs	r2, #1
 8008c58:	601a      	str	r2, [r3, #0]
		start = 1;
 8008c5a:	4b60      	ldr	r3, [pc, #384]	; (8008ddc <getRequest+0x334>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	701a      	strb	r2, [r3, #0]
		return (5);
 8008c60:	2305      	movs	r3, #5
 8008c62:	e155      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf6,Rx_Buffer)==0){
 8008c64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008c68:	4959      	ldr	r1, [pc, #356]	; (8008dd0 <getRequest+0x328>)
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff fee4 	bl	8008a38 <compare_strings>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d107      	bne.n	8008c86 <getRequest+0x1de>
		command = 1;
 8008c76:	4b57      	ldr	r3, [pc, #348]	; (8008dd4 <getRequest+0x32c>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]
		stop= 1;
 8008c7c:	4b58      	ldr	r3, [pc, #352]	; (8008de0 <getRequest+0x338>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	701a      	strb	r2, [r3, #0]
		return (6);
 8008c82:	2306      	movs	r3, #6
 8008c84:	e144      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf7,Rx_Buffer)==0 && command==1){
 8008c86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008c8a:	4951      	ldr	r1, [pc, #324]	; (8008dd0 <getRequest+0x328>)
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fed3 	bl	8008a38 <compare_strings>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10b      	bne.n	8008cb0 <getRequest+0x208>
 8008c98:	4b4e      	ldr	r3, [pc, #312]	; (8008dd4 <getRequest+0x32c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d107      	bne.n	8008cb0 <getRequest+0x208>
		command = 0;
 8008ca0:	4b4c      	ldr	r3, [pc, #304]	; (8008dd4 <getRequest+0x32c>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
		channel=0;
 8008ca6:	4b4f      	ldr	r3, [pc, #316]	; (8008de4 <getRequest+0x33c>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]
		return (7);
 8008cac:	2307      	movs	r3, #7
 8008cae:	e12f      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf8,Rx_Buffer)==0 && command==1){
 8008cb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cb4:	4946      	ldr	r1, [pc, #280]	; (8008dd0 <getRequest+0x328>)
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff febe 	bl	8008a38 <compare_strings>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10b      	bne.n	8008cda <getRequest+0x232>
 8008cc2:	4b44      	ldr	r3, [pc, #272]	; (8008dd4 <getRequest+0x32c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d107      	bne.n	8008cda <getRequest+0x232>
		command = 0;
 8008cca:	4b42      	ldr	r3, [pc, #264]	; (8008dd4 <getRequest+0x32c>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
		channel=1;
 8008cd0:	4b44      	ldr	r3, [pc, #272]	; (8008de4 <getRequest+0x33c>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	701a      	strb	r2, [r3, #0]
		return (8);
 8008cd6:	2308      	movs	r3, #8
 8008cd8:	e11a      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf9,Rx_Buffer)==0){
 8008cda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008cde:	493c      	ldr	r1, [pc, #240]	; (8008dd0 <getRequest+0x328>)
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff fea9 	bl	8008a38 <compare_strings>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d107      	bne.n	8008cfc <getRequest+0x254>
		command = 1;
 8008cec:	4b39      	ldr	r3, [pc, #228]	; (8008dd4 <getRequest+0x32c>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]
		sweep = 1;
 8008cf2:	4b3d      	ldr	r3, [pc, #244]	; (8008de8 <getRequest+0x340>)
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	701a      	strb	r2, [r3, #0]
		return (9);
 8008cf8:	2309      	movs	r3, #9
 8008cfa:	e109      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf10,Rx_Buffer)==0 && sweep ==1){
 8008cfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d00:	4933      	ldr	r1, [pc, #204]	; (8008dd0 <getRequest+0x328>)
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff fe98 	bl	8008a38 <compare_strings>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10c      	bne.n	8008d28 <getRequest+0x280>
 8008d0e:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <getRequest+0x340>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d107      	bne.n	8008d28 <getRequest+0x280>
		command = 0;
 8008d18:	4b2e      	ldr	r3, [pc, #184]	; (8008dd4 <getRequest+0x32c>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
		upDown=0;
 8008d1e:	4b33      	ldr	r3, [pc, #204]	; (8008dec <getRequest+0x344>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
		return (7);
 8008d24:	2307      	movs	r3, #7
 8008d26:	e0f3      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf11,Rx_Buffer)==0  && sweep ==1){
 8008d28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d2c:	4928      	ldr	r1, [pc, #160]	; (8008dd0 <getRequest+0x328>)
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7ff fe82 	bl	8008a38 <compare_strings>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10c      	bne.n	8008d54 <getRequest+0x2ac>
 8008d3a:	4b2b      	ldr	r3, [pc, #172]	; (8008de8 <getRequest+0x340>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d107      	bne.n	8008d54 <getRequest+0x2ac>
		command = 0;
 8008d44:	4b23      	ldr	r3, [pc, #140]	; (8008dd4 <getRequest+0x32c>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
		upDown=1;
 8008d4a:	4b28      	ldr	r3, [pc, #160]	; (8008dec <getRequest+0x344>)
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	701a      	strb	r2, [r3, #0]
		return (8);
 8008d50:	2308      	movs	r3, #8
 8008d52:	e0dd      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf12,Rx_Buffer)==0 ){
 8008d54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d58:	491d      	ldr	r1, [pc, #116]	; (8008dd0 <getRequest+0x328>)
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff fe6c 	bl	8008a38 <compare_strings>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d146      	bne.n	8008df4 <getRequest+0x34c>
		command = 1;
 8008d66:	4b1b      	ldr	r3, [pc, #108]	; (8008dd4 <getRequest+0x32c>)
 8008d68:	2201      	movs	r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]
		if(togglesweep==0){
 8008d6c:	4b20      	ldr	r3, [pc, #128]	; (8008df0 <getRequest+0x348>)
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <getRequest+0x2d4>
			togglesweep=1;
 8008d76:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <getRequest+0x348>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
		}
		return (9);
 8008d7c:	2309      	movs	r3, #9
 8008d7e:	e0c7      	b.n	8008f10 <getRequest+0x468>
 8008d80:	0800bf50 	.word	0x0800bf50
 8008d84:	0800bf58 	.word	0x0800bf58
 8008d88:	0800bf60 	.word	0x0800bf60
 8008d8c:	0800bf68 	.word	0x0800bf68
 8008d90:	0800bf70 	.word	0x0800bf70
 8008d94:	0800bf78 	.word	0x0800bf78
 8008d98:	0800bf80 	.word	0x0800bf80
 8008d9c:	0800bf84 	.word	0x0800bf84
 8008da0:	0800bf88 	.word	0x0800bf88
 8008da4:	0800bf90 	.word	0x0800bf90
 8008da8:	0800bf94 	.word	0x0800bf94
 8008dac:	0800bf98 	.word	0x0800bf98
 8008db0:	0800bfa0 	.word	0x0800bfa0
 8008db4:	0800bfa8 	.word	0x0800bfa8
 8008db8:	0800bfb0 	.word	0x0800bfb0
 8008dbc:	0800bfb8 	.word	0x0800bfb8
 8008dc0:	0800bfc0 	.word	0x0800bfc0
 8008dc4:	0800bfc8 	.word	0x0800bfc8
 8008dc8:	0800bfd0 	.word	0x0800bfd0
 8008dcc:	0800bfd8 	.word	0x0800bfd8
 8008dd0:	2000e6b4 	.word	0x2000e6b4
 8008dd4:	20000274 	.word	0x20000274
 8008dd8:	20000248 	.word	0x20000248
 8008ddc:	20000245 	.word	0x20000245
 8008de0:	20000246 	.word	0x20000246
 8008de4:	20000249 	.word	0x20000249
 8008de8:	20000261 	.word	0x20000261
 8008dec:	20000260 	.word	0x20000260
 8008df0:	20000262 	.word	0x20000262
	}
	if(compare_strings(buf13,Rx_Buffer)==0){
 8008df4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008df8:	4947      	ldr	r1, [pc, #284]	; (8008f18 <getRequest+0x470>)
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fe1c 	bl	8008a38 <compare_strings>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d107      	bne.n	8008e16 <getRequest+0x36e>
			command = 1;
 8008e06:	4b45      	ldr	r3, [pc, #276]	; (8008f1c <getRequest+0x474>)
 8008e08:	2201      	movs	r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]
			step = 1;
 8008e0c:	4b44      	ldr	r3, [pc, #272]	; (8008f20 <getRequest+0x478>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	701a      	strb	r2, [r3, #0]
			return (10);
 8008e12:	230a      	movs	r3, #10
 8008e14:	e07c      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf14,Rx_Buffer)==0){
 8008e16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e1a:	493f      	ldr	r1, [pc, #252]	; (8008f18 <getRequest+0x470>)
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff fe0b 	bl	8008a38 <compare_strings>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d107      	bne.n	8008e38 <getRequest+0x390>
			command = 1;
 8008e28:	4b3c      	ldr	r3, [pc, #240]	; (8008f1c <getRequest+0x474>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	601a      	str	r2, [r3, #0]
			ampl = 1;
 8008e2e:	4b3d      	ldr	r3, [pc, #244]	; (8008f24 <getRequest+0x47c>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	701a      	strb	r2, [r3, #0]
			return (11);
 8008e34:	230b      	movs	r3, #11
 8008e36:	e06b      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf15,Rx_Buffer)==0){
 8008e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e3c:	4936      	ldr	r1, [pc, #216]	; (8008f18 <getRequest+0x470>)
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fdfa 	bl	8008a38 <compare_strings>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d107      	bne.n	8008e5a <getRequest+0x3b2>
			command = 1;
 8008e4a:	4b34      	ldr	r3, [pc, #208]	; (8008f1c <getRequest+0x474>)
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]
			off = 1;
 8008e50:	4b35      	ldr	r3, [pc, #212]	; (8008f28 <getRequest+0x480>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	701a      	strb	r2, [r3, #0]
			return (12);
 8008e56:	230c      	movs	r3, #12
 8008e58:	e05a      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf16,Rx_Buffer)==0){
 8008e5a:	f107 0320 	add.w	r3, r7, #32
 8008e5e:	492e      	ldr	r1, [pc, #184]	; (8008f18 <getRequest+0x470>)
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7ff fde9 	bl	8008a38 <compare_strings>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d104      	bne.n	8008e76 <getRequest+0x3ce>
			printData = 1;
 8008e6c:	4b2f      	ldr	r3, [pc, #188]	; (8008f2c <getRequest+0x484>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	701a      	strb	r2, [r3, #0]
			return (13);
 8008e72:	230d      	movs	r3, #13
 8008e74:	e04c      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf17,Rx_Buffer)==0){
 8008e76:	f107 0318 	add.w	r3, r7, #24
 8008e7a:	4927      	ldr	r1, [pc, #156]	; (8008f18 <getRequest+0x470>)
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff fddb 	bl	8008a38 <compare_strings>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d104      	bne.n	8008e92 <getRequest+0x3ea>
			measure = 1;
 8008e88:	4b29      	ldr	r3, [pc, #164]	; (8008f30 <getRequest+0x488>)
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	701a      	strb	r2, [r3, #0]
			return (14);
 8008e8e:	230e      	movs	r3, #14
 8008e90:	e03e      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf18,Rx_Buffer)==0){
 8008e92:	f107 0310 	add.w	r3, r7, #16
 8008e96:	4920      	ldr	r1, [pc, #128]	; (8008f18 <getRequest+0x470>)
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fdcd 	bl	8008a38 <compare_strings>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d107      	bne.n	8008eb4 <getRequest+0x40c>
			command = 0;
 8008ea4:	4b1d      	ldr	r3, [pc, #116]	; (8008f1c <getRequest+0x474>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
			samplerate = 1;
 8008eaa:	4b22      	ldr	r3, [pc, #136]	; (8008f34 <getRequest+0x48c>)
 8008eac:	2201      	movs	r2, #1
 8008eae:	701a      	strb	r2, [r3, #0]
			return (15);
 8008eb0:	230f      	movs	r3, #15
 8008eb2:	e02d      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf19,Rx_Buffer)==0){
 8008eb4:	f107 0308 	add.w	r3, r7, #8
 8008eb8:	4917      	ldr	r1, [pc, #92]	; (8008f18 <getRequest+0x470>)
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff fdbc 	bl	8008a38 <compare_strings>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d107      	bne.n	8008ed6 <getRequest+0x42e>
			command = 0;
 8008ec6:	4b15      	ldr	r3, [pc, #84]	; (8008f1c <getRequest+0x474>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]
			setfilter = 1;
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <getRequest+0x490>)
 8008ece:	2201      	movs	r2, #1
 8008ed0:	701a      	strb	r2, [r3, #0]
			return (15);
 8008ed2:	230f      	movs	r3, #15
 8008ed4:	e01c      	b.n	8008f10 <getRequest+0x468>
	}
	if(compare_strings(buf20,Rx_Buffer)==0){
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	490f      	ldr	r1, [pc, #60]	; (8008f18 <getRequest+0x470>)
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff fdac 	bl	8008a38 <compare_strings>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d110      	bne.n	8008f08 <getRequest+0x460>
			command = 0;
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <getRequest+0x474>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
			if(sin_square==1)
 8008eec:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <getRequest+0x494>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d103      	bne.n	8008efe <getRequest+0x456>
			sin_square = 0;
 8008ef6:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <getRequest+0x494>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	e002      	b.n	8008f04 <getRequest+0x45c>
			else
			sin_square = 1;
 8008efe:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <getRequest+0x494>)
 8008f00:	2201      	movs	r2, #1
 8008f02:	701a      	strb	r2, [r3, #0]
			return (16);
 8008f04:	2310      	movs	r3, #16
 8008f06:	e003      	b.n	8008f10 <getRequest+0x468>
	}
	command = 0;
 8008f08:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <getRequest+0x474>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
	return (0);
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3790      	adds	r7, #144	; 0x90
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	2000e6b4 	.word	0x2000e6b4
 8008f1c:	20000274 	.word	0x20000274
 8008f20:	20000247 	.word	0x20000247
 8008f24:	20000267 	.word	0x20000267
 8008f28:	20000268 	.word	0x20000268
 8008f2c:	2000026c 	.word	0x2000026c
 8008f30:	2000026d 	.word	0x2000026d
 8008f34:	2000026e 	.word	0x2000026e
 8008f38:	2000026b 	.word	0x2000026b
 8008f3c:	20000029 	.word	0x20000029

08008f40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // @suppress("Name convention for function")
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
        if (huart->Instance == USART2){ // Current UART
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1b      	ldr	r2, [pc, #108]	; (8008fbc <HAL_UART_RxCpltCallback+0x7c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d130      	bne.n	8008fb4 <HAL_UART_RxCpltCallback+0x74>
		if (Rx_indx + 1 > rx_buffer_size){
 8008f52:	4b1b      	ldr	r3, [pc, #108]	; (8008fc0 <HAL_UART_RxCpltCallback+0x80>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	2b64      	cmp	r3, #100	; 0x64
 8008f5a:	dd02      	ble.n	8008f62 <HAL_UART_RxCpltCallback+0x22>
			Rx_indx = 0;
 8008f5c:	4b18      	ldr	r3, [pc, #96]	; (8008fc0 <HAL_UART_RxCpltCallback+0x80>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
		}
        if (Rx_data != 0x0A){ // If received data different from LF
 8008f62:	4b18      	ldr	r3, [pc, #96]	; (8008fc4 <HAL_UART_RxCpltCallback+0x84>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b0a      	cmp	r3, #10
 8008f68:	d00b      	beq.n	8008f82 <HAL_UART_RxCpltCallback+0x42>
        	Rx_Buffer[Rx_indx++] = Rx_data;    // Add data to Rx_Buffer
 8008f6a:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <HAL_UART_RxCpltCallback+0x80>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	b2d1      	uxtb	r1, r2
 8008f72:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <HAL_UART_RxCpltCallback+0x80>)
 8008f74:	7011      	strb	r1, [r2, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <HAL_UART_RxCpltCallback+0x84>)
 8008f7a:	7819      	ldrb	r1, [r3, #0]
 8008f7c:	4b12      	ldr	r3, [pc, #72]	; (8008fc8 <HAL_UART_RxCpltCallback+0x88>)
 8008f7e:	5499      	strb	r1, [r3, r2]
 8008f80:	e013      	b.n	8008faa <HAL_UART_RxCpltCallback+0x6a>
		}
		else {
			Rx_Buffer[Rx_indx++] = '\n';
 8008f82:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <HAL_UART_RxCpltCallback+0x80>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	b2d1      	uxtb	r1, r2
 8008f8a:	4a0d      	ldr	r2, [pc, #52]	; (8008fc0 <HAL_UART_RxCpltCallback+0x80>)
 8008f8c:	7011      	strb	r1, [r2, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4b0d      	ldr	r3, [pc, #52]	; (8008fc8 <HAL_UART_RxCpltCallback+0x88>)
 8008f92:	210a      	movs	r1, #10
 8008f94:	5499      	strb	r1, [r3, r2]
			Rx_indx = 0;
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <HAL_UART_RxCpltCallback+0x80>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
			Transfer_cplt++;//transfer complete, data is ready to read
 8008f9c:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <HAL_UART_RxCpltCallback+0x8c>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <HAL_UART_RxCpltCallback+0x8c>)
 8008fa8:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_data, 1);   //activate UART receive interrupt every time
 8008faa:	2201      	movs	r2, #1
 8008fac:	4905      	ldr	r1, [pc, #20]	; (8008fc4 <HAL_UART_RxCpltCallback+0x84>)
 8008fae:	4808      	ldr	r0, [pc, #32]	; (8008fd0 <HAL_UART_RxCpltCallback+0x90>)
 8008fb0:	f7fd f946 	bl	8006240 <HAL_UART_Receive_IT>
	}
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40004400 	.word	0x40004400
 8008fc0:	20000238 	.word	0x20000238
 8008fc4:	20002738 	.word	0x20002738
 8008fc8:	2000e6b4 	.word	0x2000e6b4
 8008fcc:	20000244 	.word	0x20000244
 8008fd0:	2000e82c 	.word	0x2000e82c

08008fd4 <changeSamplingTime>:
void changeSamplingTime(uint32_t frek){
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b08a      	sub	sp, #40	; 0x28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
	uint32_t out = ADC_SAMPLETIME_1CYCLE_5 ;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
	switch(frek){
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a38      	ldr	r2, [pc, #224]	; (80090c4 <changeSamplingTime+0xf0>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d809      	bhi.n	8008ffc <changeSamplingTime+0x28>
 8008fe8:	4a37      	ldr	r2, [pc, #220]	; (80090c8 <changeSamplingTime+0xf4>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d21d      	bcs.n	800902a <changeSamplingTime+0x56>
 8008fee:	4a37      	ldr	r2, [pc, #220]	; (80090cc <changeSamplingTime+0xf8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d817      	bhi.n	8009024 <changeSamplingTime+0x50>
 8008ff4:	4a36      	ldr	r2, [pc, #216]	; (80090d0 <changeSamplingTime+0xfc>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d211      	bcs.n	800901e <changeSamplingTime+0x4a>
 8008ffa:	e00d      	b.n	8009018 <changeSamplingTime+0x44>
 8008ffc:	4a35      	ldr	r2, [pc, #212]	; (80090d4 <changeSamplingTime+0x100>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d803      	bhi.n	800900a <changeSamplingTime+0x36>
 8009002:	4a35      	ldr	r2, [pc, #212]	; (80090d8 <changeSamplingTime+0x104>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d216      	bcs.n	8009036 <changeSamplingTime+0x62>
 8009008:	e012      	b.n	8009030 <changeSamplingTime+0x5c>
 800900a:	4a34      	ldr	r2, [pc, #208]	; (80090dc <changeSamplingTime+0x108>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d915      	bls.n	800903c <changeSamplingTime+0x68>
 8009010:	4a33      	ldr	r2, [pc, #204]	; (80090e0 <changeSamplingTime+0x10c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d818      	bhi.n	8009048 <changeSamplingTime+0x74>
 8009016:	e014      	b.n	8009042 <changeSamplingTime+0x6e>
		case 0       ... 117532: out = ADC_SAMPLETIME_601CYCLES_5;break;
 8009018:	2307      	movs	r3, #7
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
 800901c:	e017      	b.n	800904e <changeSamplingTime+0x7a>
		case 117533  ... 371984: out = ADC_SAMPLETIME_181CYCLES_5;break;
 800901e:	2306      	movs	r3, #6
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
 8009022:	e014      	b.n	800904e <changeSamplingTime+0x7a>
		case 371985  ... 975202: out = ADC_SAMPLETIME_61CYCLES_5;break;
 8009024:	2305      	movs	r3, #5
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
 8009028:	e011      	b.n	800904e <changeSamplingTime+0x7a>
		case 975203  ... 2255154:out = ADC_SAMPLETIME_19CYCLES_5;break;
 800902a:	2304      	movs	r3, #4
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
 800902e:	e00e      	b.n	800904e <changeSamplingTime+0x7a>
		case 2255155 ... 3608247:out = ADC_SAMPLETIME_7CYCLES_5;break;
 8009030:	2303      	movs	r3, #3
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
 8009034:	e00b      	b.n	800904e <changeSamplingTime+0x7a>
		case 3608248 ... 4244997:out = ADC_SAMPLETIME_4CYCLES_5;break;
 8009036:	2302      	movs	r3, #2
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
 800903a:	e008      	b.n	800904e <changeSamplingTime+0x7a>
		case 4244998 ... 4810996:out = ADC_SAMPLETIME_2CYCLES_5;break;
 800903c:	2301      	movs	r3, #1
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
 8009040:	e005      	b.n	800904e <changeSamplingTime+0x7a>
		case 4810997 ... 5154639:out = ADC_SAMPLETIME_1CYCLE_5;break;
 8009042:	2300      	movs	r3, #0
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
 8009046:	e002      	b.n	800904e <changeSamplingTime+0x7a>
		default:				 out = ADC_SAMPLETIME_1CYCLE_5;break;
 8009048:	2300      	movs	r3, #0
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
 800904c:	bf00      	nop
	}
	ADC_ChannelConfTypeDef sConfig = {0};
 800904e:	f107 030c 	add.w	r3, r7, #12
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	605a      	str	r2, [r3, #4]
 8009058:	609a      	str	r2, [r3, #8]
 800905a:	60da      	str	r2, [r3, #12]
 800905c:	611a      	str	r2, [r3, #16]
 800905e:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_7;
 8009060:	2307      	movs	r3, #7
 8009062:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8009064:	2301      	movs	r3, #1
 8009066:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009068:	2300      	movs	r3, #0
 800906a:	61bb      	str	r3, [r7, #24]
	sConfig.SamplingTime = out;
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009070:	2300      	movs	r3, #0
 8009072:	61fb      	str	r3, [r7, #28]
	sConfig.Offset = 0;
 8009074:	2300      	movs	r3, #0
 8009076:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009078:	f107 030c 	add.w	r3, r7, #12
 800907c:	4619      	mov	r1, r3
 800907e:	4819      	ldr	r0, [pc, #100]	; (80090e4 <changeSamplingTime+0x110>)
 8009080:	f7f8 ff58 	bl	8001f34 <HAL_ADC_ConfigChannel>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <changeSamplingTime+0xba>
	{
		Error_Handler();
 800908a:	f000 fb65 	bl	8009758 <Error_Handler>
	}
	sConfig.Channel = ADC_CHANNEL_6;
 800908e:	2306      	movs	r3, #6
 8009090:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8009092:	2301      	movs	r3, #1
 8009094:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009096:	2300      	movs	r3, #0
 8009098:	61bb      	str	r3, [r7, #24]
	sConfig.SamplingTime = out;
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
	sConfig.Offset = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090a6:	f107 030c 	add.w	r3, r7, #12
 80090aa:	4619      	mov	r1, r3
 80090ac:	480e      	ldr	r0, [pc, #56]	; (80090e8 <changeSamplingTime+0x114>)
 80090ae:	f7f8 ff41 	bl	8001f34 <HAL_ADC_ConfigChannel>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <changeSamplingTime+0xe8>
	{
		Error_Handler();
 80090b8:	f000 fb4e 	bl	8009758 <Error_Handler>
	}
}
 80090bc:	bf00      	nop
 80090be:	3728      	adds	r7, #40	; 0x28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	00226932 	.word	0x00226932
 80090c8:	000ee163 	.word	0x000ee163
 80090cc:	0005ad10 	.word	0x0005ad10
 80090d0:	0001cb1d 	.word	0x0001cb1d
 80090d4:	0040c605 	.word	0x0040c605
 80090d8:	00370eb8 	.word	0x00370eb8
 80090dc:	004968f4 	.word	0x004968f4
 80090e0:	004ea74f 	.word	0x004ea74f
 80090e4:	20000288 	.word	0x20000288
 80090e8:	200002d8 	.word	0x200002d8

080090ec <setADC>:
void setADC(uint32_t samplesPerPeriod){
 80090ec:	b5b0      	push	{r4, r5, r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	6078      	str	r0, [r7, #4]
	frek = (uint32_t)(realFreq1*1.0/bufferSize1);
 80090f4:	4b53      	ldr	r3, [pc, #332]	; (8009244 <setADC+0x158>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f7 fa0b 	bl	8000514 <__aeabi_ui2d>
 80090fe:	4604      	mov	r4, r0
 8009100:	460d      	mov	r5, r1
 8009102:	4b51      	ldr	r3, [pc, #324]	; (8009248 <setADC+0x15c>)
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 fa14 	bl	8000534 <__aeabi_i2d>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	f7f7 fba2 	bl	800085c <__aeabi_ddiv>
 8009118:	4603      	mov	r3, r0
 800911a:	460c      	mov	r4, r1
 800911c:	4618      	mov	r0, r3
 800911e:	4621      	mov	r1, r4
 8009120:	f7f7 fd4a 	bl	8000bb8 <__aeabi_d2uiz>
 8009124:	4602      	mov	r2, r0
 8009126:	4b49      	ldr	r3, [pc, #292]	; (800924c <setADC+0x160>)
 8009128:	601a      	str	r2, [r3, #0]
	//HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)&data,samples);
	int status;
	//MX_ADC1_Init();
//	MX_ADC2_Init();
	posun = samplesPerPeriod>>2;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	089b      	lsrs	r3, r3, #2
 800912e:	4a48      	ldr	r2, [pc, #288]	; (8009250 <setADC+0x164>)
 8009130:	6013      	str	r3, [r2, #0]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);
 8009132:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8009136:	f7fb ff85 	bl	8005044 <HAL_RCCEx_GetPeriphCLKFreq>
 800913a:	6178      	str	r0, [r7, #20]
	if(adcintcounter==0){
 800913c:	4b45      	ldr	r3, [pc, #276]	; (8009254 <setADC+0x168>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d111      	bne.n	800916a <setADC+0x7e>
		status = HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8009146:	4844      	ldr	r0, [pc, #272]	; (8009258 <setADC+0x16c>)
 8009148:	f7f8 fe0a 	bl	8001d60 <HAL_ADCEx_MultiModeStop_DMA>
 800914c:	4603      	mov	r3, r0
 800914e:	613b      	str	r3, [r7, #16]
		status = HAL_ADC_Init(&hadc1);
 8009150:	4841      	ldr	r0, [pc, #260]	; (8009258 <setADC+0x16c>)
 8009152:	f7f7 fe3d 	bl	8000dd0 <HAL_ADC_Init>
 8009156:	4603      	mov	r3, r0
 8009158:	613b      	str	r3, [r7, #16]
		status = HAL_ADC_Stop_IT(&hadc2);
 800915a:	4840      	ldr	r0, [pc, #256]	; (800925c <setADC+0x170>)
 800915c:	f7f8 f97d 	bl	800145a <HAL_ADC_Stop_IT>
 8009160:	4603      	mov	r3, r0
 8009162:	613b      	str	r3, [r7, #16]
		HAL_TIM_Base_Start(&htim15);
 8009164:	483e      	ldr	r0, [pc, #248]	; (8009260 <setADC+0x174>)
 8009166:	f7fc fb73 	bl	8005850 <HAL_TIM_Base_Start>
	}

	status = timReconfigure(&htim15,periphClock,frek*samplesPerPeriod,&realSampling,1);
 800916a:	4b38      	ldr	r3, [pc, #224]	; (800924c <setADC+0x160>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	fb02 f203 	mul.w	r2, r2, r3
 8009174:	2301      	movs	r3, #1
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	4b3a      	ldr	r3, [pc, #232]	; (8009264 <setADC+0x178>)
 800917a:	6979      	ldr	r1, [r7, #20]
 800917c:	4838      	ldr	r0, [pc, #224]	; (8009260 <setADC+0x174>)
 800917e:	f7fe fa13 	bl	80075a8 <timReconfigure>
 8009182:	4603      	mov	r3, r0
 8009184:	613b      	str	r3, [r7, #16]
	changeSamplingTime(frek*samplesPerPeriod);
 8009186:	4b31      	ldr	r3, [pc, #196]	; (800924c <setADC+0x160>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	fb02 f303 	mul.w	r3, r2, r3
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff ff1f 	bl	8008fd4 <changeSamplingTime>
    HAL_TIM_Base_MspInit(&htim15);
 8009196:	4832      	ldr	r0, [pc, #200]	; (8009260 <setADC+0x174>)
 8009198:	f000 fc9e 	bl	8009ad8 <HAL_TIM_Base_MspInit>
	int a = 10000/samplesPerPeriod;
 800919c:	f242 7210 	movw	r2, #10000	; 0x2710
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a6:	60fb      	str	r3, [r7, #12]
	samples=(a-1)*(samplesPerPeriod);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	461a      	mov	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	fb03 f302 	mul.w	r3, r3, r2
 80091b4:	461a      	mov	r2, r3
 80091b6:	4b2c      	ldr	r3, [pc, #176]	; (8009268 <setADC+0x17c>)
 80091b8:	601a      	str	r2, [r3, #0]
	status = HAL_ADC_Start(&hadc2);
 80091ba:	4828      	ldr	r0, [pc, #160]	; (800925c <setADC+0x170>)
 80091bc:	f7f8 f802 	bl	80011c4 <HAL_ADC_Start>
 80091c0:	4603      	mov	r3, r0
 80091c2:	613b      	str	r3, [r7, #16]
	if (status == 2){
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d107      	bne.n	80091da <setADC+0xee>
		HAL_ADC_Stop(&hadc2);
 80091ca:	4824      	ldr	r0, [pc, #144]	; (800925c <setADC+0x170>)
 80091cc:	f7f8 f910 	bl	80013f0 <HAL_ADC_Stop>
		status = HAL_ADC_Start(&hadc2);
 80091d0:	4822      	ldr	r0, [pc, #136]	; (800925c <setADC+0x170>)
 80091d2:	f7f7 fff7 	bl	80011c4 <HAL_ADC_Start>
 80091d6:	4603      	mov	r3, r0
 80091d8:	613b      	str	r3, [r7, #16]
	}

	//HAL_TIM_Base_Start_IT(&htim15);
	status = HAL_TIM_Base_Start(&htim15);
 80091da:	4821      	ldr	r0, [pc, #132]	; (8009260 <setADC+0x174>)
 80091dc:	f7fc fb38 	bl	8005850 <HAL_TIM_Base_Start>
 80091e0:	4603      	mov	r3, r0
 80091e2:	613b      	str	r3, [r7, #16]
	complete=0;
 80091e4:	4b21      	ldr	r3, [pc, #132]	; (800926c <setADC+0x180>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
	firstsample=0;
 80091ea:	4b21      	ldr	r3, [pc, #132]	; (8009270 <setADC+0x184>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]
	SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMAEN);
 80091f0:	4b19      	ldr	r3, [pc, #100]	; (8009258 <setADC+0x16c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68da      	ldr	r2, [r3, #12]
 80091f6:	4b18      	ldr	r3, [pc, #96]	; (8009258 <setADC+0x16c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0201 	orr.w	r2, r2, #1
 80091fe:	60da      	str	r2, [r3, #12]
	status = HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)&data,samples);
 8009200:	4b19      	ldr	r3, [pc, #100]	; (8009268 <setADC+0x17c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	461a      	mov	r2, r3
 8009206:	491b      	ldr	r1, [pc, #108]	; (8009274 <setADC+0x188>)
 8009208:	4813      	ldr	r0, [pc, #76]	; (8009258 <setADC+0x16c>)
 800920a:	f7f8 fcd9 	bl	8001bc0 <HAL_ADCEx_MultiModeStart_DMA>
 800920e:	4603      	mov	r3, r0
 8009210:	613b      	str	r3, [r7, #16]
	if (status == 2){
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d10d      	bne.n	8009234 <setADC+0x148>
		status = HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8009218:	480f      	ldr	r0, [pc, #60]	; (8009258 <setADC+0x16c>)
 800921a:	f7f8 fda1 	bl	8001d60 <HAL_ADCEx_MultiModeStop_DMA>
 800921e:	4603      	mov	r3, r0
 8009220:	613b      	str	r3, [r7, #16]
		status = HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)&data,samples);
 8009222:	4b11      	ldr	r3, [pc, #68]	; (8009268 <setADC+0x17c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	4912      	ldr	r1, [pc, #72]	; (8009274 <setADC+0x188>)
 800922a:	480b      	ldr	r0, [pc, #44]	; (8009258 <setADC+0x16c>)
 800922c:	f7f8 fcc8 	bl	8001bc0 <HAL_ADCEx_MultiModeStart_DMA>
 8009230:	4603      	mov	r3, r0
 8009232:	613b      	str	r3, [r7, #16]
	}
	adcintcounter = 0;
 8009234:	4b07      	ldr	r3, [pc, #28]	; (8009254 <setADC+0x168>)
 8009236:	2200      	movs	r2, #0
 8009238:	701a      	strb	r2, [r3, #0]
}
 800923a:	bf00      	nop
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bdb0      	pop	{r4, r5, r7, pc}
 8009242:	bf00      	nop
 8009244:	20000408 	.word	0x20000408
 8009248:	20000006 	.word	0x20000006
 800924c:	2000e768 	.word	0x2000e768
 8009250:	2000e734 	.word	0x2000e734
 8009254:	20000028 	.word	0x20000028
 8009258:	200002d8 	.word	0x200002d8
 800925c:	20000288 	.word	0x20000288
 8009260:	2000e76c 	.word	0x2000e76c
 8009264:	2000e6b0 	.word	0x2000e6b0
 8009268:	2000002c 	.word	0x2000002c
 800926c:	2000026f 	.word	0x2000026f
 8009270:	20000270 	.word	0x20000270
 8009274:	20004a70 	.word	0x20004a70

08009278 <HAL_ADC_ConvHalfCpltCallback>:

void  HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){ // @suppress("Name convention for function")
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	if(hadc != &hadc1)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a03      	ldr	r2, [pc, #12]	; (8009290 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8009284:	4293      	cmp	r3, r2
			return;
}
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	200002d8 	.word	0x200002d8

08009294 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){ // @suppress("Name convention for function")
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	if(hadc != &hadc1)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a10      	ldr	r2, [pc, #64]	; (80092e0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d119      	bne.n	80092d8 <HAL_ADC_ConvCpltCallback+0x44>
			return;
	//HAL_ADC_Stop(&hadc2);
	//
	complete=1;
 80092a4:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <HAL_ADC_ConvCpltCallback+0x50>)
 80092a6:	2201      	movs	r2, #1
 80092a8:	701a      	strb	r2, [r3, #0]
	adcintcounter++;
 80092aa:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <HAL_ADC_ConvCpltCallback+0x54>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	3301      	adds	r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <HAL_ADC_ConvCpltCallback+0x54>)
 80092b6:	701a      	strb	r2, [r3, #0]
	HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 80092b8:	4809      	ldr	r0, [pc, #36]	; (80092e0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80092ba:	f7f8 fd51 	bl	8001d60 <HAL_ADCEx_MultiModeStop_DMA>
	HAL_ADC_Init(&hadc1);
 80092be:	4808      	ldr	r0, [pc, #32]	; (80092e0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80092c0:	f7f7 fd86 	bl	8000dd0 <HAL_ADC_Init>
	HAL_ADC_Stop_IT(&hadc2);
 80092c4:	4809      	ldr	r0, [pc, #36]	; (80092ec <HAL_ADC_ConvCpltCallback+0x58>)
 80092c6:	f7f8 f8c8 	bl	800145a <HAL_ADC_Stop_IT>
	HAL_TIM_Base_Start(&htim15);
 80092ca:	4809      	ldr	r0, [pc, #36]	; (80092f0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80092cc:	f7fc fac0 	bl	8005850 <HAL_TIM_Base_Start>
	dataready=1;
 80092d0:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <HAL_ADC_ConvCpltCallback+0x60>)
 80092d2:	2201      	movs	r2, #1
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e000      	b.n	80092da <HAL_ADC_ConvCpltCallback+0x46>
			return;
 80092d8:	bf00      	nop
	//HAL_UART_Receive_IT(&huart2, &Rx_data, 1);

}
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	200002d8 	.word	0x200002d8
 80092e4:	2000026f 	.word	0x2000026f
 80092e8:	20000028 	.word	0x20000028
 80092ec:	20000288 	.word	0x20000288
 80092f0:	2000e76c 	.word	0x2000e76c
 80092f4:	2000026a 	.word	0x2000026a

080092f8 <main>:

/* USER CODE END 0 */


int main(void)
{
 80092f8:	b590      	push	{r4, r7, lr}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	genFreq[0]=1000;
 80092fe:	4b78      	ldr	r3, [pc, #480]	; (80094e0 <main+0x1e8>)
 8009300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009304:	601a      	str	r2, [r3, #0]
	genFreq[1]=1000;
 8009306:	4b76      	ldr	r3, [pc, #472]	; (80094e0 <main+0x1e8>)
 8009308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800930c:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800930e:	f7f7 fcc3 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009312:	f000 f9bb 	bl	800968c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009316:	f7fe f8a9 	bl	800746c <MX_GPIO_Init>
  MX_DMA_Init();
 800931a:	f7fe f879 	bl	8007410 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800931e:	f000 fc39 	bl	8009b94 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8009322:	f7fd ff8d 	bl	8007240 <MX_DAC1_Init>
  MX_TIM6_Init();
 8009326:	f000 fb1b 	bl	8009960 <MX_TIM6_Init>
  MX_TIM7_Init();
 800932a:	f000 fb4f 	bl	80099cc <MX_TIM7_Init>
  MX_ADC1_Init();
 800932e:	f7fd fdff 	bl	8006f30 <MX_ADC1_Init>
  MX_ADC2_Init();
 8009332:	f7fd fe73 	bl	800701c <MX_ADC2_Init>
  MX_TIM15_Init();
 8009336:	f000 fb7f 	bl	8009a38 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  initBuffers(BUF,1,0);
 800933a:	2100      	movs	r1, #0
 800933c:	ed9f 0b64 	vldr	d0, [pc, #400]	; 80094d0 <main+0x1d8>
 8009340:	2020      	movs	r0, #32
 8009342:	f7fe fcbd 	bl	8007cc0 <initBuffers>
  channel=1;
 8009346:	4b67      	ldr	r3, [pc, #412]	; (80094e4 <main+0x1ec>)
 8009348:	2201      	movs	r2, #1
 800934a:	701a      	strb	r2, [r3, #0]
  initBuffers(16,0.7,150);
 800934c:	2196      	movs	r1, #150	; 0x96
 800934e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 80094d8 <main+0x1e0>
 8009352:	2010      	movs	r0, #16
 8009354:	f7fe fcb4 	bl	8007cc0 <initBuffers>
  channel=0;
 8009358:	4b62      	ldr	r3, [pc, #392]	; (80094e4 <main+0x1ec>)
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]


	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	2026      	movs	r0, #38	; 0x26
 8009364:	f7f9 fc71 	bl	8002c4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009368:	2026      	movs	r0, #38	; 0x26
 800936a:	f7f9 fc8a 	bl	8002c82 <HAL_NVIC_EnableIRQ>
	//HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
	//HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
	//HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(TIM7_IRQn);

	HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 3, 0);
 800936e:	2200      	movs	r2, #0
 8009370:	2103      	movs	r1, #3
 8009372:	2019      	movs	r0, #25
 8009374:	f7f9 fc69 	bl	8002c4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009378:	2019      	movs	r0, #25
 800937a:	f7f9 fc82 	bl	8002c82 <HAL_NVIC_EnableIRQ>


	HAL_UART_Receive_IT(&huart2, &Rx_data, 1);
 800937e:	2201      	movs	r2, #1
 8009380:	4959      	ldr	r1, [pc, #356]	; (80094e8 <main+0x1f0>)
 8009382:	485a      	ldr	r0, [pc, #360]	; (80094ec <main+0x1f4>)
 8009384:	f7fc ff5c 	bl	8006240 <HAL_UART_Receive_IT>

	//genInit();
	//HAL_TIM_Base_Start_IT(&htim6);
	HAL_TIM_Base_Start(&htim6);
 8009388:	4859      	ldr	r0, [pc, #356]	; (80094f0 <main+0x1f8>)
 800938a:	f7fc fa61 	bl	8005850 <HAL_TIM_Base_Start>
	HAL_TIM_Base_MspInit(&htim6);
 800938e:	4858      	ldr	r0, [pc, #352]	; (80094f0 <main+0x1f8>)
 8009390:	f000 fba2 	bl	8009ad8 <HAL_TIM_Base_MspInit>
	//HAL_TIM_Base_Start_IT(&htim7);
	HAL_TIM_Base_Start(&htim7);
 8009394:	4857      	ldr	r0, [pc, #348]	; (80094f4 <main+0x1fc>)
 8009396:	f7fc fa5b 	bl	8005850 <HAL_TIM_Base_Start>
	HAL_TIM_Base_MspInit(&htim7);
 800939a:	4856      	ldr	r0, [pc, #344]	; (80094f4 <main+0x1fc>)
 800939c:	f000 fb9c 	bl	8009ad8 <HAL_TIM_Base_MspInit>
	timReconfigureForGenerator(genFreq[0],0,&realFreq1);
 80093a0:	4b4f      	ldr	r3, [pc, #316]	; (80094e0 <main+0x1e8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a54      	ldr	r2, [pc, #336]	; (80094f8 <main+0x200>)
 80093a6:	2100      	movs	r1, #0
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe f997 	bl	80076dc <timReconfigureForGenerator>
	timReconfigureForGenerator(genFreq[1],1,&realFreq2);
 80093ae:	4b4c      	ldr	r3, [pc, #304]	; (80094e0 <main+0x1e8>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	4a52      	ldr	r2, [pc, #328]	; (80094fc <main+0x204>)
 80093b4:	2101      	movs	r1, #1
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe f990 	bl	80076dc <timReconfigureForGenerator>

	htim6.Instance->ARR = autoReloadReg;
 80093bc:	4b50      	ldr	r3, [pc, #320]	; (8009500 <main+0x208>)
 80093be:	881a      	ldrh	r2, [r3, #0]
 80093c0:	4b4b      	ldr	r3, [pc, #300]	; (80094f0 <main+0x1f8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	62da      	str	r2, [r3, #44]	; 0x2c
	htim6.Instance->PSC = prescaler;
 80093c6:	4b4f      	ldr	r3, [pc, #316]	; (8009504 <main+0x20c>)
 80093c8:	881a      	ldrh	r2, [r3, #0]
 80093ca:	4b49      	ldr	r3, [pc, #292]	; (80094f0 <main+0x1f8>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	629a      	str	r2, [r3, #40]	; 0x28
	SET_BIT(htim6.Instance->EGR, TIM_EGR_UG);
 80093d0:	4b47      	ldr	r3, [pc, #284]	; (80094f0 <main+0x1f8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	695a      	ldr	r2, [r3, #20]
 80093d6:	4b46      	ldr	r3, [pc, #280]	; (80094f0 <main+0x1f8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0201 	orr.w	r2, r2, #1
 80093de:	615a      	str	r2, [r3, #20]
	htim7.Instance->ARR = autoReloadReg;
 80093e0:	4b47      	ldr	r3, [pc, #284]	; (8009500 <main+0x208>)
 80093e2:	881a      	ldrh	r2, [r3, #0]
 80093e4:	4b43      	ldr	r3, [pc, #268]	; (80094f4 <main+0x1fc>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	62da      	str	r2, [r3, #44]	; 0x2c
	htim7.Instance->PSC = prescaler;
 80093ea:	4b46      	ldr	r3, [pc, #280]	; (8009504 <main+0x20c>)
 80093ec:	881a      	ldrh	r2, [r3, #0]
 80093ee:	4b41      	ldr	r3, [pc, #260]	; (80094f4 <main+0x1fc>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	629a      	str	r2, [r3, #40]	; 0x28
	SET_BIT(htim7.Instance->EGR, TIM_EGR_UG);
 80093f4:	4b3f      	ldr	r3, [pc, #252]	; (80094f4 <main+0x1fc>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	695a      	ldr	r2, [r3, #20]
 80093fa:	4b3e      	ldr	r3, [pc, #248]	; (80094f4 <main+0x1fc>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	615a      	str	r2, [r3, #20]
	for (int i = 0 ;  i < 4096;i++){
 8009404:	2300      	movs	r3, #0
 8009406:	607b      	str	r3, [r7, #4]
 8009408:	e007      	b.n	800941a <main+0x122>
		data[i]=0;
 800940a:	4a3f      	ldr	r2, [pc, #252]	; (8009508 <main+0x210>)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2100      	movs	r1, #0
 8009410:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ;  i < 4096;i++){
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3301      	adds	r3, #1
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009420:	dbf3      	blt.n	800940a <main+0x112>
	}

	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8009422:	2100      	movs	r1, #0
 8009424:	4839      	ldr	r0, [pc, #228]	; (800950c <main+0x214>)
 8009426:	f7f8 fb61 	bl	8001aec <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED);
 800942a:	2100      	movs	r1, #0
 800942c:	4838      	ldr	r0, [pc, #224]	; (8009510 <main+0x218>)
 800942e:	f7f8 fb5d 	bl	8001aec <HAL_ADCEx_Calibration_Start>

    /* USER CODE BEGIN 3 */



	HAL_Delay(1);
 8009432:	2001      	movs	r0, #1
 8009434:	f7f7 fc96 	bl	8000d64 <HAL_Delay>
	//wgd++;
	//if(wgd>1500){
	//	wgd=0;
	//	HAL_UART_Receive_IT(&huart2, &Rx_data, 1);
	//}
	if(complete==1){
 8009438:	4b36      	ldr	r3, [pc, #216]	; (8009514 <main+0x21c>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b01      	cmp	r3, #1
 8009440:	d102      	bne.n	8009448 <main+0x150>

	//	HAL_DMA_DeInit(&hdma_adc1);
		//CLEAR_BIT(hadc2.Instance->CFGR, ADC_CFGR_DMAEN);
		//HAL_ADC_Init(&hadc1);
		//HAL_ADC_Init(&hadc2);
		complete=0;
 8009442:	4b34      	ldr	r3, [pc, #208]	; (8009514 <main+0x21c>)
 8009444:	2200      	movs	r2, #0
 8009446:	701a      	strb	r2, [r3, #0]
		//HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)&data,samples);


	}*/

	int newinput=0;
 8009448:	2300      	movs	r3, #0
 800944a:	603b      	str	r3, [r7, #0]
	if(Transfer_cplt!=0){
 800944c:	4b32      	ldr	r3, [pc, #200]	; (8009518 <main+0x220>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 80fb 	beq.w	800964e <main+0x356>
		switch(getRequest()){
 8009458:	f7ff fb26 	bl	8008aa8 <getRequest>
 800945c:	4603      	mov	r3, r0
 800945e:	2b06      	cmp	r3, #6
 8009460:	d86e      	bhi.n	8009540 <main+0x248>
 8009462:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <main+0x170>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	08009485 	.word	0x08009485
 800946c:	0800948f 	.word	0x0800948f
 8009470:	0800949d 	.word	0x0800949d
 8009474:	080094a5 	.word	0x080094a5
 8009478:	08009541 	.word	0x08009541
 800947c:	080094af 	.word	0x080094af
 8009480:	080094bd 	.word	0x080094bd
			case 0:newinput= atoi(Rx_Buffer);break;
 8009484:	4825      	ldr	r0, [pc, #148]	; (800951c <main+0x224>)
 8009486:	f000 fc28 	bl	8009cda <atoi>
 800948a:	6038      	str	r0, [r7, #0]
 800948c:	e059      	b.n	8009542 <main+0x24a>
			case 1:pr("DDS Generator\n");sin_square=1;break;
 800948e:	4824      	ldr	r0, [pc, #144]	; (8009520 <main+0x228>)
 8009490:	f7fe fdb0 	bl	8007ff4 <pr>
 8009494:	4b23      	ldr	r3, [pc, #140]	; (8009524 <main+0x22c>)
 8009496:	2201      	movs	r2, #1
 8009498:	701a      	strb	r2, [r3, #0]
 800949a:	e052      	b.n	8009542 <main+0x24a>
			case 2:pr("Version 0.0.2\n");break;
 800949c:	4822      	ldr	r0, [pc, #136]	; (8009528 <main+0x230>)
 800949e:	f7fe fda9 	bl	8007ff4 <pr>
 80094a2:	e04e      	b.n	8009542 <main+0x24a>
			case 3:pr("Frequency is %d\n",100);break;
 80094a4:	2164      	movs	r1, #100	; 0x64
 80094a6:	4821      	ldr	r0, [pc, #132]	; (800952c <main+0x234>)
 80094a8:	f7fe fda4 	bl	8007ff4 <pr>
 80094ac:	e049      	b.n	8009542 <main+0x24a>
			case 4:;break;
			case 5:pr("Starting Generator\n");sweep0=0;break;
 80094ae:	4820      	ldr	r0, [pc, #128]	; (8009530 <main+0x238>)
 80094b0:	f7fe fda0 	bl	8007ff4 <pr>
 80094b4:	4b1f      	ldr	r3, [pc, #124]	; (8009534 <main+0x23c>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	701a      	strb	r2, [r3, #0]
 80094ba:	e042      	b.n	8009542 <main+0x24a>
			case 6:pr("Stopping Generator\n");sweep1=0;break;
 80094bc:	481e      	ldr	r0, [pc, #120]	; (8009538 <main+0x240>)
 80094be:	f7fe fd99 	bl	8007ff4 <pr>
 80094c2:	4b1e      	ldr	r3, [pc, #120]	; (800953c <main+0x244>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	e03b      	b.n	8009542 <main+0x24a>
 80094ca:	bf00      	nop
 80094cc:	f3af 8000 	nop.w
 80094d0:	00000000 	.word	0x00000000
 80094d4:	3ff00000 	.word	0x3ff00000
 80094d8:	66666666 	.word	0x66666666
 80094dc:	3fe66666 	.word	0x3fe66666
 80094e0:	2000e744 	.word	0x2000e744
 80094e4:	20000249 	.word	0x20000249
 80094e8:	20002738 	.word	0x20002738
 80094ec:	2000e82c 	.word	0x2000e82c
 80094f0:	2000e7ac 	.word	0x2000e7ac
 80094f4:	2000e7ec 	.word	0x2000e7ec
 80094f8:	20000408 	.word	0x20000408
 80094fc:	20002730 	.word	0x20002730
 8009500:	2000000a 	.word	0x2000000a
 8009504:	2000023a 	.word	0x2000023a
 8009508:	20004a70 	.word	0x20004a70
 800950c:	200002d8 	.word	0x200002d8
 8009510:	20000288 	.word	0x20000288
 8009514:	2000026f 	.word	0x2000026f
 8009518:	20000244 	.word	0x20000244
 800951c:	2000e6b4 	.word	0x2000e6b4
 8009520:	0800bfe0 	.word	0x0800bfe0
 8009524:	20000029 	.word	0x20000029
 8009528:	0800bff0 	.word	0x0800bff0
 800952c:	0800c000 	.word	0x0800c000
 8009530:	0800c014 	.word	0x0800c014
 8009534:	20000263 	.word	0x20000263
 8009538:	0800c028 	.word	0x0800c028
 800953c:	20000264 	.word	0x20000264

			default: break;
 8009540:	bf00      	nop
		}

		if(start==1 && channel==0){
 8009542:	4b46      	ldr	r3, [pc, #280]	; (800965c <main+0x364>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b01      	cmp	r3, #1
 800954a:	d109      	bne.n	8009560 <main+0x268>
 800954c:	4b44      	ldr	r3, [pc, #272]	; (8009660 <main+0x368>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d104      	bne.n	8009560 <main+0x268>
				genInit0();
 8009556:	f7fe fc7f 	bl	8007e58 <genInit0>
				start=0;
 800955a:	4b40      	ldr	r3, [pc, #256]	; (800965c <main+0x364>)
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
		}
		if(start==1 && channel==1){
 8009560:	4b3e      	ldr	r3, [pc, #248]	; (800965c <main+0x364>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b01      	cmp	r3, #1
 8009568:	d109      	bne.n	800957e <main+0x286>
 800956a:	4b3d      	ldr	r3, [pc, #244]	; (8009660 <main+0x368>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b01      	cmp	r3, #1
 8009572:	d104      	bne.n	800957e <main+0x286>
			genInit1();
 8009574:	f7fe fc9e 	bl	8007eb4 <genInit1>
			start=0;
 8009578:	4b38      	ldr	r3, [pc, #224]	; (800965c <main+0x364>)
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
		}

		if(stop==1 && channel==0){
 800957e:	4b39      	ldr	r3, [pc, #228]	; (8009664 <main+0x36c>)
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b01      	cmp	r3, #1
 8009586:	d109      	bne.n	800959c <main+0x2a4>
 8009588:	4b35      	ldr	r3, [pc, #212]	; (8009660 <main+0x368>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d104      	bne.n	800959c <main+0x2a4>
			genStop0();
 8009592:	f7fe fce3 	bl	8007f5c <genStop0>
			stop=0;
 8009596:	4b33      	ldr	r3, [pc, #204]	; (8009664 <main+0x36c>)
 8009598:	2200      	movs	r2, #0
 800959a:	701a      	strb	r2, [r3, #0]
		}
		if(stop==1 && channel==1){
 800959c:	4b31      	ldr	r3, [pc, #196]	; (8009664 <main+0x36c>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d109      	bne.n	80095ba <main+0x2c2>
 80095a6:	4b2e      	ldr	r3, [pc, #184]	; (8009660 <main+0x368>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d104      	bne.n	80095ba <main+0x2c2>
			genStop1();
 80095b0:	f7fe fce6 	bl	8007f80 <genStop1>
			stop=0;
 80095b4:	4b2b      	ldr	r3, [pc, #172]	; (8009664 <main+0x36c>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	701a      	strb	r2, [r3, #0]
		}

		toggleSweep();
 80095ba:	f7ff f9c9 	bl	8008950 <toggleSweep>
		setFrequency(newinput);
 80095be:	6838      	ldr	r0, [r7, #0]
 80095c0:	f7fe ff0a 	bl	80083d8 <setFrequency>
		setStep(newinput);
 80095c4:	6838      	ldr	r0, [r7, #0]
 80095c6:	f7ff f81b 	bl	8008600 <setStep>
		setAmpl(newinput);
 80095ca:	6838      	ldr	r0, [r7, #0]
 80095cc:	f7fe fdc8 	bl	8008160 <setAmpl>
		setOffset(newinput);
 80095d0:	6838      	ldr	r0, [r7, #0]
 80095d2:	f7ff f889 	bl	80086e8 <setOffset>
		setSampleRate(newinput);
 80095d6:	6838      	ldr	r0, [r7, #0]
 80095d8:	f7ff f85e 	bl	8008698 <setSampleRate>
		setFiltr(newinput);
 80095dc:	6838      	ldr	r0, [r7, #0]
 80095de:	f7fe feb7 	bl	8008350 <setFiltr>


		if(measure==1){
 80095e2:	4b21      	ldr	r3, [pc, #132]	; (8009668 <main+0x370>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d121      	bne.n	8009630 <main+0x338>
			pr("MB\n\r");
 80095ec:	481f      	ldr	r0, [pc, #124]	; (800966c <main+0x374>)
 80095ee:	f7fe fd01 	bl	8007ff4 <pr>
			measure=0;
 80095f2:	4b1d      	ldr	r3, [pc, #116]	; (8009668 <main+0x370>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	701a      	strb	r2, [r3, #0]
			xf=0;
 80095f8:	4a1d      	ldr	r2, [pc, #116]	; (8009670 <main+0x378>)
 80095fa:	f04f 0300 	mov.w	r3, #0
 80095fe:	f04f 0400 	mov.w	r4, #0
 8009602:	e9c2 3400 	strd	r3, r4, [r2]
			yf=0;
 8009606:	4a1b      	ldr	r2, [pc, #108]	; (8009674 <main+0x37c>)
 8009608:	f04f 0300 	mov.w	r3, #0
 800960c:	f04f 0400 	mov.w	r4, #0
 8009610:	e9c2 3400 	strd	r3, r4, [r2]
			dataready=0;
 8009614:	4b18      	ldr	r3, [pc, #96]	; (8009678 <main+0x380>)
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
			adcintcountercheck=0;
 800961a:	4b18      	ldr	r3, [pc, #96]	; (800967c <main+0x384>)
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8009620:	2064      	movs	r0, #100	; 0x64
 8009622:	f7f7 fb9f 	bl	8000d64 <HAL_Delay>
			setADC(adcsamples);
 8009626:	4b16      	ldr	r3, [pc, #88]	; (8009680 <main+0x388>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff fd5e 	bl	80090ec <setADC>

		}
		setSweepMaxMin(newinput);
 8009630:	6838      	ldr	r0, [r7, #0]
 8009632:	f7fe fcf5 	bl	8008020 <setSweepMaxMin>
		newinput=0;
 8009636:	2300      	movs	r3, #0
 8009638:	603b      	str	r3, [r7, #0]
		//HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, (uint32_t*)genBuffer1,bufferSize1, DAC_ALIGN_12B_R);
		if(printData==1 ){
 800963a:	4b12      	ldr	r3, [pc, #72]	; (8009684 <main+0x38c>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b01      	cmp	r3, #1
 8009642:	d104      	bne.n	800964e <main+0x356>
			printData=0;
 8009644:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <main+0x38c>)
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]
			//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
			printADCOut();
 800964a:	f7fe fd23 	bl	8008094 <printADCOut>
		}
	}
	sweepUpdate();
 800964e:	f7ff f915 	bl	800887c <sweepUpdate>
	Transfer_cplt=0;
 8009652:	4b0d      	ldr	r3, [pc, #52]	; (8009688 <main+0x390>)
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]
  {
 8009658:	e6eb      	b.n	8009432 <main+0x13a>
 800965a:	bf00      	nop
 800965c:	20000245 	.word	0x20000245
 8009660:	20000249 	.word	0x20000249
 8009664:	20000246 	.word	0x20000246
 8009668:	2000026d 	.word	0x2000026d
 800966c:	0800c03c 	.word	0x0800c03c
 8009670:	20000250 	.word	0x20000250
 8009674:	20000258 	.word	0x20000258
 8009678:	2000026a 	.word	0x2000026a
 800967c:	20000269 	.word	0x20000269
 8009680:	20000030 	.word	0x20000030
 8009684:	2000026c 	.word	0x2000026c
 8009688:	20000244 	.word	0x20000244

0800968c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) // @suppress("Name convention for function")
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b0a6      	sub	sp, #152	; 0x98
 8009690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009692:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009696:	2228      	movs	r2, #40	; 0x28
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fb4c 	bl	8009d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80096a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	605a      	str	r2, [r3, #4]
 80096aa:	609a      	str	r2, [r3, #8]
 80096ac:	60da      	str	r2, [r3, #12]
 80096ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80096b0:	1d3b      	adds	r3, r7, #4
 80096b2:	2258      	movs	r2, #88	; 0x58
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fb3e 	bl	8009d38 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80096bc:	2302      	movs	r3, #2
 80096be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80096c0:	2301      	movs	r3, #1
 80096c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80096c4:	2310      	movs	r3, #16
 80096c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80096ca:	2302      	movs	r3, #2
 80096cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80096d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80096d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80096dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80096e0:	2300      	movs	r3, #0
 80096e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80096e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fa f940 	bl	8003970 <HAL_RCC_OscConfig>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80096f6:	f000 f82f 	bl	8009758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80096fa:	230f      	movs	r3, #15
 80096fc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80096fe:	2302      	movs	r3, #2
 8009700:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009702:	2300      	movs	r3, #0
 8009704:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800970a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800970c:	2300      	movs	r3, #0
 800970e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009710:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009714:	2102      	movs	r1, #2
 8009716:	4618      	mov	r0, r3
 8009718:	f7fb f840 	bl	800479c <HAL_RCC_ClockConfig>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8009722:	f000 f819 	bl	8009758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM15
 8009726:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <SystemClock_Config+0xc8>)
 8009728:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800972a:	2300      	movs	r3, #0
 800972c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800972e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009732:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8009734:	2300      	movs	r3, #0
 8009736:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009738:	1d3b      	adds	r3, r7, #4
 800973a:	4618      	mov	r0, r3
 800973c:	f7fb fa64 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8009746:	f000 f807 	bl	8009758 <Error_Handler>
  }
}
 800974a:	bf00      	nop
 800974c:	3798      	adds	r7, #152	; 0x98
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	00400082 	.word	0x00400082

08009758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) // @suppress("Name convention for function")
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	pr("Error_Handler\n\r");
 800975c:	4802      	ldr	r0, [pc, #8]	; (8009768 <Error_Handler+0x10>)
 800975e:	f7fe fc49 	bl	8007ff4 <pr>
  /* USER CODE END Error_Handler_Debug */
}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	0800c044 	.word	0x0800c044

0800976c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009772:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <HAL_MspInit+0x44>)
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	4a0e      	ldr	r2, [pc, #56]	; (80097b0 <HAL_MspInit+0x44>)
 8009778:	f043 0301 	orr.w	r3, r3, #1
 800977c:	6193      	str	r3, [r2, #24]
 800977e:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <HAL_MspInit+0x44>)
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	607b      	str	r3, [r7, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <HAL_MspInit+0x44>)
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	4a08      	ldr	r2, [pc, #32]	; (80097b0 <HAL_MspInit+0x44>)
 8009790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009794:	61d3      	str	r3, [r2, #28]
 8009796:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <HAL_MspInit+0x44>)
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80097a2:	2007      	movs	r0, #7
 80097a4:	f7f9 fa46 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40021000 	.word	0x40021000

080097b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80097b8:	bf00      	nop
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
	...

080097c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	pr("HardFault_Handler\n\r");
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <HardFault_Handler+0xc>)
 80097ca:	f7fe fc13 	bl	8007ff4 <pr>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80097ce:	e7fe      	b.n	80097ce <HardFault_Handler+0xa>
 80097d0:	0800c054 	.word	0x0800c054

080097d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80097d8:	e7fe      	b.n	80097d8 <MemManage_Handler+0x4>

080097da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80097da:	b480      	push	{r7}
 80097dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80097de:	e7fe      	b.n	80097de <BusFault_Handler+0x4>

080097e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80097e0:	b480      	push	{r7}
 80097e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80097e4:	e7fe      	b.n	80097e4 <UsageFault_Handler+0x4>

080097e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80097e6:	b480      	push	{r7}
 80097e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80097ea:	bf00      	nop
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80097f4:	b480      	push	{r7}
 80097f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80097f8:	bf00      	nop
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009802:	b480      	push	{r7}
 8009804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009806:	bf00      	nop
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009814:	f7f7 fa86 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009818:	bf00      	nop
 800981a:	bd80      	pop	{r7, pc}

0800981c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009820:	4802      	ldr	r0, [pc, #8]	; (800982c <DMA1_Channel1_IRQHandler+0x10>)
 8009822:	f7f9 fde9 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  	//  dmaint(&hdma_adc1);
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009826:	bf00      	nop
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000328 	.word	0x20000328

08009830 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8009834:	4802      	ldr	r0, [pc, #8]	; (8009840 <DMA1_Channel3_IRQHandler+0x10>)
 8009836:	f7f9 fddf 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800983a:	bf00      	nop
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	200003c4 	.word	0x200003c4

08009844 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8009848:	4802      	ldr	r0, [pc, #8]	; (8009854 <DMA1_Channel4_IRQHandler+0x10>)
 800984a:	f7f9 fdd5 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800984e:	bf00      	nop
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	2000036c 	.word	0x2000036c

08009858 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800985c:	4803      	ldr	r0, [pc, #12]	; (800986c <ADC1_2_IRQHandler+0x14>)
 800985e:	f7f7 fe39 	bl	80014d4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8009862:	4803      	ldr	r0, [pc, #12]	; (8009870 <ADC1_2_IRQHandler+0x18>)
 8009864:	f7f7 fe36 	bl	80014d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8009868:	bf00      	nop
 800986a:	bd80      	pop	{r7, pc}
 800986c:	200002d8 	.word	0x200002d8
 8009870:	20000288 	.word	0x20000288

08009874 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8009878:	4802      	ldr	r0, [pc, #8]	; (8009884 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800987a:	f7fc f813 	bl	80058a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800987e:	bf00      	nop
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	2000e76c 	.word	0x2000e76c

08009888 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800988c:	4802      	ldr	r0, [pc, #8]	; (8009898 <USART2_IRQHandler+0x10>)
 800988e:	f7fc fd79 	bl	8006384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
 // HAL_UART_RxCpltCallback(&huart2);
  /* USER CODE END USART2_IRQn 1 */
}
 8009892:	bf00      	nop
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	2000e82c 	.word	0x2000e82c

0800989c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80098a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80098a4:	f7fa f840 	bl	8003928 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80098a8:	bf00      	nop
 80098aa:	bd80      	pop	{r7, pc}

080098ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80098b0:	4803      	ldr	r0, [pc, #12]	; (80098c0 <TIM6_DAC_IRQHandler+0x14>)
 80098b2:	f7fb fff7 	bl	80058a4 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80098b6:	4803      	ldr	r0, [pc, #12]	; (80098c4 <TIM6_DAC_IRQHandler+0x18>)
 80098b8:	f7f9 fb46 	bl	8002f48 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80098bc:	bf00      	nop
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	2000e7ac 	.word	0x2000e7ac
 80098c4:	200003b0 	.word	0x200003b0

080098c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80098cc:	4802      	ldr	r0, [pc, #8]	; (80098d8 <TIM7_IRQHandler+0x10>)
 80098ce:	f7fb ffe9 	bl	80058a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80098d2:	bf00      	nop
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	2000e7ec 	.word	0x2000e7ec

080098dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80098e4:	4b11      	ldr	r3, [pc, #68]	; (800992c <_sbrk+0x50>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d102      	bne.n	80098f2 <_sbrk+0x16>
		heap_end = &end;
 80098ec:	4b0f      	ldr	r3, [pc, #60]	; (800992c <_sbrk+0x50>)
 80098ee:	4a10      	ldr	r2, [pc, #64]	; (8009930 <_sbrk+0x54>)
 80098f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80098f2:	4b0e      	ldr	r3, [pc, #56]	; (800992c <_sbrk+0x50>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <_sbrk+0x50>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4413      	add	r3, r2
 8009900:	466a      	mov	r2, sp
 8009902:	4293      	cmp	r3, r2
 8009904:	d907      	bls.n	8009916 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009906:	f000 f9ed 	bl	8009ce4 <__errno>
 800990a:	4602      	mov	r2, r0
 800990c:	230c      	movs	r3, #12
 800990e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009910:	f04f 33ff 	mov.w	r3, #4294967295
 8009914:	e006      	b.n	8009924 <_sbrk+0x48>
	}

	heap_end += incr;
 8009916:	4b05      	ldr	r3, [pc, #20]	; (800992c <_sbrk+0x50>)
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4413      	add	r3, r2
 800991e:	4a03      	ldr	r2, [pc, #12]	; (800992c <_sbrk+0x50>)
 8009920:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009922:	68fb      	ldr	r3, [r7, #12]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	20000278 	.word	0x20000278
 8009930:	2000e8b0 	.word	0x2000e8b0

08009934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009938:	4b08      	ldr	r3, [pc, #32]	; (800995c <SystemInit+0x28>)
 800993a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993e:	4a07      	ldr	r2, [pc, #28]	; (800995c <SystemInit+0x28>)
 8009940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009948:	4b04      	ldr	r3, [pc, #16]	; (800995c <SystemInit+0x28>)
 800994a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800994e:	609a      	str	r2, [r3, #8]
#endif
}
 8009950:	bf00      	nop
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	e000ed00 	.word	0xe000ed00

08009960 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009966:	1d3b      	adds	r3, r7, #4
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	605a      	str	r2, [r3, #4]
 800996e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8009970:	4b14      	ldr	r3, [pc, #80]	; (80099c4 <MX_TIM6_Init+0x64>)
 8009972:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <MX_TIM6_Init+0x68>)
 8009974:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8009976:	4b13      	ldr	r3, [pc, #76]	; (80099c4 <MX_TIM6_Init+0x64>)
 8009978:	2200      	movs	r2, #0
 800997a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800997c:	4b11      	ldr	r3, [pc, #68]	; (80099c4 <MX_TIM6_Init+0x64>)
 800997e:	2200      	movs	r2, #0
 8009980:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0x7FF;
 8009982:	4b10      	ldr	r3, [pc, #64]	; (80099c4 <MX_TIM6_Init+0x64>)
 8009984:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009988:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800998a:	4b0e      	ldr	r3, [pc, #56]	; (80099c4 <MX_TIM6_Init+0x64>)
 800998c:	2200      	movs	r2, #0
 800998e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009990:	480c      	ldr	r0, [pc, #48]	; (80099c4 <MX_TIM6_Init+0x64>)
 8009992:	f7fb ff31 	bl	80057f8 <HAL_TIM_Base_Init>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800999c:	f7ff fedc 	bl	8009758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80099a0:	2320      	movs	r3, #32
 80099a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80099a8:	1d3b      	adds	r3, r7, #4
 80099aa:	4619      	mov	r1, r3
 80099ac:	4805      	ldr	r0, [pc, #20]	; (80099c4 <MX_TIM6_Init+0x64>)
 80099ae:	f7fc fabb 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80099b8:	f7ff fece 	bl	8009758 <Error_Handler>
  }

}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	2000e7ac 	.word	0x2000e7ac
 80099c8:	40001000 	.word	0x40001000

080099cc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099d2:	1d3b      	adds	r3, r7, #4
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	605a      	str	r2, [r3, #4]
 80099da:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 80099dc:	4b14      	ldr	r3, [pc, #80]	; (8009a30 <MX_TIM7_Init+0x64>)
 80099de:	4a15      	ldr	r2, [pc, #84]	; (8009a34 <MX_TIM7_Init+0x68>)
 80099e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80099e2:	4b13      	ldr	r3, [pc, #76]	; (8009a30 <MX_TIM7_Init+0x64>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099e8:	4b11      	ldr	r3, [pc, #68]	; (8009a30 <MX_TIM7_Init+0x64>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0x7FF;
 80099ee:	4b10      	ldr	r3, [pc, #64]	; (8009a30 <MX_TIM7_Init+0x64>)
 80099f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80099f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099f6:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <MX_TIM7_Init+0x64>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80099fc:	480c      	ldr	r0, [pc, #48]	; (8009a30 <MX_TIM7_Init+0x64>)
 80099fe:	f7fb fefb 	bl	80057f8 <HAL_TIM_Base_Init>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009a08:	f7ff fea6 	bl	8009758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009a0c:	2320      	movs	r3, #32
 8009a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009a14:	1d3b      	adds	r3, r7, #4
 8009a16:	4619      	mov	r1, r3
 8009a18:	4805      	ldr	r0, [pc, #20]	; (8009a30 <MX_TIM7_Init+0x64>)
 8009a1a:	f7fc fa85 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009a24:	f7ff fe98 	bl	8009758 <Error_Handler>
  }

}
 8009a28:	bf00      	nop
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	2000e7ec 	.word	0x2000e7ec
 8009a34:	40001400 	.word	0x40001400

08009a38 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a3e:	f107 0310 	add.w	r3, r7, #16
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	605a      	str	r2, [r3, #4]
 8009a48:	609a      	str	r2, [r3, #8]
 8009a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a4c:	1d3b      	adds	r3, r7, #4
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	605a      	str	r2, [r3, #4]
 8009a54:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8009a56:	4b1e      	ldr	r3, [pc, #120]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a58:	4a1e      	ldr	r2, [pc, #120]	; (8009ad4 <MX_TIM15_Init+0x9c>)
 8009a5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8009a5c:	4b1c      	ldr	r3, [pc, #112]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a62:	4b1b      	ldr	r3, [pc, #108]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 8009a68:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a6e:	4b18      	ldr	r3, [pc, #96]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8009a74:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a7a:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8009a80:	4813      	ldr	r0, [pc, #76]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a82:	f7fb feb9 	bl	80057f8 <HAL_TIM_Base_Init>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8009a8c:	f7ff fe64 	bl	8009758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8009a96:	f107 0310 	add.w	r3, r7, #16
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	480c      	ldr	r0, [pc, #48]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009a9e:	f7fc f820 	bl	8005ae2 <HAL_TIM_ConfigClockSource>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8009aa8:	f7ff fe56 	bl	8009758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009aac:	2320      	movs	r3, #32
 8009aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8009ab4:	1d3b      	adds	r3, r7, #4
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4805      	ldr	r0, [pc, #20]	; (8009ad0 <MX_TIM15_Init+0x98>)
 8009aba:	f7fc fa35 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8009ac4:	f7ff fe48 	bl	8009758 <Error_Handler>
  }

}
 8009ac8:	bf00      	nop
 8009aca:	3720      	adds	r7, #32
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	2000e76c 	.word	0x2000e76c
 8009ad4:	40014000 	.word	0x40014000

08009ad8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a27      	ldr	r2, [pc, #156]	; (8009b84 <HAL_TIM_Base_MspInit+0xac>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d114      	bne.n	8009b14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009aea:	4b27      	ldr	r3, [pc, #156]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	4a26      	ldr	r2, [pc, #152]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009af0:	f043 0310 	orr.w	r3, r3, #16
 8009af4:	61d3      	str	r3, [r2, #28]
 8009af6:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	f003 0310 	and.w	r3, r3, #16
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8009b02:	2200      	movs	r2, #0
 8009b04:	2100      	movs	r1, #0
 8009b06:	2036      	movs	r0, #54	; 0x36
 8009b08:	f7f9 f89f 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009b0c:	2036      	movs	r0, #54	; 0x36
 8009b0e:	f7f9 f8b8 	bl	8002c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8009b12:	e032      	b.n	8009b7a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a1c      	ldr	r2, [pc, #112]	; (8009b8c <HAL_TIM_Base_MspInit+0xb4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d114      	bne.n	8009b48 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009b1e:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	4a19      	ldr	r2, [pc, #100]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009b24:	f043 0320 	orr.w	r3, r3, #32
 8009b28:	61d3      	str	r3, [r2, #28]
 8009b2a:	4b17      	ldr	r3, [pc, #92]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	f003 0320 	and.w	r3, r3, #32
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	2037      	movs	r0, #55	; 0x37
 8009b3c:	f7f9 f885 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009b40:	2037      	movs	r0, #55	; 0x37
 8009b42:	f7f9 f89e 	bl	8002c82 <HAL_NVIC_EnableIRQ>
}
 8009b46:	e018      	b.n	8009b7a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a10      	ldr	r2, [pc, #64]	; (8009b90 <HAL_TIM_Base_MspInit+0xb8>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d113      	bne.n	8009b7a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009b52:	4b0d      	ldr	r3, [pc, #52]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	4a0c      	ldr	r2, [pc, #48]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b5c:	6193      	str	r3, [r2, #24]
 8009b5e:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <HAL_TIM_Base_MspInit+0xb0>)
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	2018      	movs	r0, #24
 8009b70:	f7f9 f86b 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8009b74:	2018      	movs	r0, #24
 8009b76:	f7f9 f884 	bl	8002c82 <HAL_NVIC_EnableIRQ>
}
 8009b7a:	bf00      	nop
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	40001000 	.word	0x40001000
 8009b88:	40021000 	.word	0x40021000
 8009b8c:	40001400 	.word	0x40001400
 8009b90:	40014000 	.word	0x40014000

08009b94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8009b98:	4b14      	ldr	r3, [pc, #80]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009b9a:	4a15      	ldr	r2, [pc, #84]	; (8009bf0 <MX_USART2_UART_Init+0x5c>)
 8009b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009b9e:	4b13      	ldr	r3, [pc, #76]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009bac:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009bb2:	4b0e      	ldr	r3, [pc, #56]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009bba:	220c      	movs	r2, #12
 8009bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bc4:	4b09      	ldr	r3, [pc, #36]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009bca:	4b08      	ldr	r3, [pc, #32]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009bd0:	4b06      	ldr	r3, [pc, #24]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009bd6:	4805      	ldr	r0, [pc, #20]	; (8009bec <MX_USART2_UART_Init+0x58>)
 8009bd8:	f7fc fa50 	bl	800607c <HAL_UART_Init>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8009be2:	f7ff fdb9 	bl	8009758 <Error_Handler>
  }

}
 8009be6:	bf00      	nop
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	2000e82c 	.word	0x2000e82c
 8009bf0:	40004400 	.word	0x40004400

08009bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08a      	sub	sp, #40	; 0x28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	605a      	str	r2, [r3, #4]
 8009c06:	609a      	str	r2, [r3, #8]
 8009c08:	60da      	str	r2, [r3, #12]
 8009c0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <HAL_UART_MspInit+0x8c>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d130      	bne.n	8009c78 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009c16:	4b1b      	ldr	r3, [pc, #108]	; (8009c84 <HAL_UART_MspInit+0x90>)
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	4a1a      	ldr	r2, [pc, #104]	; (8009c84 <HAL_UART_MspInit+0x90>)
 8009c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c20:	61d3      	str	r3, [r2, #28]
 8009c22:	4b18      	ldr	r3, [pc, #96]	; (8009c84 <HAL_UART_MspInit+0x90>)
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c2a:	613b      	str	r3, [r7, #16]
 8009c2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c2e:	4b15      	ldr	r3, [pc, #84]	; (8009c84 <HAL_UART_MspInit+0x90>)
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	4a14      	ldr	r2, [pc, #80]	; (8009c84 <HAL_UART_MspInit+0x90>)
 8009c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c38:	6153      	str	r3, [r2, #20]
 8009c3a:	4b12      	ldr	r3, [pc, #72]	; (8009c84 <HAL_UART_MspInit+0x90>)
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009c46:	230c      	movs	r3, #12
 8009c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c52:	2300      	movs	r3, #0
 8009c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009c56:	2307      	movs	r3, #7
 8009c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c5a:	f107 0314 	add.w	r3, r7, #20
 8009c5e:	4619      	mov	r1, r3
 8009c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c64:	f7f9 fcd6 	bl	8003614 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	2026      	movs	r0, #38	; 0x26
 8009c6e:	f7f8 ffec 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009c72:	2026      	movs	r0, #38	; 0x26
 8009c74:	f7f9 f805 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009c78:	bf00      	nop
 8009c7a:	3728      	adds	r7, #40	; 0x28
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	40004400 	.word	0x40004400
 8009c84:	40021000 	.word	0x40021000

08009c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009cc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009c8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009c8e:	e003      	b.n	8009c98 <LoopCopyDataInit>

08009c90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009c90:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009c92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009c94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009c96:	3104      	adds	r1, #4

08009c98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009c98:	480b      	ldr	r0, [pc, #44]	; (8009cc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <LoopForever+0xe>)
	adds	r2, r0, r1
 8009c9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009c9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009ca0:	d3f6      	bcc.n	8009c90 <CopyDataInit>
	ldr	r2, =_sbss
 8009ca2:	4a0b      	ldr	r2, [pc, #44]	; (8009cd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009ca4:	e002      	b.n	8009cac <LoopFillZerobss>

08009ca6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009ca6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009ca8:	f842 3b04 	str.w	r3, [r2], #4

08009cac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009cac:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <LoopForever+0x16>)
	cmp	r2, r3
 8009cae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009cb0:	d3f9      	bcc.n	8009ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009cb2:	f7ff fe3f 	bl	8009934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cb6:	f000 f81b 	bl	8009cf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009cba:	f7ff fb1d 	bl	80092f8 <main>

08009cbe <LoopForever>:

LoopForever:
    b LoopForever
 8009cbe:	e7fe      	b.n	8009cbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009cc0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8009cc4:	080102e8 	.word	0x080102e8
	ldr	r0, =_sdata
 8009cc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009ccc:	20000214 	.word	0x20000214
	ldr	r2, =_sbss
 8009cd0:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 8009cd4:	2000e8b0 	.word	0x2000e8b0

08009cd8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009cd8:	e7fe      	b.n	8009cd8 <ADC3_IRQHandler>

08009cda <atoi>:
 8009cda:	220a      	movs	r2, #10
 8009cdc:	2100      	movs	r1, #0
 8009cde:	f000 bd0b 	b.w	800a6f8 <strtol>
	...

08009ce4 <__errno>:
 8009ce4:	4b01      	ldr	r3, [pc, #4]	; (8009cec <__errno+0x8>)
 8009ce6:	6818      	ldr	r0, [r3, #0]
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	20000044 	.word	0x20000044

08009cf0 <__libc_init_array>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	4e0d      	ldr	r6, [pc, #52]	; (8009d28 <__libc_init_array+0x38>)
 8009cf4:	4c0d      	ldr	r4, [pc, #52]	; (8009d2c <__libc_init_array+0x3c>)
 8009cf6:	1ba4      	subs	r4, r4, r6
 8009cf8:	10a4      	asrs	r4, r4, #2
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	42a5      	cmp	r5, r4
 8009cfe:	d109      	bne.n	8009d14 <__libc_init_array+0x24>
 8009d00:	4e0b      	ldr	r6, [pc, #44]	; (8009d30 <__libc_init_array+0x40>)
 8009d02:	4c0c      	ldr	r4, [pc, #48]	; (8009d34 <__libc_init_array+0x44>)
 8009d04:	f002 f8f4 	bl	800bef0 <_init>
 8009d08:	1ba4      	subs	r4, r4, r6
 8009d0a:	10a4      	asrs	r4, r4, #2
 8009d0c:	2500      	movs	r5, #0
 8009d0e:	42a5      	cmp	r5, r4
 8009d10:	d105      	bne.n	8009d1e <__libc_init_array+0x2e>
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d18:	4798      	blx	r3
 8009d1a:	3501      	adds	r5, #1
 8009d1c:	e7ee      	b.n	8009cfc <__libc_init_array+0xc>
 8009d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d22:	4798      	blx	r3
 8009d24:	3501      	adds	r5, #1
 8009d26:	e7f2      	b.n	8009d0e <__libc_init_array+0x1e>
 8009d28:	080102e0 	.word	0x080102e0
 8009d2c:	080102e0 	.word	0x080102e0
 8009d30:	080102e0 	.word	0x080102e0
 8009d34:	080102e4 	.word	0x080102e4

08009d38 <memset>:
 8009d38:	4402      	add	r2, r0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d100      	bne.n	8009d42 <memset+0xa>
 8009d40:	4770      	bx	lr
 8009d42:	f803 1b01 	strb.w	r1, [r3], #1
 8009d46:	e7f9      	b.n	8009d3c <memset+0x4>

08009d48 <__cvt>:
 8009d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4c:	ec55 4b10 	vmov	r4, r5, d0
 8009d50:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009d52:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	460e      	mov	r6, r1
 8009d5a:	4691      	mov	r9, r2
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	bfb8      	it	lt
 8009d60:	4622      	movlt	r2, r4
 8009d62:	462b      	mov	r3, r5
 8009d64:	f027 0720 	bic.w	r7, r7, #32
 8009d68:	bfbb      	ittet	lt
 8009d6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d6e:	461d      	movlt	r5, r3
 8009d70:	2300      	movge	r3, #0
 8009d72:	232d      	movlt	r3, #45	; 0x2d
 8009d74:	bfb8      	it	lt
 8009d76:	4614      	movlt	r4, r2
 8009d78:	2f46      	cmp	r7, #70	; 0x46
 8009d7a:	700b      	strb	r3, [r1, #0]
 8009d7c:	d004      	beq.n	8009d88 <__cvt+0x40>
 8009d7e:	2f45      	cmp	r7, #69	; 0x45
 8009d80:	d100      	bne.n	8009d84 <__cvt+0x3c>
 8009d82:	3601      	adds	r6, #1
 8009d84:	2102      	movs	r1, #2
 8009d86:	e000      	b.n	8009d8a <__cvt+0x42>
 8009d88:	2103      	movs	r1, #3
 8009d8a:	ab03      	add	r3, sp, #12
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	ab02      	add	r3, sp, #8
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4632      	mov	r2, r6
 8009d94:	4653      	mov	r3, sl
 8009d96:	ec45 4b10 	vmov	d0, r4, r5
 8009d9a:	f000 fd71 	bl	800a880 <_dtoa_r>
 8009d9e:	2f47      	cmp	r7, #71	; 0x47
 8009da0:	4680      	mov	r8, r0
 8009da2:	d102      	bne.n	8009daa <__cvt+0x62>
 8009da4:	f019 0f01 	tst.w	r9, #1
 8009da8:	d026      	beq.n	8009df8 <__cvt+0xb0>
 8009daa:	2f46      	cmp	r7, #70	; 0x46
 8009dac:	eb08 0906 	add.w	r9, r8, r6
 8009db0:	d111      	bne.n	8009dd6 <__cvt+0x8e>
 8009db2:	f898 3000 	ldrb.w	r3, [r8]
 8009db6:	2b30      	cmp	r3, #48	; 0x30
 8009db8:	d10a      	bne.n	8009dd0 <__cvt+0x88>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f7f6 fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dc6:	b918      	cbnz	r0, 8009dd0 <__cvt+0x88>
 8009dc8:	f1c6 0601 	rsb	r6, r6, #1
 8009dcc:	f8ca 6000 	str.w	r6, [sl]
 8009dd0:	f8da 3000 	ldr.w	r3, [sl]
 8009dd4:	4499      	add	r9, r3
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	f7f6 fe7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009de2:	b938      	cbnz	r0, 8009df4 <__cvt+0xac>
 8009de4:	2230      	movs	r2, #48	; 0x30
 8009de6:	9b03      	ldr	r3, [sp, #12]
 8009de8:	454b      	cmp	r3, r9
 8009dea:	d205      	bcs.n	8009df8 <__cvt+0xb0>
 8009dec:	1c59      	adds	r1, r3, #1
 8009dee:	9103      	str	r1, [sp, #12]
 8009df0:	701a      	strb	r2, [r3, #0]
 8009df2:	e7f8      	b.n	8009de6 <__cvt+0x9e>
 8009df4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dfc:	eba3 0308 	sub.w	r3, r3, r8
 8009e00:	4640      	mov	r0, r8
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	b004      	add	sp, #16
 8009e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009e0a <__exponent>:
 8009e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	bfba      	itte	lt
 8009e12:	4249      	neglt	r1, r1
 8009e14:	232d      	movlt	r3, #45	; 0x2d
 8009e16:	232b      	movge	r3, #43	; 0x2b
 8009e18:	2909      	cmp	r1, #9
 8009e1a:	f804 2b02 	strb.w	r2, [r4], #2
 8009e1e:	7043      	strb	r3, [r0, #1]
 8009e20:	dd20      	ble.n	8009e64 <__exponent+0x5a>
 8009e22:	f10d 0307 	add.w	r3, sp, #7
 8009e26:	461f      	mov	r7, r3
 8009e28:	260a      	movs	r6, #10
 8009e2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e2e:	fb06 1115 	mls	r1, r6, r5, r1
 8009e32:	3130      	adds	r1, #48	; 0x30
 8009e34:	2d09      	cmp	r5, #9
 8009e36:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e3a:	f103 32ff 	add.w	r2, r3, #4294967295
 8009e3e:	4629      	mov	r1, r5
 8009e40:	dc09      	bgt.n	8009e56 <__exponent+0x4c>
 8009e42:	3130      	adds	r1, #48	; 0x30
 8009e44:	3b02      	subs	r3, #2
 8009e46:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e4a:	42bb      	cmp	r3, r7
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	d304      	bcc.n	8009e5a <__exponent+0x50>
 8009e50:	1a10      	subs	r0, r2, r0
 8009e52:	b003      	add	sp, #12
 8009e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e56:	4613      	mov	r3, r2
 8009e58:	e7e7      	b.n	8009e2a <__exponent+0x20>
 8009e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e5e:	f804 2b01 	strb.w	r2, [r4], #1
 8009e62:	e7f2      	b.n	8009e4a <__exponent+0x40>
 8009e64:	2330      	movs	r3, #48	; 0x30
 8009e66:	4419      	add	r1, r3
 8009e68:	7083      	strb	r3, [r0, #2]
 8009e6a:	1d02      	adds	r2, r0, #4
 8009e6c:	70c1      	strb	r1, [r0, #3]
 8009e6e:	e7ef      	b.n	8009e50 <__exponent+0x46>

08009e70 <_printf_float>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	b08d      	sub	sp, #52	; 0x34
 8009e76:	460c      	mov	r4, r1
 8009e78:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009e7c:	4616      	mov	r6, r2
 8009e7e:	461f      	mov	r7, r3
 8009e80:	4605      	mov	r5, r0
 8009e82:	f001 fab9 	bl	800b3f8 <_localeconv_r>
 8009e86:	6803      	ldr	r3, [r0, #0]
 8009e88:	9304      	str	r3, [sp, #16]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f6 f9a8 	bl	80001e0 <strlen>
 8009e90:	2300      	movs	r3, #0
 8009e92:	930a      	str	r3, [sp, #40]	; 0x28
 8009e94:	f8d8 3000 	ldr.w	r3, [r8]
 8009e98:	9005      	str	r0, [sp, #20]
 8009e9a:	3307      	adds	r3, #7
 8009e9c:	f023 0307 	bic.w	r3, r3, #7
 8009ea0:	f103 0208 	add.w	r2, r3, #8
 8009ea4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ea8:	f8d4 b000 	ldr.w	fp, [r4]
 8009eac:	f8c8 2000 	str.w	r2, [r8]
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009eb8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009ebc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ec0:	9307      	str	r3, [sp, #28]
 8009ec2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eca:	4ba7      	ldr	r3, [pc, #668]	; (800a168 <_printf_float+0x2f8>)
 8009ecc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ed0:	f7f6 fe34 	bl	8000b3c <__aeabi_dcmpun>
 8009ed4:	bb70      	cbnz	r0, 8009f34 <_printf_float+0xc4>
 8009ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eda:	4ba3      	ldr	r3, [pc, #652]	; (800a168 <_printf_float+0x2f8>)
 8009edc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ee0:	f7f6 fe0e 	bl	8000b00 <__aeabi_dcmple>
 8009ee4:	bb30      	cbnz	r0, 8009f34 <_printf_float+0xc4>
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 fdfd 	bl	8000aec <__aeabi_dcmplt>
 8009ef2:	b110      	cbz	r0, 8009efa <_printf_float+0x8a>
 8009ef4:	232d      	movs	r3, #45	; 0x2d
 8009ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009efa:	4a9c      	ldr	r2, [pc, #624]	; (800a16c <_printf_float+0x2fc>)
 8009efc:	4b9c      	ldr	r3, [pc, #624]	; (800a170 <_printf_float+0x300>)
 8009efe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009f02:	bf8c      	ite	hi
 8009f04:	4690      	movhi	r8, r2
 8009f06:	4698      	movls	r8, r3
 8009f08:	2303      	movs	r3, #3
 8009f0a:	f02b 0204 	bic.w	r2, fp, #4
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	6022      	str	r2, [r4, #0]
 8009f12:	f04f 0900 	mov.w	r9, #0
 8009f16:	9700      	str	r7, [sp, #0]
 8009f18:	4633      	mov	r3, r6
 8009f1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f000 f9e6 	bl	800a2f0 <_printf_common>
 8009f24:	3001      	adds	r0, #1
 8009f26:	f040 808d 	bne.w	800a044 <_printf_float+0x1d4>
 8009f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2e:	b00d      	add	sp, #52	; 0x34
 8009f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	4642      	mov	r2, r8
 8009f36:	464b      	mov	r3, r9
 8009f38:	4640      	mov	r0, r8
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	f7f6 fdfe 	bl	8000b3c <__aeabi_dcmpun>
 8009f40:	b110      	cbz	r0, 8009f48 <_printf_float+0xd8>
 8009f42:	4a8c      	ldr	r2, [pc, #560]	; (800a174 <_printf_float+0x304>)
 8009f44:	4b8c      	ldr	r3, [pc, #560]	; (800a178 <_printf_float+0x308>)
 8009f46:	e7da      	b.n	8009efe <_printf_float+0x8e>
 8009f48:	6861      	ldr	r1, [r4, #4]
 8009f4a:	1c4b      	adds	r3, r1, #1
 8009f4c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009f50:	a80a      	add	r0, sp, #40	; 0x28
 8009f52:	d13e      	bne.n	8009fd2 <_printf_float+0x162>
 8009f54:	2306      	movs	r3, #6
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009f5e:	ab09      	add	r3, sp, #36	; 0x24
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	ec49 8b10 	vmov	d0, r8, r9
 8009f66:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	f8cd a004 	str.w	sl, [sp, #4]
 8009f70:	6861      	ldr	r1, [r4, #4]
 8009f72:	4628      	mov	r0, r5
 8009f74:	f7ff fee8 	bl	8009d48 <__cvt>
 8009f78:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009f7c:	2b47      	cmp	r3, #71	; 0x47
 8009f7e:	4680      	mov	r8, r0
 8009f80:	d109      	bne.n	8009f96 <_printf_float+0x126>
 8009f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f84:	1cd8      	adds	r0, r3, #3
 8009f86:	db02      	blt.n	8009f8e <_printf_float+0x11e>
 8009f88:	6862      	ldr	r2, [r4, #4]
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	dd47      	ble.n	800a01e <_printf_float+0x1ae>
 8009f8e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f92:	fa5f fa8a 	uxtb.w	sl, sl
 8009f96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009f9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f9c:	d824      	bhi.n	8009fe8 <_printf_float+0x178>
 8009f9e:	3901      	subs	r1, #1
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fa6:	9109      	str	r1, [sp, #36]	; 0x24
 8009fa8:	f7ff ff2f 	bl	8009e0a <__exponent>
 8009fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fae:	1813      	adds	r3, r2, r0
 8009fb0:	2a01      	cmp	r2, #1
 8009fb2:	4681      	mov	r9, r0
 8009fb4:	6123      	str	r3, [r4, #16]
 8009fb6:	dc02      	bgt.n	8009fbe <_printf_float+0x14e>
 8009fb8:	6822      	ldr	r2, [r4, #0]
 8009fba:	07d1      	lsls	r1, r2, #31
 8009fbc:	d501      	bpl.n	8009fc2 <_printf_float+0x152>
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	6123      	str	r3, [r4, #16]
 8009fc2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0a5      	beq.n	8009f16 <_printf_float+0xa6>
 8009fca:	232d      	movs	r3, #45	; 0x2d
 8009fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd0:	e7a1      	b.n	8009f16 <_printf_float+0xa6>
 8009fd2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009fd6:	f000 8177 	beq.w	800a2c8 <_printf_float+0x458>
 8009fda:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009fde:	d1bb      	bne.n	8009f58 <_printf_float+0xe8>
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	d1b9      	bne.n	8009f58 <_printf_float+0xe8>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e7b6      	b.n	8009f56 <_printf_float+0xe6>
 8009fe8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009fec:	d119      	bne.n	800a022 <_printf_float+0x1b2>
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	6863      	ldr	r3, [r4, #4]
 8009ff2:	dd0c      	ble.n	800a00e <_printf_float+0x19e>
 8009ff4:	6121      	str	r1, [r4, #16]
 8009ff6:	b913      	cbnz	r3, 8009ffe <_printf_float+0x18e>
 8009ff8:	6822      	ldr	r2, [r4, #0]
 8009ffa:	07d2      	lsls	r2, r2, #31
 8009ffc:	d502      	bpl.n	800a004 <_printf_float+0x194>
 8009ffe:	3301      	adds	r3, #1
 800a000:	440b      	add	r3, r1
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a006:	65a3      	str	r3, [r4, #88]	; 0x58
 800a008:	f04f 0900 	mov.w	r9, #0
 800a00c:	e7d9      	b.n	8009fc2 <_printf_float+0x152>
 800a00e:	b913      	cbnz	r3, 800a016 <_printf_float+0x1a6>
 800a010:	6822      	ldr	r2, [r4, #0]
 800a012:	07d0      	lsls	r0, r2, #31
 800a014:	d501      	bpl.n	800a01a <_printf_float+0x1aa>
 800a016:	3302      	adds	r3, #2
 800a018:	e7f3      	b.n	800a002 <_printf_float+0x192>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e7f1      	b.n	800a002 <_printf_float+0x192>
 800a01e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a022:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a026:	4293      	cmp	r3, r2
 800a028:	db05      	blt.n	800a036 <_printf_float+0x1c6>
 800a02a:	6822      	ldr	r2, [r4, #0]
 800a02c:	6123      	str	r3, [r4, #16]
 800a02e:	07d1      	lsls	r1, r2, #31
 800a030:	d5e8      	bpl.n	800a004 <_printf_float+0x194>
 800a032:	3301      	adds	r3, #1
 800a034:	e7e5      	b.n	800a002 <_printf_float+0x192>
 800a036:	2b00      	cmp	r3, #0
 800a038:	bfd4      	ite	le
 800a03a:	f1c3 0302 	rsble	r3, r3, #2
 800a03e:	2301      	movgt	r3, #1
 800a040:	4413      	add	r3, r2
 800a042:	e7de      	b.n	800a002 <_printf_float+0x192>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	055a      	lsls	r2, r3, #21
 800a048:	d407      	bmi.n	800a05a <_printf_float+0x1ea>
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	4642      	mov	r2, r8
 800a04e:	4631      	mov	r1, r6
 800a050:	4628      	mov	r0, r5
 800a052:	47b8      	blx	r7
 800a054:	3001      	adds	r0, #1
 800a056:	d12b      	bne.n	800a0b0 <_printf_float+0x240>
 800a058:	e767      	b.n	8009f2a <_printf_float+0xba>
 800a05a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a05e:	f240 80dc 	bls.w	800a21a <_printf_float+0x3aa>
 800a062:	2200      	movs	r2, #0
 800a064:	2300      	movs	r3, #0
 800a066:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a06a:	f7f6 fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d033      	beq.n	800a0da <_printf_float+0x26a>
 800a072:	2301      	movs	r3, #1
 800a074:	4a41      	ldr	r2, [pc, #260]	; (800a17c <_printf_float+0x30c>)
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	f43f af54 	beq.w	8009f2a <_printf_float+0xba>
 800a082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a086:	429a      	cmp	r2, r3
 800a088:	db02      	blt.n	800a090 <_printf_float+0x220>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	07d8      	lsls	r0, r3, #31
 800a08e:	d50f      	bpl.n	800a0b0 <_printf_float+0x240>
 800a090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a094:	4631      	mov	r1, r6
 800a096:	4628      	mov	r0, r5
 800a098:	47b8      	blx	r7
 800a09a:	3001      	adds	r0, #1
 800a09c:	f43f af45 	beq.w	8009f2a <_printf_float+0xba>
 800a0a0:	f04f 0800 	mov.w	r8, #0
 800a0a4:	f104 091a 	add.w	r9, r4, #26
 800a0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	4543      	cmp	r3, r8
 800a0ae:	dc09      	bgt.n	800a0c4 <_printf_float+0x254>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	079b      	lsls	r3, r3, #30
 800a0b4:	f100 8103 	bmi.w	800a2be <_printf_float+0x44e>
 800a0b8:	68e0      	ldr	r0, [r4, #12]
 800a0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0bc:	4298      	cmp	r0, r3
 800a0be:	bfb8      	it	lt
 800a0c0:	4618      	movlt	r0, r3
 800a0c2:	e734      	b.n	8009f2e <_printf_float+0xbe>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	464a      	mov	r2, r9
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	47b8      	blx	r7
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f43f af2b 	beq.w	8009f2a <_printf_float+0xba>
 800a0d4:	f108 0801 	add.w	r8, r8, #1
 800a0d8:	e7e6      	b.n	800a0a8 <_printf_float+0x238>
 800a0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dc2b      	bgt.n	800a138 <_printf_float+0x2c8>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	4a26      	ldr	r2, [pc, #152]	; (800a17c <_printf_float+0x30c>)
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	47b8      	blx	r7
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	f43f af1d 	beq.w	8009f2a <_printf_float+0xba>
 800a0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f2:	b923      	cbnz	r3, 800a0fe <_printf_float+0x28e>
 800a0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f6:	b913      	cbnz	r3, 800a0fe <_printf_float+0x28e>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	07d9      	lsls	r1, r3, #31
 800a0fc:	d5d8      	bpl.n	800a0b0 <_printf_float+0x240>
 800a0fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f af0e 	beq.w	8009f2a <_printf_float+0xba>
 800a10e:	f04f 0900 	mov.w	r9, #0
 800a112:	f104 0a1a 	add.w	sl, r4, #26
 800a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a118:	425b      	negs	r3, r3
 800a11a:	454b      	cmp	r3, r9
 800a11c:	dc01      	bgt.n	800a122 <_printf_float+0x2b2>
 800a11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a120:	e794      	b.n	800a04c <_printf_float+0x1dc>
 800a122:	2301      	movs	r3, #1
 800a124:	4652      	mov	r2, sl
 800a126:	4631      	mov	r1, r6
 800a128:	4628      	mov	r0, r5
 800a12a:	47b8      	blx	r7
 800a12c:	3001      	adds	r0, #1
 800a12e:	f43f aefc 	beq.w	8009f2a <_printf_float+0xba>
 800a132:	f109 0901 	add.w	r9, r9, #1
 800a136:	e7ee      	b.n	800a116 <_printf_float+0x2a6>
 800a138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a13a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a13c:	429a      	cmp	r2, r3
 800a13e:	bfa8      	it	ge
 800a140:	461a      	movge	r2, r3
 800a142:	2a00      	cmp	r2, #0
 800a144:	4691      	mov	r9, r2
 800a146:	dd07      	ble.n	800a158 <_printf_float+0x2e8>
 800a148:	4613      	mov	r3, r2
 800a14a:	4631      	mov	r1, r6
 800a14c:	4642      	mov	r2, r8
 800a14e:	4628      	mov	r0, r5
 800a150:	47b8      	blx	r7
 800a152:	3001      	adds	r0, #1
 800a154:	f43f aee9 	beq.w	8009f2a <_printf_float+0xba>
 800a158:	f104 031a 	add.w	r3, r4, #26
 800a15c:	f04f 0b00 	mov.w	fp, #0
 800a160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a164:	9306      	str	r3, [sp, #24]
 800a166:	e015      	b.n	800a194 <_printf_float+0x324>
 800a168:	7fefffff 	.word	0x7fefffff
 800a16c:	08010084 	.word	0x08010084
 800a170:	08010080 	.word	0x08010080
 800a174:	0801008c 	.word	0x0801008c
 800a178:	08010088 	.word	0x08010088
 800a17c:	08010090 	.word	0x08010090
 800a180:	2301      	movs	r3, #1
 800a182:	9a06      	ldr	r2, [sp, #24]
 800a184:	4631      	mov	r1, r6
 800a186:	4628      	mov	r0, r5
 800a188:	47b8      	blx	r7
 800a18a:	3001      	adds	r0, #1
 800a18c:	f43f aecd 	beq.w	8009f2a <_printf_float+0xba>
 800a190:	f10b 0b01 	add.w	fp, fp, #1
 800a194:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a198:	ebaa 0309 	sub.w	r3, sl, r9
 800a19c:	455b      	cmp	r3, fp
 800a19e:	dcef      	bgt.n	800a180 <_printf_float+0x310>
 800a1a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	44d0      	add	r8, sl
 800a1a8:	db15      	blt.n	800a1d6 <_printf_float+0x366>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	07da      	lsls	r2, r3, #31
 800a1ae:	d412      	bmi.n	800a1d6 <_printf_float+0x366>
 800a1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1b4:	eba3 020a 	sub.w	r2, r3, sl
 800a1b8:	eba3 0a01 	sub.w	sl, r3, r1
 800a1bc:	4592      	cmp	sl, r2
 800a1be:	bfa8      	it	ge
 800a1c0:	4692      	movge	sl, r2
 800a1c2:	f1ba 0f00 	cmp.w	sl, #0
 800a1c6:	dc0e      	bgt.n	800a1e6 <_printf_float+0x376>
 800a1c8:	f04f 0800 	mov.w	r8, #0
 800a1cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1d0:	f104 091a 	add.w	r9, r4, #26
 800a1d4:	e019      	b.n	800a20a <_printf_float+0x39a>
 800a1d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4628      	mov	r0, r5
 800a1de:	47b8      	blx	r7
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d1e5      	bne.n	800a1b0 <_printf_float+0x340>
 800a1e4:	e6a1      	b.n	8009f2a <_printf_float+0xba>
 800a1e6:	4653      	mov	r3, sl
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	47b8      	blx	r7
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	d1e9      	bne.n	800a1c8 <_printf_float+0x358>
 800a1f4:	e699      	b.n	8009f2a <_printf_float+0xba>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	464a      	mov	r2, r9
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	f43f ae92 	beq.w	8009f2a <_printf_float+0xba>
 800a206:	f108 0801 	add.w	r8, r8, #1
 800a20a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a20e:	1a9b      	subs	r3, r3, r2
 800a210:	eba3 030a 	sub.w	r3, r3, sl
 800a214:	4543      	cmp	r3, r8
 800a216:	dcee      	bgt.n	800a1f6 <_printf_float+0x386>
 800a218:	e74a      	b.n	800a0b0 <_printf_float+0x240>
 800a21a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a21c:	2a01      	cmp	r2, #1
 800a21e:	dc01      	bgt.n	800a224 <_printf_float+0x3b4>
 800a220:	07db      	lsls	r3, r3, #31
 800a222:	d53a      	bpl.n	800a29a <_printf_float+0x42a>
 800a224:	2301      	movs	r3, #1
 800a226:	4642      	mov	r2, r8
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b8      	blx	r7
 800a22e:	3001      	adds	r0, #1
 800a230:	f43f ae7b 	beq.w	8009f2a <_printf_float+0xba>
 800a234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f108 0801 	add.w	r8, r8, #1
 800a244:	f43f ae71 	beq.w	8009f2a <_printf_float+0xba>
 800a248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24a:	2200      	movs	r2, #0
 800a24c:	f103 3aff 	add.w	sl, r3, #4294967295
 800a250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a254:	2300      	movs	r3, #0
 800a256:	f7f6 fc3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a25a:	b9c8      	cbnz	r0, 800a290 <_printf_float+0x420>
 800a25c:	4653      	mov	r3, sl
 800a25e:	4642      	mov	r2, r8
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	d10e      	bne.n	800a288 <_printf_float+0x418>
 800a26a:	e65e      	b.n	8009f2a <_printf_float+0xba>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4652      	mov	r2, sl
 800a270:	4631      	mov	r1, r6
 800a272:	4628      	mov	r0, r5
 800a274:	47b8      	blx	r7
 800a276:	3001      	adds	r0, #1
 800a278:	f43f ae57 	beq.w	8009f2a <_printf_float+0xba>
 800a27c:	f108 0801 	add.w	r8, r8, #1
 800a280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a282:	3b01      	subs	r3, #1
 800a284:	4543      	cmp	r3, r8
 800a286:	dcf1      	bgt.n	800a26c <_printf_float+0x3fc>
 800a288:	464b      	mov	r3, r9
 800a28a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a28e:	e6de      	b.n	800a04e <_printf_float+0x1de>
 800a290:	f04f 0800 	mov.w	r8, #0
 800a294:	f104 0a1a 	add.w	sl, r4, #26
 800a298:	e7f2      	b.n	800a280 <_printf_float+0x410>
 800a29a:	2301      	movs	r3, #1
 800a29c:	e7df      	b.n	800a25e <_printf_float+0x3ee>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	464a      	mov	r2, r9
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f ae3e 	beq.w	8009f2a <_printf_float+0xba>
 800a2ae:	f108 0801 	add.w	r8, r8, #1
 800a2b2:	68e3      	ldr	r3, [r4, #12]
 800a2b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2b6:	1a9b      	subs	r3, r3, r2
 800a2b8:	4543      	cmp	r3, r8
 800a2ba:	dcf0      	bgt.n	800a29e <_printf_float+0x42e>
 800a2bc:	e6fc      	b.n	800a0b8 <_printf_float+0x248>
 800a2be:	f04f 0800 	mov.w	r8, #0
 800a2c2:	f104 0919 	add.w	r9, r4, #25
 800a2c6:	e7f4      	b.n	800a2b2 <_printf_float+0x442>
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	f43f ae8b 	beq.w	8009fe4 <_printf_float+0x174>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a2d4:	ab09      	add	r3, sp, #36	; 0x24
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	ec49 8b10 	vmov	d0, r8, r9
 800a2dc:	6022      	str	r2, [r4, #0]
 800a2de:	f8cd a004 	str.w	sl, [sp, #4]
 800a2e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f7ff fd2e 	bl	8009d48 <__cvt>
 800a2ec:	4680      	mov	r8, r0
 800a2ee:	e648      	b.n	8009f82 <_printf_float+0x112>

0800a2f0 <_printf_common>:
 800a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	4691      	mov	r9, r2
 800a2f6:	461f      	mov	r7, r3
 800a2f8:	688a      	ldr	r2, [r1, #8]
 800a2fa:	690b      	ldr	r3, [r1, #16]
 800a2fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a300:	4293      	cmp	r3, r2
 800a302:	bfb8      	it	lt
 800a304:	4613      	movlt	r3, r2
 800a306:	f8c9 3000 	str.w	r3, [r9]
 800a30a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a30e:	4606      	mov	r6, r0
 800a310:	460c      	mov	r4, r1
 800a312:	b112      	cbz	r2, 800a31a <_printf_common+0x2a>
 800a314:	3301      	adds	r3, #1
 800a316:	f8c9 3000 	str.w	r3, [r9]
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	0699      	lsls	r1, r3, #26
 800a31e:	bf42      	ittt	mi
 800a320:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a324:	3302      	addmi	r3, #2
 800a326:	f8c9 3000 	strmi.w	r3, [r9]
 800a32a:	6825      	ldr	r5, [r4, #0]
 800a32c:	f015 0506 	ands.w	r5, r5, #6
 800a330:	d107      	bne.n	800a342 <_printf_common+0x52>
 800a332:	f104 0a19 	add.w	sl, r4, #25
 800a336:	68e3      	ldr	r3, [r4, #12]
 800a338:	f8d9 2000 	ldr.w	r2, [r9]
 800a33c:	1a9b      	subs	r3, r3, r2
 800a33e:	42ab      	cmp	r3, r5
 800a340:	dc28      	bgt.n	800a394 <_printf_common+0xa4>
 800a342:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a346:	6822      	ldr	r2, [r4, #0]
 800a348:	3300      	adds	r3, #0
 800a34a:	bf18      	it	ne
 800a34c:	2301      	movne	r3, #1
 800a34e:	0692      	lsls	r2, r2, #26
 800a350:	d42d      	bmi.n	800a3ae <_printf_common+0xbe>
 800a352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a356:	4639      	mov	r1, r7
 800a358:	4630      	mov	r0, r6
 800a35a:	47c0      	blx	r8
 800a35c:	3001      	adds	r0, #1
 800a35e:	d020      	beq.n	800a3a2 <_printf_common+0xb2>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	68e5      	ldr	r5, [r4, #12]
 800a364:	f8d9 2000 	ldr.w	r2, [r9]
 800a368:	f003 0306 	and.w	r3, r3, #6
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	bf08      	it	eq
 800a370:	1aad      	subeq	r5, r5, r2
 800a372:	68a3      	ldr	r3, [r4, #8]
 800a374:	6922      	ldr	r2, [r4, #16]
 800a376:	bf0c      	ite	eq
 800a378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a37c:	2500      	movne	r5, #0
 800a37e:	4293      	cmp	r3, r2
 800a380:	bfc4      	itt	gt
 800a382:	1a9b      	subgt	r3, r3, r2
 800a384:	18ed      	addgt	r5, r5, r3
 800a386:	f04f 0900 	mov.w	r9, #0
 800a38a:	341a      	adds	r4, #26
 800a38c:	454d      	cmp	r5, r9
 800a38e:	d11a      	bne.n	800a3c6 <_printf_common+0xd6>
 800a390:	2000      	movs	r0, #0
 800a392:	e008      	b.n	800a3a6 <_printf_common+0xb6>
 800a394:	2301      	movs	r3, #1
 800a396:	4652      	mov	r2, sl
 800a398:	4639      	mov	r1, r7
 800a39a:	4630      	mov	r0, r6
 800a39c:	47c0      	blx	r8
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d103      	bne.n	800a3aa <_printf_common+0xba>
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3aa:	3501      	adds	r5, #1
 800a3ac:	e7c3      	b.n	800a336 <_printf_common+0x46>
 800a3ae:	18e1      	adds	r1, r4, r3
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	2030      	movs	r0, #48	; 0x30
 800a3b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3b8:	4422      	add	r2, r4
 800a3ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	e7c5      	b.n	800a352 <_printf_common+0x62>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	47c0      	blx	r8
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d0e6      	beq.n	800a3a2 <_printf_common+0xb2>
 800a3d4:	f109 0901 	add.w	r9, r9, #1
 800a3d8:	e7d8      	b.n	800a38c <_printf_common+0x9c>
	...

0800a3dc <_printf_i>:
 800a3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	7e09      	ldrb	r1, [r1, #24]
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	296e      	cmp	r1, #110	; 0x6e
 800a3ec:	4617      	mov	r7, r2
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	4698      	mov	r8, r3
 800a3f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f4:	f000 80b3 	beq.w	800a55e <_printf_i+0x182>
 800a3f8:	d822      	bhi.n	800a440 <_printf_i+0x64>
 800a3fa:	2963      	cmp	r1, #99	; 0x63
 800a3fc:	d036      	beq.n	800a46c <_printf_i+0x90>
 800a3fe:	d80a      	bhi.n	800a416 <_printf_i+0x3a>
 800a400:	2900      	cmp	r1, #0
 800a402:	f000 80b9 	beq.w	800a578 <_printf_i+0x19c>
 800a406:	2958      	cmp	r1, #88	; 0x58
 800a408:	f000 8083 	beq.w	800a512 <_printf_i+0x136>
 800a40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a410:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a414:	e032      	b.n	800a47c <_printf_i+0xa0>
 800a416:	2964      	cmp	r1, #100	; 0x64
 800a418:	d001      	beq.n	800a41e <_printf_i+0x42>
 800a41a:	2969      	cmp	r1, #105	; 0x69
 800a41c:	d1f6      	bne.n	800a40c <_printf_i+0x30>
 800a41e:	6820      	ldr	r0, [r4, #0]
 800a420:	6813      	ldr	r3, [r2, #0]
 800a422:	0605      	lsls	r5, r0, #24
 800a424:	f103 0104 	add.w	r1, r3, #4
 800a428:	d52a      	bpl.n	800a480 <_printf_i+0xa4>
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6011      	str	r1, [r2, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	da03      	bge.n	800a43a <_printf_i+0x5e>
 800a432:	222d      	movs	r2, #45	; 0x2d
 800a434:	425b      	negs	r3, r3
 800a436:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a43a:	486f      	ldr	r0, [pc, #444]	; (800a5f8 <_printf_i+0x21c>)
 800a43c:	220a      	movs	r2, #10
 800a43e:	e039      	b.n	800a4b4 <_printf_i+0xd8>
 800a440:	2973      	cmp	r1, #115	; 0x73
 800a442:	f000 809d 	beq.w	800a580 <_printf_i+0x1a4>
 800a446:	d808      	bhi.n	800a45a <_printf_i+0x7e>
 800a448:	296f      	cmp	r1, #111	; 0x6f
 800a44a:	d020      	beq.n	800a48e <_printf_i+0xb2>
 800a44c:	2970      	cmp	r1, #112	; 0x70
 800a44e:	d1dd      	bne.n	800a40c <_printf_i+0x30>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	f043 0320 	orr.w	r3, r3, #32
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	e003      	b.n	800a462 <_printf_i+0x86>
 800a45a:	2975      	cmp	r1, #117	; 0x75
 800a45c:	d017      	beq.n	800a48e <_printf_i+0xb2>
 800a45e:	2978      	cmp	r1, #120	; 0x78
 800a460:	d1d4      	bne.n	800a40c <_printf_i+0x30>
 800a462:	2378      	movs	r3, #120	; 0x78
 800a464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a468:	4864      	ldr	r0, [pc, #400]	; (800a5fc <_printf_i+0x220>)
 800a46a:	e055      	b.n	800a518 <_printf_i+0x13c>
 800a46c:	6813      	ldr	r3, [r2, #0]
 800a46e:	1d19      	adds	r1, r3, #4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6011      	str	r1, [r2, #0]
 800a474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a47c:	2301      	movs	r3, #1
 800a47e:	e08c      	b.n	800a59a <_printf_i+0x1be>
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6011      	str	r1, [r2, #0]
 800a484:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a488:	bf18      	it	ne
 800a48a:	b21b      	sxthne	r3, r3
 800a48c:	e7cf      	b.n	800a42e <_printf_i+0x52>
 800a48e:	6813      	ldr	r3, [r2, #0]
 800a490:	6825      	ldr	r5, [r4, #0]
 800a492:	1d18      	adds	r0, r3, #4
 800a494:	6010      	str	r0, [r2, #0]
 800a496:	0628      	lsls	r0, r5, #24
 800a498:	d501      	bpl.n	800a49e <_printf_i+0xc2>
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	e002      	b.n	800a4a4 <_printf_i+0xc8>
 800a49e:	0668      	lsls	r0, r5, #25
 800a4a0:	d5fb      	bpl.n	800a49a <_printf_i+0xbe>
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	4854      	ldr	r0, [pc, #336]	; (800a5f8 <_printf_i+0x21c>)
 800a4a6:	296f      	cmp	r1, #111	; 0x6f
 800a4a8:	bf14      	ite	ne
 800a4aa:	220a      	movne	r2, #10
 800a4ac:	2208      	moveq	r2, #8
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4b4:	6865      	ldr	r5, [r4, #4]
 800a4b6:	60a5      	str	r5, [r4, #8]
 800a4b8:	2d00      	cmp	r5, #0
 800a4ba:	f2c0 8095 	blt.w	800a5e8 <_printf_i+0x20c>
 800a4be:	6821      	ldr	r1, [r4, #0]
 800a4c0:	f021 0104 	bic.w	r1, r1, #4
 800a4c4:	6021      	str	r1, [r4, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d13d      	bne.n	800a546 <_printf_i+0x16a>
 800a4ca:	2d00      	cmp	r5, #0
 800a4cc:	f040 808e 	bne.w	800a5ec <_printf_i+0x210>
 800a4d0:	4665      	mov	r5, ip
 800a4d2:	2a08      	cmp	r2, #8
 800a4d4:	d10b      	bne.n	800a4ee <_printf_i+0x112>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	07db      	lsls	r3, r3, #31
 800a4da:	d508      	bpl.n	800a4ee <_printf_i+0x112>
 800a4dc:	6923      	ldr	r3, [r4, #16]
 800a4de:	6862      	ldr	r2, [r4, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	bfde      	ittt	le
 800a4e4:	2330      	movle	r3, #48	; 0x30
 800a4e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4ee:	ebac 0305 	sub.w	r3, ip, r5
 800a4f2:	6123      	str	r3, [r4, #16]
 800a4f4:	f8cd 8000 	str.w	r8, [sp]
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	aa03      	add	r2, sp, #12
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff fef6 	bl	800a2f0 <_printf_common>
 800a504:	3001      	adds	r0, #1
 800a506:	d14d      	bne.n	800a5a4 <_printf_i+0x1c8>
 800a508:	f04f 30ff 	mov.w	r0, #4294967295
 800a50c:	b005      	add	sp, #20
 800a50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a512:	4839      	ldr	r0, [pc, #228]	; (800a5f8 <_printf_i+0x21c>)
 800a514:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a518:	6813      	ldr	r3, [r2, #0]
 800a51a:	6821      	ldr	r1, [r4, #0]
 800a51c:	1d1d      	adds	r5, r3, #4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6015      	str	r5, [r2, #0]
 800a522:	060a      	lsls	r2, r1, #24
 800a524:	d50b      	bpl.n	800a53e <_printf_i+0x162>
 800a526:	07ca      	lsls	r2, r1, #31
 800a528:	bf44      	itt	mi
 800a52a:	f041 0120 	orrmi.w	r1, r1, #32
 800a52e:	6021      	strmi	r1, [r4, #0]
 800a530:	b91b      	cbnz	r3, 800a53a <_printf_i+0x15e>
 800a532:	6822      	ldr	r2, [r4, #0]
 800a534:	f022 0220 	bic.w	r2, r2, #32
 800a538:	6022      	str	r2, [r4, #0]
 800a53a:	2210      	movs	r2, #16
 800a53c:	e7b7      	b.n	800a4ae <_printf_i+0xd2>
 800a53e:	064d      	lsls	r5, r1, #25
 800a540:	bf48      	it	mi
 800a542:	b29b      	uxthmi	r3, r3
 800a544:	e7ef      	b.n	800a526 <_printf_i+0x14a>
 800a546:	4665      	mov	r5, ip
 800a548:	fbb3 f1f2 	udiv	r1, r3, r2
 800a54c:	fb02 3311 	mls	r3, r2, r1, r3
 800a550:	5cc3      	ldrb	r3, [r0, r3]
 800a552:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a556:	460b      	mov	r3, r1
 800a558:	2900      	cmp	r1, #0
 800a55a:	d1f5      	bne.n	800a548 <_printf_i+0x16c>
 800a55c:	e7b9      	b.n	800a4d2 <_printf_i+0xf6>
 800a55e:	6813      	ldr	r3, [r2, #0]
 800a560:	6825      	ldr	r5, [r4, #0]
 800a562:	6961      	ldr	r1, [r4, #20]
 800a564:	1d18      	adds	r0, r3, #4
 800a566:	6010      	str	r0, [r2, #0]
 800a568:	0628      	lsls	r0, r5, #24
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	d501      	bpl.n	800a572 <_printf_i+0x196>
 800a56e:	6019      	str	r1, [r3, #0]
 800a570:	e002      	b.n	800a578 <_printf_i+0x19c>
 800a572:	066a      	lsls	r2, r5, #25
 800a574:	d5fb      	bpl.n	800a56e <_printf_i+0x192>
 800a576:	8019      	strh	r1, [r3, #0]
 800a578:	2300      	movs	r3, #0
 800a57a:	6123      	str	r3, [r4, #16]
 800a57c:	4665      	mov	r5, ip
 800a57e:	e7b9      	b.n	800a4f4 <_printf_i+0x118>
 800a580:	6813      	ldr	r3, [r2, #0]
 800a582:	1d19      	adds	r1, r3, #4
 800a584:	6011      	str	r1, [r2, #0]
 800a586:	681d      	ldr	r5, [r3, #0]
 800a588:	6862      	ldr	r2, [r4, #4]
 800a58a:	2100      	movs	r1, #0
 800a58c:	4628      	mov	r0, r5
 800a58e:	f7f5 fe2f 	bl	80001f0 <memchr>
 800a592:	b108      	cbz	r0, 800a598 <_printf_i+0x1bc>
 800a594:	1b40      	subs	r0, r0, r5
 800a596:	6060      	str	r0, [r4, #4]
 800a598:	6863      	ldr	r3, [r4, #4]
 800a59a:	6123      	str	r3, [r4, #16]
 800a59c:	2300      	movs	r3, #0
 800a59e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5a2:	e7a7      	b.n	800a4f4 <_printf_i+0x118>
 800a5a4:	6923      	ldr	r3, [r4, #16]
 800a5a6:	462a      	mov	r2, r5
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	47c0      	blx	r8
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d0aa      	beq.n	800a508 <_printf_i+0x12c>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	079b      	lsls	r3, r3, #30
 800a5b6:	d413      	bmi.n	800a5e0 <_printf_i+0x204>
 800a5b8:	68e0      	ldr	r0, [r4, #12]
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	4298      	cmp	r0, r3
 800a5be:	bfb8      	it	lt
 800a5c0:	4618      	movlt	r0, r3
 800a5c2:	e7a3      	b.n	800a50c <_printf_i+0x130>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	464a      	mov	r2, r9
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	47c0      	blx	r8
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	d09a      	beq.n	800a508 <_printf_i+0x12c>
 800a5d2:	3501      	adds	r5, #1
 800a5d4:	68e3      	ldr	r3, [r4, #12]
 800a5d6:	9a03      	ldr	r2, [sp, #12]
 800a5d8:	1a9b      	subs	r3, r3, r2
 800a5da:	42ab      	cmp	r3, r5
 800a5dc:	dcf2      	bgt.n	800a5c4 <_printf_i+0x1e8>
 800a5de:	e7eb      	b.n	800a5b8 <_printf_i+0x1dc>
 800a5e0:	2500      	movs	r5, #0
 800a5e2:	f104 0919 	add.w	r9, r4, #25
 800a5e6:	e7f5      	b.n	800a5d4 <_printf_i+0x1f8>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1ac      	bne.n	800a546 <_printf_i+0x16a>
 800a5ec:	7803      	ldrb	r3, [r0, #0]
 800a5ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5f6:	e76c      	b.n	800a4d2 <_printf_i+0xf6>
 800a5f8:	08010092 	.word	0x08010092
 800a5fc:	080100a3 	.word	0x080100a3

0800a600 <_strtol_l.isra.0>:
 800a600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a604:	4680      	mov	r8, r0
 800a606:	4689      	mov	r9, r1
 800a608:	4692      	mov	sl, r2
 800a60a:	461e      	mov	r6, r3
 800a60c:	460f      	mov	r7, r1
 800a60e:	463d      	mov	r5, r7
 800a610:	9808      	ldr	r0, [sp, #32]
 800a612:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a616:	f000 feeb 	bl	800b3f0 <__locale_ctype_ptr_l>
 800a61a:	4420      	add	r0, r4
 800a61c:	7843      	ldrb	r3, [r0, #1]
 800a61e:	f013 0308 	ands.w	r3, r3, #8
 800a622:	d132      	bne.n	800a68a <_strtol_l.isra.0+0x8a>
 800a624:	2c2d      	cmp	r4, #45	; 0x2d
 800a626:	d132      	bne.n	800a68e <_strtol_l.isra.0+0x8e>
 800a628:	787c      	ldrb	r4, [r7, #1]
 800a62a:	1cbd      	adds	r5, r7, #2
 800a62c:	2201      	movs	r2, #1
 800a62e:	2e00      	cmp	r6, #0
 800a630:	d05d      	beq.n	800a6ee <_strtol_l.isra.0+0xee>
 800a632:	2e10      	cmp	r6, #16
 800a634:	d109      	bne.n	800a64a <_strtol_l.isra.0+0x4a>
 800a636:	2c30      	cmp	r4, #48	; 0x30
 800a638:	d107      	bne.n	800a64a <_strtol_l.isra.0+0x4a>
 800a63a:	782b      	ldrb	r3, [r5, #0]
 800a63c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a640:	2b58      	cmp	r3, #88	; 0x58
 800a642:	d14f      	bne.n	800a6e4 <_strtol_l.isra.0+0xe4>
 800a644:	786c      	ldrb	r4, [r5, #1]
 800a646:	2610      	movs	r6, #16
 800a648:	3502      	adds	r5, #2
 800a64a:	2a00      	cmp	r2, #0
 800a64c:	bf14      	ite	ne
 800a64e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a652:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a656:	2700      	movs	r7, #0
 800a658:	fbb1 fcf6 	udiv	ip, r1, r6
 800a65c:	4638      	mov	r0, r7
 800a65e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a662:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a666:	2b09      	cmp	r3, #9
 800a668:	d817      	bhi.n	800a69a <_strtol_l.isra.0+0x9a>
 800a66a:	461c      	mov	r4, r3
 800a66c:	42a6      	cmp	r6, r4
 800a66e:	dd23      	ble.n	800a6b8 <_strtol_l.isra.0+0xb8>
 800a670:	1c7b      	adds	r3, r7, #1
 800a672:	d007      	beq.n	800a684 <_strtol_l.isra.0+0x84>
 800a674:	4584      	cmp	ip, r0
 800a676:	d31c      	bcc.n	800a6b2 <_strtol_l.isra.0+0xb2>
 800a678:	d101      	bne.n	800a67e <_strtol_l.isra.0+0x7e>
 800a67a:	45a6      	cmp	lr, r4
 800a67c:	db19      	blt.n	800a6b2 <_strtol_l.isra.0+0xb2>
 800a67e:	fb00 4006 	mla	r0, r0, r6, r4
 800a682:	2701      	movs	r7, #1
 800a684:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a688:	e7eb      	b.n	800a662 <_strtol_l.isra.0+0x62>
 800a68a:	462f      	mov	r7, r5
 800a68c:	e7bf      	b.n	800a60e <_strtol_l.isra.0+0xe>
 800a68e:	2c2b      	cmp	r4, #43	; 0x2b
 800a690:	bf04      	itt	eq
 800a692:	1cbd      	addeq	r5, r7, #2
 800a694:	787c      	ldrbeq	r4, [r7, #1]
 800a696:	461a      	mov	r2, r3
 800a698:	e7c9      	b.n	800a62e <_strtol_l.isra.0+0x2e>
 800a69a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a69e:	2b19      	cmp	r3, #25
 800a6a0:	d801      	bhi.n	800a6a6 <_strtol_l.isra.0+0xa6>
 800a6a2:	3c37      	subs	r4, #55	; 0x37
 800a6a4:	e7e2      	b.n	800a66c <_strtol_l.isra.0+0x6c>
 800a6a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a6aa:	2b19      	cmp	r3, #25
 800a6ac:	d804      	bhi.n	800a6b8 <_strtol_l.isra.0+0xb8>
 800a6ae:	3c57      	subs	r4, #87	; 0x57
 800a6b0:	e7dc      	b.n	800a66c <_strtol_l.isra.0+0x6c>
 800a6b2:	f04f 37ff 	mov.w	r7, #4294967295
 800a6b6:	e7e5      	b.n	800a684 <_strtol_l.isra.0+0x84>
 800a6b8:	1c7b      	adds	r3, r7, #1
 800a6ba:	d108      	bne.n	800a6ce <_strtol_l.isra.0+0xce>
 800a6bc:	2322      	movs	r3, #34	; 0x22
 800a6be:	f8c8 3000 	str.w	r3, [r8]
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	f1ba 0f00 	cmp.w	sl, #0
 800a6c8:	d107      	bne.n	800a6da <_strtol_l.isra.0+0xda>
 800a6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ce:	b102      	cbz	r2, 800a6d2 <_strtol_l.isra.0+0xd2>
 800a6d0:	4240      	negs	r0, r0
 800a6d2:	f1ba 0f00 	cmp.w	sl, #0
 800a6d6:	d0f8      	beq.n	800a6ca <_strtol_l.isra.0+0xca>
 800a6d8:	b10f      	cbz	r7, 800a6de <_strtol_l.isra.0+0xde>
 800a6da:	f105 39ff 	add.w	r9, r5, #4294967295
 800a6de:	f8ca 9000 	str.w	r9, [sl]
 800a6e2:	e7f2      	b.n	800a6ca <_strtol_l.isra.0+0xca>
 800a6e4:	2430      	movs	r4, #48	; 0x30
 800a6e6:	2e00      	cmp	r6, #0
 800a6e8:	d1af      	bne.n	800a64a <_strtol_l.isra.0+0x4a>
 800a6ea:	2608      	movs	r6, #8
 800a6ec:	e7ad      	b.n	800a64a <_strtol_l.isra.0+0x4a>
 800a6ee:	2c30      	cmp	r4, #48	; 0x30
 800a6f0:	d0a3      	beq.n	800a63a <_strtol_l.isra.0+0x3a>
 800a6f2:	260a      	movs	r6, #10
 800a6f4:	e7a9      	b.n	800a64a <_strtol_l.isra.0+0x4a>
	...

0800a6f8 <strtol>:
 800a6f8:	4b08      	ldr	r3, [pc, #32]	; (800a71c <strtol+0x24>)
 800a6fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6fc:	681c      	ldr	r4, [r3, #0]
 800a6fe:	4d08      	ldr	r5, [pc, #32]	; (800a720 <strtol+0x28>)
 800a700:	6a23      	ldr	r3, [r4, #32]
 800a702:	2b00      	cmp	r3, #0
 800a704:	bf08      	it	eq
 800a706:	462b      	moveq	r3, r5
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	4613      	mov	r3, r2
 800a70c:	460a      	mov	r2, r1
 800a70e:	4601      	mov	r1, r0
 800a710:	4620      	mov	r0, r4
 800a712:	f7ff ff75 	bl	800a600 <_strtol_l.isra.0>
 800a716:	b003      	add	sp, #12
 800a718:	bd30      	pop	{r4, r5, pc}
 800a71a:	bf00      	nop
 800a71c:	20000044 	.word	0x20000044
 800a720:	200000a8 	.word	0x200000a8

0800a724 <_vsiprintf_r>:
 800a724:	b500      	push	{lr}
 800a726:	b09b      	sub	sp, #108	; 0x6c
 800a728:	9100      	str	r1, [sp, #0]
 800a72a:	9104      	str	r1, [sp, #16]
 800a72c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a730:	9105      	str	r1, [sp, #20]
 800a732:	9102      	str	r1, [sp, #8]
 800a734:	4905      	ldr	r1, [pc, #20]	; (800a74c <_vsiprintf_r+0x28>)
 800a736:	9103      	str	r1, [sp, #12]
 800a738:	4669      	mov	r1, sp
 800a73a:	f001 fa7b 	bl	800bc34 <_svfiprintf_r>
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	2200      	movs	r2, #0
 800a742:	701a      	strb	r2, [r3, #0]
 800a744:	b01b      	add	sp, #108	; 0x6c
 800a746:	f85d fb04 	ldr.w	pc, [sp], #4
 800a74a:	bf00      	nop
 800a74c:	ffff0208 	.word	0xffff0208

0800a750 <vsiprintf>:
 800a750:	4613      	mov	r3, r2
 800a752:	460a      	mov	r2, r1
 800a754:	4601      	mov	r1, r0
 800a756:	4802      	ldr	r0, [pc, #8]	; (800a760 <vsiprintf+0x10>)
 800a758:	6800      	ldr	r0, [r0, #0]
 800a75a:	f7ff bfe3 	b.w	800a724 <_vsiprintf_r>
 800a75e:	bf00      	nop
 800a760:	20000044 	.word	0x20000044

0800a764 <quorem>:
 800a764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a768:	6903      	ldr	r3, [r0, #16]
 800a76a:	690c      	ldr	r4, [r1, #16]
 800a76c:	42a3      	cmp	r3, r4
 800a76e:	4680      	mov	r8, r0
 800a770:	f2c0 8082 	blt.w	800a878 <quorem+0x114>
 800a774:	3c01      	subs	r4, #1
 800a776:	f101 0714 	add.w	r7, r1, #20
 800a77a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a77e:	f100 0614 	add.w	r6, r0, #20
 800a782:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a786:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a78a:	eb06 030c 	add.w	r3, r6, ip
 800a78e:	3501      	adds	r5, #1
 800a790:	eb07 090c 	add.w	r9, r7, ip
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	fbb0 f5f5 	udiv	r5, r0, r5
 800a79a:	b395      	cbz	r5, 800a802 <quorem+0x9e>
 800a79c:	f04f 0a00 	mov.w	sl, #0
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	46b6      	mov	lr, r6
 800a7a4:	46d3      	mov	fp, sl
 800a7a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7aa:	b293      	uxth	r3, r2
 800a7ac:	fb05 a303 	mla	r3, r5, r3, sl
 800a7b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	ebab 0303 	sub.w	r3, fp, r3
 800a7ba:	0c12      	lsrs	r2, r2, #16
 800a7bc:	f8de b000 	ldr.w	fp, [lr]
 800a7c0:	fb05 a202 	mla	r2, r5, r2, sl
 800a7c4:	fa13 f38b 	uxtah	r3, r3, fp
 800a7c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a7cc:	fa1f fb82 	uxth.w	fp, r2
 800a7d0:	f8de 2000 	ldr.w	r2, [lr]
 800a7d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a7d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7e2:	4581      	cmp	r9, r0
 800a7e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a7e8:	f84e 3b04 	str.w	r3, [lr], #4
 800a7ec:	d2db      	bcs.n	800a7a6 <quorem+0x42>
 800a7ee:	f856 300c 	ldr.w	r3, [r6, ip]
 800a7f2:	b933      	cbnz	r3, 800a802 <quorem+0x9e>
 800a7f4:	9b01      	ldr	r3, [sp, #4]
 800a7f6:	3b04      	subs	r3, #4
 800a7f8:	429e      	cmp	r6, r3
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	d330      	bcc.n	800a860 <quorem+0xfc>
 800a7fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800a802:	4640      	mov	r0, r8
 800a804:	f001 f840 	bl	800b888 <__mcmp>
 800a808:	2800      	cmp	r0, #0
 800a80a:	db25      	blt.n	800a858 <quorem+0xf4>
 800a80c:	3501      	adds	r5, #1
 800a80e:	4630      	mov	r0, r6
 800a810:	f04f 0c00 	mov.w	ip, #0
 800a814:	f857 2b04 	ldr.w	r2, [r7], #4
 800a818:	f8d0 e000 	ldr.w	lr, [r0]
 800a81c:	b293      	uxth	r3, r2
 800a81e:	ebac 0303 	sub.w	r3, ip, r3
 800a822:	0c12      	lsrs	r2, r2, #16
 800a824:	fa13 f38e 	uxtah	r3, r3, lr
 800a828:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a82c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a830:	b29b      	uxth	r3, r3
 800a832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a836:	45b9      	cmp	r9, r7
 800a838:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a83c:	f840 3b04 	str.w	r3, [r0], #4
 800a840:	d2e8      	bcs.n	800a814 <quorem+0xb0>
 800a842:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a846:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a84a:	b92a      	cbnz	r2, 800a858 <quorem+0xf4>
 800a84c:	3b04      	subs	r3, #4
 800a84e:	429e      	cmp	r6, r3
 800a850:	461a      	mov	r2, r3
 800a852:	d30b      	bcc.n	800a86c <quorem+0x108>
 800a854:	f8c8 4010 	str.w	r4, [r8, #16]
 800a858:	4628      	mov	r0, r5
 800a85a:	b003      	add	sp, #12
 800a85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a860:	6812      	ldr	r2, [r2, #0]
 800a862:	3b04      	subs	r3, #4
 800a864:	2a00      	cmp	r2, #0
 800a866:	d1ca      	bne.n	800a7fe <quorem+0x9a>
 800a868:	3c01      	subs	r4, #1
 800a86a:	e7c5      	b.n	800a7f8 <quorem+0x94>
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	3b04      	subs	r3, #4
 800a870:	2a00      	cmp	r2, #0
 800a872:	d1ef      	bne.n	800a854 <quorem+0xf0>
 800a874:	3c01      	subs	r4, #1
 800a876:	e7ea      	b.n	800a84e <quorem+0xea>
 800a878:	2000      	movs	r0, #0
 800a87a:	e7ee      	b.n	800a85a <quorem+0xf6>
 800a87c:	0000      	movs	r0, r0
	...

0800a880 <_dtoa_r>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	ec57 6b10 	vmov	r6, r7, d0
 800a888:	b097      	sub	sp, #92	; 0x5c
 800a88a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a88c:	9106      	str	r1, [sp, #24]
 800a88e:	4604      	mov	r4, r0
 800a890:	920b      	str	r2, [sp, #44]	; 0x2c
 800a892:	9312      	str	r3, [sp, #72]	; 0x48
 800a894:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a898:	e9cd 6700 	strd	r6, r7, [sp]
 800a89c:	b93d      	cbnz	r5, 800a8ae <_dtoa_r+0x2e>
 800a89e:	2010      	movs	r0, #16
 800a8a0:	f000 fdb8 	bl	800b414 <malloc>
 800a8a4:	6260      	str	r0, [r4, #36]	; 0x24
 800a8a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8aa:	6005      	str	r5, [r0, #0]
 800a8ac:	60c5      	str	r5, [r0, #12]
 800a8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8b0:	6819      	ldr	r1, [r3, #0]
 800a8b2:	b151      	cbz	r1, 800a8ca <_dtoa_r+0x4a>
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	604a      	str	r2, [r1, #4]
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	4093      	lsls	r3, r2
 800a8bc:	608b      	str	r3, [r1, #8]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 fe01 	bl	800b4c6 <_Bfree>
 800a8c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]
 800a8ca:	1e3b      	subs	r3, r7, #0
 800a8cc:	bfbb      	ittet	lt
 800a8ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8d2:	9301      	strlt	r3, [sp, #4]
 800a8d4:	2300      	movge	r3, #0
 800a8d6:	2201      	movlt	r2, #1
 800a8d8:	bfac      	ite	ge
 800a8da:	f8c8 3000 	strge.w	r3, [r8]
 800a8de:	f8c8 2000 	strlt.w	r2, [r8]
 800a8e2:	4baf      	ldr	r3, [pc, #700]	; (800aba0 <_dtoa_r+0x320>)
 800a8e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8e8:	ea33 0308 	bics.w	r3, r3, r8
 800a8ec:	d114      	bne.n	800a918 <_dtoa_r+0x98>
 800a8ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	9b00      	ldr	r3, [sp, #0]
 800a8f8:	b923      	cbnz	r3, 800a904 <_dtoa_r+0x84>
 800a8fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a8fe:	2800      	cmp	r0, #0
 800a900:	f000 8542 	beq.w	800b388 <_dtoa_r+0xb08>
 800a904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a906:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800abb4 <_dtoa_r+0x334>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 8544 	beq.w	800b398 <_dtoa_r+0xb18>
 800a910:	f10b 0303 	add.w	r3, fp, #3
 800a914:	f000 bd3e 	b.w	800b394 <_dtoa_r+0xb14>
 800a918:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a91c:	2200      	movs	r2, #0
 800a91e:	2300      	movs	r3, #0
 800a920:	4630      	mov	r0, r6
 800a922:	4639      	mov	r1, r7
 800a924:	f7f6 f8d8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a928:	4681      	mov	r9, r0
 800a92a:	b168      	cbz	r0, 800a948 <_dtoa_r+0xc8>
 800a92c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a92e:	2301      	movs	r3, #1
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 8524 	beq.w	800b382 <_dtoa_r+0xb02>
 800a93a:	4b9a      	ldr	r3, [pc, #616]	; (800aba4 <_dtoa_r+0x324>)
 800a93c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a93e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a942:	6013      	str	r3, [r2, #0]
 800a944:	f000 bd28 	b.w	800b398 <_dtoa_r+0xb18>
 800a948:	aa14      	add	r2, sp, #80	; 0x50
 800a94a:	a915      	add	r1, sp, #84	; 0x54
 800a94c:	ec47 6b10 	vmov	d0, r6, r7
 800a950:	4620      	mov	r0, r4
 800a952:	f001 f810 	bl	800b976 <__d2b>
 800a956:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a95a:	9004      	str	r0, [sp, #16]
 800a95c:	2d00      	cmp	r5, #0
 800a95e:	d07c      	beq.n	800aa5a <_dtoa_r+0x1da>
 800a960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a964:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a968:	46b2      	mov	sl, r6
 800a96a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a96e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a972:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a976:	2200      	movs	r2, #0
 800a978:	4b8b      	ldr	r3, [pc, #556]	; (800aba8 <_dtoa_r+0x328>)
 800a97a:	4650      	mov	r0, sl
 800a97c:	4659      	mov	r1, fp
 800a97e:	f7f5 fc8b 	bl	8000298 <__aeabi_dsub>
 800a982:	a381      	add	r3, pc, #516	; (adr r3, 800ab88 <_dtoa_r+0x308>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	f7f5 fe3e 	bl	8000608 <__aeabi_dmul>
 800a98c:	a380      	add	r3, pc, #512	; (adr r3, 800ab90 <_dtoa_r+0x310>)
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f7f5 fc83 	bl	800029c <__adddf3>
 800a996:	4606      	mov	r6, r0
 800a998:	4628      	mov	r0, r5
 800a99a:	460f      	mov	r7, r1
 800a99c:	f7f5 fdca 	bl	8000534 <__aeabi_i2d>
 800a9a0:	a37d      	add	r3, pc, #500	; (adr r3, 800ab98 <_dtoa_r+0x318>)
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f7f5 fe2f 	bl	8000608 <__aeabi_dmul>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f5 fc73 	bl	800029c <__adddf3>
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460f      	mov	r7, r1
 800a9ba:	f7f6 f8d5 	bl	8000b68 <__aeabi_d2iz>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	f7f6 f890 	bl	8000aec <__aeabi_dcmplt>
 800a9cc:	b148      	cbz	r0, 800a9e2 <_dtoa_r+0x162>
 800a9ce:	4650      	mov	r0, sl
 800a9d0:	f7f5 fdb0 	bl	8000534 <__aeabi_i2d>
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	463b      	mov	r3, r7
 800a9d8:	f7f6 f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9dc:	b908      	cbnz	r0, 800a9e2 <_dtoa_r+0x162>
 800a9de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9e2:	f1ba 0f16 	cmp.w	sl, #22
 800a9e6:	d859      	bhi.n	800aa9c <_dtoa_r+0x21c>
 800a9e8:	4970      	ldr	r1, [pc, #448]	; (800abac <_dtoa_r+0x32c>)
 800a9ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a9ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f6:	f7f6 f897 	bl	8000b28 <__aeabi_dcmpgt>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d050      	beq.n	800aaa0 <_dtoa_r+0x220>
 800a9fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa02:	2300      	movs	r3, #0
 800aa04:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa08:	1b5d      	subs	r5, r3, r5
 800aa0a:	f1b5 0801 	subs.w	r8, r5, #1
 800aa0e:	bf49      	itett	mi
 800aa10:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa14:	2300      	movpl	r3, #0
 800aa16:	9305      	strmi	r3, [sp, #20]
 800aa18:	f04f 0800 	movmi.w	r8, #0
 800aa1c:	bf58      	it	pl
 800aa1e:	9305      	strpl	r3, [sp, #20]
 800aa20:	f1ba 0f00 	cmp.w	sl, #0
 800aa24:	db3e      	blt.n	800aaa4 <_dtoa_r+0x224>
 800aa26:	2300      	movs	r3, #0
 800aa28:	44d0      	add	r8, sl
 800aa2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aa2e:	9307      	str	r3, [sp, #28]
 800aa30:	9b06      	ldr	r3, [sp, #24]
 800aa32:	2b09      	cmp	r3, #9
 800aa34:	f200 8090 	bhi.w	800ab58 <_dtoa_r+0x2d8>
 800aa38:	2b05      	cmp	r3, #5
 800aa3a:	bfc4      	itt	gt
 800aa3c:	3b04      	subgt	r3, #4
 800aa3e:	9306      	strgt	r3, [sp, #24]
 800aa40:	9b06      	ldr	r3, [sp, #24]
 800aa42:	f1a3 0302 	sub.w	r3, r3, #2
 800aa46:	bfcc      	ite	gt
 800aa48:	2500      	movgt	r5, #0
 800aa4a:	2501      	movle	r5, #1
 800aa4c:	2b03      	cmp	r3, #3
 800aa4e:	f200 808f 	bhi.w	800ab70 <_dtoa_r+0x2f0>
 800aa52:	e8df f003 	tbb	[pc, r3]
 800aa56:	7f7d      	.short	0x7f7d
 800aa58:	7131      	.short	0x7131
 800aa5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800aa5e:	441d      	add	r5, r3
 800aa60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800aa64:	2820      	cmp	r0, #32
 800aa66:	dd13      	ble.n	800aa90 <_dtoa_r+0x210>
 800aa68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800aa6c:	9b00      	ldr	r3, [sp, #0]
 800aa6e:	fa08 f800 	lsl.w	r8, r8, r0
 800aa72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800aa76:	fa23 f000 	lsr.w	r0, r3, r0
 800aa7a:	ea48 0000 	orr.w	r0, r8, r0
 800aa7e:	f7f5 fd49 	bl	8000514 <__aeabi_ui2d>
 800aa82:	2301      	movs	r3, #1
 800aa84:	4682      	mov	sl, r0
 800aa86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800aa8a:	3d01      	subs	r5, #1
 800aa8c:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa8e:	e772      	b.n	800a976 <_dtoa_r+0xf6>
 800aa90:	9b00      	ldr	r3, [sp, #0]
 800aa92:	f1c0 0020 	rsb	r0, r0, #32
 800aa96:	fa03 f000 	lsl.w	r0, r3, r0
 800aa9a:	e7f0      	b.n	800aa7e <_dtoa_r+0x1fe>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e7b1      	b.n	800aa04 <_dtoa_r+0x184>
 800aaa0:	900f      	str	r0, [sp, #60]	; 0x3c
 800aaa2:	e7b0      	b.n	800aa06 <_dtoa_r+0x186>
 800aaa4:	9b05      	ldr	r3, [sp, #20]
 800aaa6:	eba3 030a 	sub.w	r3, r3, sl
 800aaaa:	9305      	str	r3, [sp, #20]
 800aaac:	f1ca 0300 	rsb	r3, sl, #0
 800aab0:	9307      	str	r3, [sp, #28]
 800aab2:	2300      	movs	r3, #0
 800aab4:	930e      	str	r3, [sp, #56]	; 0x38
 800aab6:	e7bb      	b.n	800aa30 <_dtoa_r+0x1b0>
 800aab8:	2301      	movs	r3, #1
 800aaba:	930a      	str	r3, [sp, #40]	; 0x28
 800aabc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	dd59      	ble.n	800ab76 <_dtoa_r+0x2f6>
 800aac2:	9302      	str	r3, [sp, #8]
 800aac4:	4699      	mov	r9, r3
 800aac6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aac8:	2200      	movs	r2, #0
 800aaca:	6072      	str	r2, [r6, #4]
 800aacc:	2204      	movs	r2, #4
 800aace:	f102 0014 	add.w	r0, r2, #20
 800aad2:	4298      	cmp	r0, r3
 800aad4:	6871      	ldr	r1, [r6, #4]
 800aad6:	d953      	bls.n	800ab80 <_dtoa_r+0x300>
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fcc0 	bl	800b45e <_Balloc>
 800aade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aae0:	6030      	str	r0, [r6, #0]
 800aae2:	f1b9 0f0e 	cmp.w	r9, #14
 800aae6:	f8d3 b000 	ldr.w	fp, [r3]
 800aaea:	f200 80e6 	bhi.w	800acba <_dtoa_r+0x43a>
 800aaee:	2d00      	cmp	r5, #0
 800aaf0:	f000 80e3 	beq.w	800acba <_dtoa_r+0x43a>
 800aaf4:	ed9d 7b00 	vldr	d7, [sp]
 800aaf8:	f1ba 0f00 	cmp.w	sl, #0
 800aafc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ab00:	dd74      	ble.n	800abec <_dtoa_r+0x36c>
 800ab02:	4a2a      	ldr	r2, [pc, #168]	; (800abac <_dtoa_r+0x32c>)
 800ab04:	f00a 030f 	and.w	r3, sl, #15
 800ab08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab0c:	ed93 7b00 	vldr	d7, [r3]
 800ab10:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ab14:	06f0      	lsls	r0, r6, #27
 800ab16:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ab1a:	d565      	bpl.n	800abe8 <_dtoa_r+0x368>
 800ab1c:	4b24      	ldr	r3, [pc, #144]	; (800abb0 <_dtoa_r+0x330>)
 800ab1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab26:	f7f5 fe99 	bl	800085c <__aeabi_ddiv>
 800ab2a:	e9cd 0100 	strd	r0, r1, [sp]
 800ab2e:	f006 060f 	and.w	r6, r6, #15
 800ab32:	2503      	movs	r5, #3
 800ab34:	4f1e      	ldr	r7, [pc, #120]	; (800abb0 <_dtoa_r+0x330>)
 800ab36:	e04c      	b.n	800abd2 <_dtoa_r+0x352>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab3e:	4453      	add	r3, sl
 800ab40:	f103 0901 	add.w	r9, r3, #1
 800ab44:	9302      	str	r3, [sp, #8]
 800ab46:	464b      	mov	r3, r9
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	bfb8      	it	lt
 800ab4c:	2301      	movlt	r3, #1
 800ab4e:	e7ba      	b.n	800aac6 <_dtoa_r+0x246>
 800ab50:	2300      	movs	r3, #0
 800ab52:	e7b2      	b.n	800aaba <_dtoa_r+0x23a>
 800ab54:	2300      	movs	r3, #0
 800ab56:	e7f0      	b.n	800ab3a <_dtoa_r+0x2ba>
 800ab58:	2501      	movs	r5, #1
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	9306      	str	r3, [sp, #24]
 800ab5e:	950a      	str	r5, [sp, #40]	; 0x28
 800ab60:	f04f 33ff 	mov.w	r3, #4294967295
 800ab64:	9302      	str	r3, [sp, #8]
 800ab66:	4699      	mov	r9, r3
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2312      	movs	r3, #18
 800ab6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab6e:	e7aa      	b.n	800aac6 <_dtoa_r+0x246>
 800ab70:	2301      	movs	r3, #1
 800ab72:	930a      	str	r3, [sp, #40]	; 0x28
 800ab74:	e7f4      	b.n	800ab60 <_dtoa_r+0x2e0>
 800ab76:	2301      	movs	r3, #1
 800ab78:	9302      	str	r3, [sp, #8]
 800ab7a:	4699      	mov	r9, r3
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	e7f5      	b.n	800ab6c <_dtoa_r+0x2ec>
 800ab80:	3101      	adds	r1, #1
 800ab82:	6071      	str	r1, [r6, #4]
 800ab84:	0052      	lsls	r2, r2, #1
 800ab86:	e7a2      	b.n	800aace <_dtoa_r+0x24e>
 800ab88:	636f4361 	.word	0x636f4361
 800ab8c:	3fd287a7 	.word	0x3fd287a7
 800ab90:	8b60c8b3 	.word	0x8b60c8b3
 800ab94:	3fc68a28 	.word	0x3fc68a28
 800ab98:	509f79fb 	.word	0x509f79fb
 800ab9c:	3fd34413 	.word	0x3fd34413
 800aba0:	7ff00000 	.word	0x7ff00000
 800aba4:	08010091 	.word	0x08010091
 800aba8:	3ff80000 	.word	0x3ff80000
 800abac:	080100f8 	.word	0x080100f8
 800abb0:	080100d0 	.word	0x080100d0
 800abb4:	080100bd 	.word	0x080100bd
 800abb8:	07f1      	lsls	r1, r6, #31
 800abba:	d508      	bpl.n	800abce <_dtoa_r+0x34e>
 800abbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abc4:	f7f5 fd20 	bl	8000608 <__aeabi_dmul>
 800abc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abcc:	3501      	adds	r5, #1
 800abce:	1076      	asrs	r6, r6, #1
 800abd0:	3708      	adds	r7, #8
 800abd2:	2e00      	cmp	r6, #0
 800abd4:	d1f0      	bne.n	800abb8 <_dtoa_r+0x338>
 800abd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abde:	f7f5 fe3d 	bl	800085c <__aeabi_ddiv>
 800abe2:	e9cd 0100 	strd	r0, r1, [sp]
 800abe6:	e01a      	b.n	800ac1e <_dtoa_r+0x39e>
 800abe8:	2502      	movs	r5, #2
 800abea:	e7a3      	b.n	800ab34 <_dtoa_r+0x2b4>
 800abec:	f000 80a0 	beq.w	800ad30 <_dtoa_r+0x4b0>
 800abf0:	f1ca 0600 	rsb	r6, sl, #0
 800abf4:	4b9f      	ldr	r3, [pc, #636]	; (800ae74 <_dtoa_r+0x5f4>)
 800abf6:	4fa0      	ldr	r7, [pc, #640]	; (800ae78 <_dtoa_r+0x5f8>)
 800abf8:	f006 020f 	and.w	r2, r6, #15
 800abfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac08:	f7f5 fcfe 	bl	8000608 <__aeabi_dmul>
 800ac0c:	e9cd 0100 	strd	r0, r1, [sp]
 800ac10:	1136      	asrs	r6, r6, #4
 800ac12:	2300      	movs	r3, #0
 800ac14:	2502      	movs	r5, #2
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	d17f      	bne.n	800ad1a <_dtoa_r+0x49a>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1e1      	bne.n	800abe2 <_dtoa_r+0x362>
 800ac1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 8087 	beq.w	800ad34 <_dtoa_r+0x4b4>
 800ac26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4b93      	ldr	r3, [pc, #588]	; (800ae7c <_dtoa_r+0x5fc>)
 800ac2e:	4630      	mov	r0, r6
 800ac30:	4639      	mov	r1, r7
 800ac32:	f7f5 ff5b 	bl	8000aec <__aeabi_dcmplt>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d07c      	beq.n	800ad34 <_dtoa_r+0x4b4>
 800ac3a:	f1b9 0f00 	cmp.w	r9, #0
 800ac3e:	d079      	beq.n	800ad34 <_dtoa_r+0x4b4>
 800ac40:	9b02      	ldr	r3, [sp, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	dd35      	ble.n	800acb2 <_dtoa_r+0x432>
 800ac46:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ac4a:	9308      	str	r3, [sp, #32]
 800ac4c:	4639      	mov	r1, r7
 800ac4e:	2200      	movs	r2, #0
 800ac50:	4b8b      	ldr	r3, [pc, #556]	; (800ae80 <_dtoa_r+0x600>)
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7f5 fcd8 	bl	8000608 <__aeabi_dmul>
 800ac58:	e9cd 0100 	strd	r0, r1, [sp]
 800ac5c:	9f02      	ldr	r7, [sp, #8]
 800ac5e:	3501      	adds	r5, #1
 800ac60:	4628      	mov	r0, r5
 800ac62:	f7f5 fc67 	bl	8000534 <__aeabi_i2d>
 800ac66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac6a:	f7f5 fccd 	bl	8000608 <__aeabi_dmul>
 800ac6e:	2200      	movs	r2, #0
 800ac70:	4b84      	ldr	r3, [pc, #528]	; (800ae84 <_dtoa_r+0x604>)
 800ac72:	f7f5 fb13 	bl	800029c <__adddf3>
 800ac76:	4605      	mov	r5, r0
 800ac78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ac7c:	2f00      	cmp	r7, #0
 800ac7e:	d15d      	bne.n	800ad3c <_dtoa_r+0x4bc>
 800ac80:	2200      	movs	r2, #0
 800ac82:	4b81      	ldr	r3, [pc, #516]	; (800ae88 <_dtoa_r+0x608>)
 800ac84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac88:	f7f5 fb06 	bl	8000298 <__aeabi_dsub>
 800ac8c:	462a      	mov	r2, r5
 800ac8e:	4633      	mov	r3, r6
 800ac90:	e9cd 0100 	strd	r0, r1, [sp]
 800ac94:	f7f5 ff48 	bl	8000b28 <__aeabi_dcmpgt>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	f040 8288 	bne.w	800b1ae <_dtoa_r+0x92e>
 800ac9e:	462a      	mov	r2, r5
 800aca0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca8:	f7f5 ff20 	bl	8000aec <__aeabi_dcmplt>
 800acac:	2800      	cmp	r0, #0
 800acae:	f040 827c 	bne.w	800b1aa <_dtoa_r+0x92a>
 800acb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acb6:	e9cd 2300 	strd	r2, r3, [sp]
 800acba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f2c0 8150 	blt.w	800af62 <_dtoa_r+0x6e2>
 800acc2:	f1ba 0f0e 	cmp.w	sl, #14
 800acc6:	f300 814c 	bgt.w	800af62 <_dtoa_r+0x6e2>
 800acca:	4b6a      	ldr	r3, [pc, #424]	; (800ae74 <_dtoa_r+0x5f4>)
 800accc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acd0:	ed93 7b00 	vldr	d7, [r3]
 800acd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acdc:	f280 80d8 	bge.w	800ae90 <_dtoa_r+0x610>
 800ace0:	f1b9 0f00 	cmp.w	r9, #0
 800ace4:	f300 80d4 	bgt.w	800ae90 <_dtoa_r+0x610>
 800ace8:	f040 825e 	bne.w	800b1a8 <_dtoa_r+0x928>
 800acec:	2200      	movs	r2, #0
 800acee:	4b66      	ldr	r3, [pc, #408]	; (800ae88 <_dtoa_r+0x608>)
 800acf0:	ec51 0b17 	vmov	r0, r1, d7
 800acf4:	f7f5 fc88 	bl	8000608 <__aeabi_dmul>
 800acf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acfc:	f7f5 ff0a 	bl	8000b14 <__aeabi_dcmpge>
 800ad00:	464f      	mov	r7, r9
 800ad02:	464e      	mov	r6, r9
 800ad04:	2800      	cmp	r0, #0
 800ad06:	f040 8234 	bne.w	800b172 <_dtoa_r+0x8f2>
 800ad0a:	2331      	movs	r3, #49	; 0x31
 800ad0c:	f10b 0501 	add.w	r5, fp, #1
 800ad10:	f88b 3000 	strb.w	r3, [fp]
 800ad14:	f10a 0a01 	add.w	sl, sl, #1
 800ad18:	e22f      	b.n	800b17a <_dtoa_r+0x8fa>
 800ad1a:	07f2      	lsls	r2, r6, #31
 800ad1c:	d505      	bpl.n	800ad2a <_dtoa_r+0x4aa>
 800ad1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad22:	f7f5 fc71 	bl	8000608 <__aeabi_dmul>
 800ad26:	3501      	adds	r5, #1
 800ad28:	2301      	movs	r3, #1
 800ad2a:	1076      	asrs	r6, r6, #1
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	e772      	b.n	800ac16 <_dtoa_r+0x396>
 800ad30:	2502      	movs	r5, #2
 800ad32:	e774      	b.n	800ac1e <_dtoa_r+0x39e>
 800ad34:	f8cd a020 	str.w	sl, [sp, #32]
 800ad38:	464f      	mov	r7, r9
 800ad3a:	e791      	b.n	800ac60 <_dtoa_r+0x3e0>
 800ad3c:	4b4d      	ldr	r3, [pc, #308]	; (800ae74 <_dtoa_r+0x5f4>)
 800ad3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ad46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d047      	beq.n	800addc <_dtoa_r+0x55c>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	2000      	movs	r0, #0
 800ad52:	494e      	ldr	r1, [pc, #312]	; (800ae8c <_dtoa_r+0x60c>)
 800ad54:	f7f5 fd82 	bl	800085c <__aeabi_ddiv>
 800ad58:	462a      	mov	r2, r5
 800ad5a:	4633      	mov	r3, r6
 800ad5c:	f7f5 fa9c 	bl	8000298 <__aeabi_dsub>
 800ad60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ad64:	465d      	mov	r5, fp
 800ad66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad6a:	f7f5 fefd 	bl	8000b68 <__aeabi_d2iz>
 800ad6e:	4606      	mov	r6, r0
 800ad70:	f7f5 fbe0 	bl	8000534 <__aeabi_i2d>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad7c:	f7f5 fa8c 	bl	8000298 <__aeabi_dsub>
 800ad80:	3630      	adds	r6, #48	; 0x30
 800ad82:	f805 6b01 	strb.w	r6, [r5], #1
 800ad86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ad8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ad8e:	f7f5 fead 	bl	8000aec <__aeabi_dcmplt>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d163      	bne.n	800ae5e <_dtoa_r+0x5de>
 800ad96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	4937      	ldr	r1, [pc, #220]	; (800ae7c <_dtoa_r+0x5fc>)
 800ad9e:	f7f5 fa7b 	bl	8000298 <__aeabi_dsub>
 800ada2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ada6:	f7f5 fea1 	bl	8000aec <__aeabi_dcmplt>
 800adaa:	2800      	cmp	r0, #0
 800adac:	f040 80b7 	bne.w	800af1e <_dtoa_r+0x69e>
 800adb0:	eba5 030b 	sub.w	r3, r5, fp
 800adb4:	429f      	cmp	r7, r3
 800adb6:	f77f af7c 	ble.w	800acb2 <_dtoa_r+0x432>
 800adba:	2200      	movs	r2, #0
 800adbc:	4b30      	ldr	r3, [pc, #192]	; (800ae80 <_dtoa_r+0x600>)
 800adbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800adc2:	f7f5 fc21 	bl	8000608 <__aeabi_dmul>
 800adc6:	2200      	movs	r2, #0
 800adc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800adcc:	4b2c      	ldr	r3, [pc, #176]	; (800ae80 <_dtoa_r+0x600>)
 800adce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800add2:	f7f5 fc19 	bl	8000608 <__aeabi_dmul>
 800add6:	e9cd 0100 	strd	r0, r1, [sp]
 800adda:	e7c4      	b.n	800ad66 <_dtoa_r+0x4e6>
 800addc:	462a      	mov	r2, r5
 800adde:	4633      	mov	r3, r6
 800ade0:	f7f5 fc12 	bl	8000608 <__aeabi_dmul>
 800ade4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ade8:	eb0b 0507 	add.w	r5, fp, r7
 800adec:	465e      	mov	r6, fp
 800adee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf2:	f7f5 feb9 	bl	8000b68 <__aeabi_d2iz>
 800adf6:	4607      	mov	r7, r0
 800adf8:	f7f5 fb9c 	bl	8000534 <__aeabi_i2d>
 800adfc:	3730      	adds	r7, #48	; 0x30
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae06:	f7f5 fa47 	bl	8000298 <__aeabi_dsub>
 800ae0a:	f806 7b01 	strb.w	r7, [r6], #1
 800ae0e:	42ae      	cmp	r6, r5
 800ae10:	e9cd 0100 	strd	r0, r1, [sp]
 800ae14:	f04f 0200 	mov.w	r2, #0
 800ae18:	d126      	bne.n	800ae68 <_dtoa_r+0x5e8>
 800ae1a:	4b1c      	ldr	r3, [pc, #112]	; (800ae8c <_dtoa_r+0x60c>)
 800ae1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae20:	f7f5 fa3c 	bl	800029c <__adddf3>
 800ae24:	4602      	mov	r2, r0
 800ae26:	460b      	mov	r3, r1
 800ae28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae2c:	f7f5 fe7c 	bl	8000b28 <__aeabi_dcmpgt>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d174      	bne.n	800af1e <_dtoa_r+0x69e>
 800ae34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae38:	2000      	movs	r0, #0
 800ae3a:	4914      	ldr	r1, [pc, #80]	; (800ae8c <_dtoa_r+0x60c>)
 800ae3c:	f7f5 fa2c 	bl	8000298 <__aeabi_dsub>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae48:	f7f5 fe50 	bl	8000aec <__aeabi_dcmplt>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	f43f af30 	beq.w	800acb2 <_dtoa_r+0x432>
 800ae52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae56:	2b30      	cmp	r3, #48	; 0x30
 800ae58:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae5c:	d002      	beq.n	800ae64 <_dtoa_r+0x5e4>
 800ae5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ae62:	e04a      	b.n	800aefa <_dtoa_r+0x67a>
 800ae64:	4615      	mov	r5, r2
 800ae66:	e7f4      	b.n	800ae52 <_dtoa_r+0x5d2>
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <_dtoa_r+0x600>)
 800ae6a:	f7f5 fbcd 	bl	8000608 <__aeabi_dmul>
 800ae6e:	e9cd 0100 	strd	r0, r1, [sp]
 800ae72:	e7bc      	b.n	800adee <_dtoa_r+0x56e>
 800ae74:	080100f8 	.word	0x080100f8
 800ae78:	080100d0 	.word	0x080100d0
 800ae7c:	3ff00000 	.word	0x3ff00000
 800ae80:	40240000 	.word	0x40240000
 800ae84:	401c0000 	.word	0x401c0000
 800ae88:	40140000 	.word	0x40140000
 800ae8c:	3fe00000 	.word	0x3fe00000
 800ae90:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae94:	465d      	mov	r5, fp
 800ae96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	4639      	mov	r1, r7
 800ae9e:	f7f5 fcdd 	bl	800085c <__aeabi_ddiv>
 800aea2:	f7f5 fe61 	bl	8000b68 <__aeabi_d2iz>
 800aea6:	4680      	mov	r8, r0
 800aea8:	f7f5 fb44 	bl	8000534 <__aeabi_i2d>
 800aeac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeb0:	f7f5 fbaa 	bl	8000608 <__aeabi_dmul>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aec0:	f7f5 f9ea 	bl	8000298 <__aeabi_dsub>
 800aec4:	f805 6b01 	strb.w	r6, [r5], #1
 800aec8:	eba5 060b 	sub.w	r6, r5, fp
 800aecc:	45b1      	cmp	r9, r6
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	d139      	bne.n	800af48 <_dtoa_r+0x6c8>
 800aed4:	f7f5 f9e2 	bl	800029c <__adddf3>
 800aed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aedc:	4606      	mov	r6, r0
 800aede:	460f      	mov	r7, r1
 800aee0:	f7f5 fe22 	bl	8000b28 <__aeabi_dcmpgt>
 800aee4:	b9c8      	cbnz	r0, 800af1a <_dtoa_r+0x69a>
 800aee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeea:	4630      	mov	r0, r6
 800aeec:	4639      	mov	r1, r7
 800aeee:	f7f5 fdf3 	bl	8000ad8 <__aeabi_dcmpeq>
 800aef2:	b110      	cbz	r0, 800aefa <_dtoa_r+0x67a>
 800aef4:	f018 0f01 	tst.w	r8, #1
 800aef8:	d10f      	bne.n	800af1a <_dtoa_r+0x69a>
 800aefa:	9904      	ldr	r1, [sp, #16]
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 fae2 	bl	800b4c6 <_Bfree>
 800af02:	2300      	movs	r3, #0
 800af04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af06:	702b      	strb	r3, [r5, #0]
 800af08:	f10a 0301 	add.w	r3, sl, #1
 800af0c:	6013      	str	r3, [r2, #0]
 800af0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af10:	2b00      	cmp	r3, #0
 800af12:	f000 8241 	beq.w	800b398 <_dtoa_r+0xb18>
 800af16:	601d      	str	r5, [r3, #0]
 800af18:	e23e      	b.n	800b398 <_dtoa_r+0xb18>
 800af1a:	f8cd a020 	str.w	sl, [sp, #32]
 800af1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af22:	2a39      	cmp	r2, #57	; 0x39
 800af24:	f105 33ff 	add.w	r3, r5, #4294967295
 800af28:	d108      	bne.n	800af3c <_dtoa_r+0x6bc>
 800af2a:	459b      	cmp	fp, r3
 800af2c:	d10a      	bne.n	800af44 <_dtoa_r+0x6c4>
 800af2e:	9b08      	ldr	r3, [sp, #32]
 800af30:	3301      	adds	r3, #1
 800af32:	9308      	str	r3, [sp, #32]
 800af34:	2330      	movs	r3, #48	; 0x30
 800af36:	f88b 3000 	strb.w	r3, [fp]
 800af3a:	465b      	mov	r3, fp
 800af3c:	781a      	ldrb	r2, [r3, #0]
 800af3e:	3201      	adds	r2, #1
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	e78c      	b.n	800ae5e <_dtoa_r+0x5de>
 800af44:	461d      	mov	r5, r3
 800af46:	e7ea      	b.n	800af1e <_dtoa_r+0x69e>
 800af48:	2200      	movs	r2, #0
 800af4a:	4b9b      	ldr	r3, [pc, #620]	; (800b1b8 <_dtoa_r+0x938>)
 800af4c:	f7f5 fb5c 	bl	8000608 <__aeabi_dmul>
 800af50:	2200      	movs	r2, #0
 800af52:	2300      	movs	r3, #0
 800af54:	4606      	mov	r6, r0
 800af56:	460f      	mov	r7, r1
 800af58:	f7f5 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d09a      	beq.n	800ae96 <_dtoa_r+0x616>
 800af60:	e7cb      	b.n	800aefa <_dtoa_r+0x67a>
 800af62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af64:	2a00      	cmp	r2, #0
 800af66:	f000 808b 	beq.w	800b080 <_dtoa_r+0x800>
 800af6a:	9a06      	ldr	r2, [sp, #24]
 800af6c:	2a01      	cmp	r2, #1
 800af6e:	dc6e      	bgt.n	800b04e <_dtoa_r+0x7ce>
 800af70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af72:	2a00      	cmp	r2, #0
 800af74:	d067      	beq.n	800b046 <_dtoa_r+0x7c6>
 800af76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af7a:	9f07      	ldr	r7, [sp, #28]
 800af7c:	9d05      	ldr	r5, [sp, #20]
 800af7e:	9a05      	ldr	r2, [sp, #20]
 800af80:	2101      	movs	r1, #1
 800af82:	441a      	add	r2, r3
 800af84:	4620      	mov	r0, r4
 800af86:	9205      	str	r2, [sp, #20]
 800af88:	4498      	add	r8, r3
 800af8a:	f000 fb3c 	bl	800b606 <__i2b>
 800af8e:	4606      	mov	r6, r0
 800af90:	2d00      	cmp	r5, #0
 800af92:	dd0c      	ble.n	800afae <_dtoa_r+0x72e>
 800af94:	f1b8 0f00 	cmp.w	r8, #0
 800af98:	dd09      	ble.n	800afae <_dtoa_r+0x72e>
 800af9a:	4545      	cmp	r5, r8
 800af9c:	9a05      	ldr	r2, [sp, #20]
 800af9e:	462b      	mov	r3, r5
 800afa0:	bfa8      	it	ge
 800afa2:	4643      	movge	r3, r8
 800afa4:	1ad2      	subs	r2, r2, r3
 800afa6:	9205      	str	r2, [sp, #20]
 800afa8:	1aed      	subs	r5, r5, r3
 800afaa:	eba8 0803 	sub.w	r8, r8, r3
 800afae:	9b07      	ldr	r3, [sp, #28]
 800afb0:	b1eb      	cbz	r3, 800afee <_dtoa_r+0x76e>
 800afb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d067      	beq.n	800b088 <_dtoa_r+0x808>
 800afb8:	b18f      	cbz	r7, 800afde <_dtoa_r+0x75e>
 800afba:	4631      	mov	r1, r6
 800afbc:	463a      	mov	r2, r7
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 fbc0 	bl	800b744 <__pow5mult>
 800afc4:	9a04      	ldr	r2, [sp, #16]
 800afc6:	4601      	mov	r1, r0
 800afc8:	4606      	mov	r6, r0
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 fb24 	bl	800b618 <__multiply>
 800afd0:	9904      	ldr	r1, [sp, #16]
 800afd2:	9008      	str	r0, [sp, #32]
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 fa76 	bl	800b4c6 <_Bfree>
 800afda:	9b08      	ldr	r3, [sp, #32]
 800afdc:	9304      	str	r3, [sp, #16]
 800afde:	9b07      	ldr	r3, [sp, #28]
 800afe0:	1bda      	subs	r2, r3, r7
 800afe2:	d004      	beq.n	800afee <_dtoa_r+0x76e>
 800afe4:	9904      	ldr	r1, [sp, #16]
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 fbac 	bl	800b744 <__pow5mult>
 800afec:	9004      	str	r0, [sp, #16]
 800afee:	2101      	movs	r1, #1
 800aff0:	4620      	mov	r0, r4
 800aff2:	f000 fb08 	bl	800b606 <__i2b>
 800aff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aff8:	4607      	mov	r7, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 81d0 	beq.w	800b3a0 <_dtoa_r+0xb20>
 800b000:	461a      	mov	r2, r3
 800b002:	4601      	mov	r1, r0
 800b004:	4620      	mov	r0, r4
 800b006:	f000 fb9d 	bl	800b744 <__pow5mult>
 800b00a:	9b06      	ldr	r3, [sp, #24]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	4607      	mov	r7, r0
 800b010:	dc40      	bgt.n	800b094 <_dtoa_r+0x814>
 800b012:	9b00      	ldr	r3, [sp, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d139      	bne.n	800b08c <_dtoa_r+0x80c>
 800b018:	9b01      	ldr	r3, [sp, #4]
 800b01a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d136      	bne.n	800b090 <_dtoa_r+0x810>
 800b022:	9b01      	ldr	r3, [sp, #4]
 800b024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b028:	0d1b      	lsrs	r3, r3, #20
 800b02a:	051b      	lsls	r3, r3, #20
 800b02c:	b12b      	cbz	r3, 800b03a <_dtoa_r+0x7ba>
 800b02e:	9b05      	ldr	r3, [sp, #20]
 800b030:	3301      	adds	r3, #1
 800b032:	9305      	str	r3, [sp, #20]
 800b034:	f108 0801 	add.w	r8, r8, #1
 800b038:	2301      	movs	r3, #1
 800b03a:	9307      	str	r3, [sp, #28]
 800b03c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d12a      	bne.n	800b098 <_dtoa_r+0x818>
 800b042:	2001      	movs	r0, #1
 800b044:	e030      	b.n	800b0a8 <_dtoa_r+0x828>
 800b046:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b048:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b04c:	e795      	b.n	800af7a <_dtoa_r+0x6fa>
 800b04e:	9b07      	ldr	r3, [sp, #28]
 800b050:	f109 37ff 	add.w	r7, r9, #4294967295
 800b054:	42bb      	cmp	r3, r7
 800b056:	bfbf      	itttt	lt
 800b058:	9b07      	ldrlt	r3, [sp, #28]
 800b05a:	9707      	strlt	r7, [sp, #28]
 800b05c:	1afa      	sublt	r2, r7, r3
 800b05e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b060:	bfbb      	ittet	lt
 800b062:	189b      	addlt	r3, r3, r2
 800b064:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b066:	1bdf      	subge	r7, r3, r7
 800b068:	2700      	movlt	r7, #0
 800b06a:	f1b9 0f00 	cmp.w	r9, #0
 800b06e:	bfb5      	itete	lt
 800b070:	9b05      	ldrlt	r3, [sp, #20]
 800b072:	9d05      	ldrge	r5, [sp, #20]
 800b074:	eba3 0509 	sublt.w	r5, r3, r9
 800b078:	464b      	movge	r3, r9
 800b07a:	bfb8      	it	lt
 800b07c:	2300      	movlt	r3, #0
 800b07e:	e77e      	b.n	800af7e <_dtoa_r+0x6fe>
 800b080:	9f07      	ldr	r7, [sp, #28]
 800b082:	9d05      	ldr	r5, [sp, #20]
 800b084:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b086:	e783      	b.n	800af90 <_dtoa_r+0x710>
 800b088:	9a07      	ldr	r2, [sp, #28]
 800b08a:	e7ab      	b.n	800afe4 <_dtoa_r+0x764>
 800b08c:	2300      	movs	r3, #0
 800b08e:	e7d4      	b.n	800b03a <_dtoa_r+0x7ba>
 800b090:	9b00      	ldr	r3, [sp, #0]
 800b092:	e7d2      	b.n	800b03a <_dtoa_r+0x7ba>
 800b094:	2300      	movs	r3, #0
 800b096:	9307      	str	r3, [sp, #28]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b09e:	6918      	ldr	r0, [r3, #16]
 800b0a0:	f000 fa63 	bl	800b56a <__hi0bits>
 800b0a4:	f1c0 0020 	rsb	r0, r0, #32
 800b0a8:	4440      	add	r0, r8
 800b0aa:	f010 001f 	ands.w	r0, r0, #31
 800b0ae:	d047      	beq.n	800b140 <_dtoa_r+0x8c0>
 800b0b0:	f1c0 0320 	rsb	r3, r0, #32
 800b0b4:	2b04      	cmp	r3, #4
 800b0b6:	dd3b      	ble.n	800b130 <_dtoa_r+0x8b0>
 800b0b8:	9b05      	ldr	r3, [sp, #20]
 800b0ba:	f1c0 001c 	rsb	r0, r0, #28
 800b0be:	4403      	add	r3, r0
 800b0c0:	9305      	str	r3, [sp, #20]
 800b0c2:	4405      	add	r5, r0
 800b0c4:	4480      	add	r8, r0
 800b0c6:	9b05      	ldr	r3, [sp, #20]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dd05      	ble.n	800b0d8 <_dtoa_r+0x858>
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	9904      	ldr	r1, [sp, #16]
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fb85 	bl	800b7e0 <__lshift>
 800b0d6:	9004      	str	r0, [sp, #16]
 800b0d8:	f1b8 0f00 	cmp.w	r8, #0
 800b0dc:	dd05      	ble.n	800b0ea <_dtoa_r+0x86a>
 800b0de:	4639      	mov	r1, r7
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 fb7c 	bl	800b7e0 <__lshift>
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ec:	b353      	cbz	r3, 800b144 <_dtoa_r+0x8c4>
 800b0ee:	4639      	mov	r1, r7
 800b0f0:	9804      	ldr	r0, [sp, #16]
 800b0f2:	f000 fbc9 	bl	800b888 <__mcmp>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	da24      	bge.n	800b144 <_dtoa_r+0x8c4>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	220a      	movs	r2, #10
 800b0fe:	9904      	ldr	r1, [sp, #16]
 800b100:	4620      	mov	r0, r4
 800b102:	f000 f9f7 	bl	800b4f4 <__multadd>
 800b106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b108:	9004      	str	r0, [sp, #16]
 800b10a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 814d 	beq.w	800b3ae <_dtoa_r+0xb2e>
 800b114:	2300      	movs	r3, #0
 800b116:	4631      	mov	r1, r6
 800b118:	220a      	movs	r2, #10
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 f9ea 	bl	800b4f4 <__multadd>
 800b120:	9b02      	ldr	r3, [sp, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	4606      	mov	r6, r0
 800b126:	dc4f      	bgt.n	800b1c8 <_dtoa_r+0x948>
 800b128:	9b06      	ldr	r3, [sp, #24]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	dd4c      	ble.n	800b1c8 <_dtoa_r+0x948>
 800b12e:	e011      	b.n	800b154 <_dtoa_r+0x8d4>
 800b130:	d0c9      	beq.n	800b0c6 <_dtoa_r+0x846>
 800b132:	9a05      	ldr	r2, [sp, #20]
 800b134:	331c      	adds	r3, #28
 800b136:	441a      	add	r2, r3
 800b138:	9205      	str	r2, [sp, #20]
 800b13a:	441d      	add	r5, r3
 800b13c:	4498      	add	r8, r3
 800b13e:	e7c2      	b.n	800b0c6 <_dtoa_r+0x846>
 800b140:	4603      	mov	r3, r0
 800b142:	e7f6      	b.n	800b132 <_dtoa_r+0x8b2>
 800b144:	f1b9 0f00 	cmp.w	r9, #0
 800b148:	dc38      	bgt.n	800b1bc <_dtoa_r+0x93c>
 800b14a:	9b06      	ldr	r3, [sp, #24]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	dd35      	ble.n	800b1bc <_dtoa_r+0x93c>
 800b150:	f8cd 9008 	str.w	r9, [sp, #8]
 800b154:	9b02      	ldr	r3, [sp, #8]
 800b156:	b963      	cbnz	r3, 800b172 <_dtoa_r+0x8f2>
 800b158:	4639      	mov	r1, r7
 800b15a:	2205      	movs	r2, #5
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 f9c9 	bl	800b4f4 <__multadd>
 800b162:	4601      	mov	r1, r0
 800b164:	4607      	mov	r7, r0
 800b166:	9804      	ldr	r0, [sp, #16]
 800b168:	f000 fb8e 	bl	800b888 <__mcmp>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	f73f adcc 	bgt.w	800ad0a <_dtoa_r+0x48a>
 800b172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b174:	465d      	mov	r5, fp
 800b176:	ea6f 0a03 	mvn.w	sl, r3
 800b17a:	f04f 0900 	mov.w	r9, #0
 800b17e:	4639      	mov	r1, r7
 800b180:	4620      	mov	r0, r4
 800b182:	f000 f9a0 	bl	800b4c6 <_Bfree>
 800b186:	2e00      	cmp	r6, #0
 800b188:	f43f aeb7 	beq.w	800aefa <_dtoa_r+0x67a>
 800b18c:	f1b9 0f00 	cmp.w	r9, #0
 800b190:	d005      	beq.n	800b19e <_dtoa_r+0x91e>
 800b192:	45b1      	cmp	r9, r6
 800b194:	d003      	beq.n	800b19e <_dtoa_r+0x91e>
 800b196:	4649      	mov	r1, r9
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 f994 	bl	800b4c6 <_Bfree>
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 f990 	bl	800b4c6 <_Bfree>
 800b1a6:	e6a8      	b.n	800aefa <_dtoa_r+0x67a>
 800b1a8:	2700      	movs	r7, #0
 800b1aa:	463e      	mov	r6, r7
 800b1ac:	e7e1      	b.n	800b172 <_dtoa_r+0x8f2>
 800b1ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b1b2:	463e      	mov	r6, r7
 800b1b4:	e5a9      	b.n	800ad0a <_dtoa_r+0x48a>
 800b1b6:	bf00      	nop
 800b1b8:	40240000 	.word	0x40240000
 800b1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1be:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 80fa 	beq.w	800b3bc <_dtoa_r+0xb3c>
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	dd05      	ble.n	800b1d8 <_dtoa_r+0x958>
 800b1cc:	4631      	mov	r1, r6
 800b1ce:	462a      	mov	r2, r5
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f000 fb05 	bl	800b7e0 <__lshift>
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	9b07      	ldr	r3, [sp, #28]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d04c      	beq.n	800b278 <_dtoa_r+0x9f8>
 800b1de:	6871      	ldr	r1, [r6, #4]
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 f93c 	bl	800b45e <_Balloc>
 800b1e6:	6932      	ldr	r2, [r6, #16]
 800b1e8:	3202      	adds	r2, #2
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	0092      	lsls	r2, r2, #2
 800b1ee:	f106 010c 	add.w	r1, r6, #12
 800b1f2:	300c      	adds	r0, #12
 800b1f4:	f000 f928 	bl	800b448 <memcpy>
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f000 faef 	bl	800b7e0 <__lshift>
 800b202:	9b00      	ldr	r3, [sp, #0]
 800b204:	f8cd b014 	str.w	fp, [sp, #20]
 800b208:	f003 0301 	and.w	r3, r3, #1
 800b20c:	46b1      	mov	r9, r6
 800b20e:	9307      	str	r3, [sp, #28]
 800b210:	4606      	mov	r6, r0
 800b212:	4639      	mov	r1, r7
 800b214:	9804      	ldr	r0, [sp, #16]
 800b216:	f7ff faa5 	bl	800a764 <quorem>
 800b21a:	4649      	mov	r1, r9
 800b21c:	4605      	mov	r5, r0
 800b21e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b222:	9804      	ldr	r0, [sp, #16]
 800b224:	f000 fb30 	bl	800b888 <__mcmp>
 800b228:	4632      	mov	r2, r6
 800b22a:	9000      	str	r0, [sp, #0]
 800b22c:	4639      	mov	r1, r7
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 fb44 	bl	800b8bc <__mdiff>
 800b234:	68c3      	ldr	r3, [r0, #12]
 800b236:	4602      	mov	r2, r0
 800b238:	bb03      	cbnz	r3, 800b27c <_dtoa_r+0x9fc>
 800b23a:	4601      	mov	r1, r0
 800b23c:	9008      	str	r0, [sp, #32]
 800b23e:	9804      	ldr	r0, [sp, #16]
 800b240:	f000 fb22 	bl	800b888 <__mcmp>
 800b244:	9a08      	ldr	r2, [sp, #32]
 800b246:	4603      	mov	r3, r0
 800b248:	4611      	mov	r1, r2
 800b24a:	4620      	mov	r0, r4
 800b24c:	9308      	str	r3, [sp, #32]
 800b24e:	f000 f93a 	bl	800b4c6 <_Bfree>
 800b252:	9b08      	ldr	r3, [sp, #32]
 800b254:	b9a3      	cbnz	r3, 800b280 <_dtoa_r+0xa00>
 800b256:	9a06      	ldr	r2, [sp, #24]
 800b258:	b992      	cbnz	r2, 800b280 <_dtoa_r+0xa00>
 800b25a:	9a07      	ldr	r2, [sp, #28]
 800b25c:	b982      	cbnz	r2, 800b280 <_dtoa_r+0xa00>
 800b25e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b262:	d029      	beq.n	800b2b8 <_dtoa_r+0xa38>
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	dd01      	ble.n	800b26e <_dtoa_r+0x9ee>
 800b26a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b26e:	9b05      	ldr	r3, [sp, #20]
 800b270:	1c5d      	adds	r5, r3, #1
 800b272:	f883 8000 	strb.w	r8, [r3]
 800b276:	e782      	b.n	800b17e <_dtoa_r+0x8fe>
 800b278:	4630      	mov	r0, r6
 800b27a:	e7c2      	b.n	800b202 <_dtoa_r+0x982>
 800b27c:	2301      	movs	r3, #1
 800b27e:	e7e3      	b.n	800b248 <_dtoa_r+0x9c8>
 800b280:	9a00      	ldr	r2, [sp, #0]
 800b282:	2a00      	cmp	r2, #0
 800b284:	db04      	blt.n	800b290 <_dtoa_r+0xa10>
 800b286:	d125      	bne.n	800b2d4 <_dtoa_r+0xa54>
 800b288:	9a06      	ldr	r2, [sp, #24]
 800b28a:	bb1a      	cbnz	r2, 800b2d4 <_dtoa_r+0xa54>
 800b28c:	9a07      	ldr	r2, [sp, #28]
 800b28e:	bb0a      	cbnz	r2, 800b2d4 <_dtoa_r+0xa54>
 800b290:	2b00      	cmp	r3, #0
 800b292:	ddec      	ble.n	800b26e <_dtoa_r+0x9ee>
 800b294:	2201      	movs	r2, #1
 800b296:	9904      	ldr	r1, [sp, #16]
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 faa1 	bl	800b7e0 <__lshift>
 800b29e:	4639      	mov	r1, r7
 800b2a0:	9004      	str	r0, [sp, #16]
 800b2a2:	f000 faf1 	bl	800b888 <__mcmp>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	dc03      	bgt.n	800b2b2 <_dtoa_r+0xa32>
 800b2aa:	d1e0      	bne.n	800b26e <_dtoa_r+0x9ee>
 800b2ac:	f018 0f01 	tst.w	r8, #1
 800b2b0:	d0dd      	beq.n	800b26e <_dtoa_r+0x9ee>
 800b2b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2b6:	d1d8      	bne.n	800b26a <_dtoa_r+0x9ea>
 800b2b8:	9b05      	ldr	r3, [sp, #20]
 800b2ba:	9a05      	ldr	r2, [sp, #20]
 800b2bc:	1c5d      	adds	r5, r3, #1
 800b2be:	2339      	movs	r3, #57	; 0x39
 800b2c0:	7013      	strb	r3, [r2, #0]
 800b2c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2c6:	2b39      	cmp	r3, #57	; 0x39
 800b2c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b2cc:	d04f      	beq.n	800b36e <_dtoa_r+0xaee>
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	7013      	strb	r3, [r2, #0]
 800b2d2:	e754      	b.n	800b17e <_dtoa_r+0x8fe>
 800b2d4:	9a05      	ldr	r2, [sp, #20]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f102 0501 	add.w	r5, r2, #1
 800b2dc:	dd06      	ble.n	800b2ec <_dtoa_r+0xa6c>
 800b2de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2e2:	d0e9      	beq.n	800b2b8 <_dtoa_r+0xa38>
 800b2e4:	f108 0801 	add.w	r8, r8, #1
 800b2e8:	9b05      	ldr	r3, [sp, #20]
 800b2ea:	e7c2      	b.n	800b272 <_dtoa_r+0x9f2>
 800b2ec:	9a02      	ldr	r2, [sp, #8]
 800b2ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b2f2:	eba5 030b 	sub.w	r3, r5, fp
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d021      	beq.n	800b33e <_dtoa_r+0xabe>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	220a      	movs	r2, #10
 800b2fe:	9904      	ldr	r1, [sp, #16]
 800b300:	4620      	mov	r0, r4
 800b302:	f000 f8f7 	bl	800b4f4 <__multadd>
 800b306:	45b1      	cmp	r9, r6
 800b308:	9004      	str	r0, [sp, #16]
 800b30a:	f04f 0300 	mov.w	r3, #0
 800b30e:	f04f 020a 	mov.w	r2, #10
 800b312:	4649      	mov	r1, r9
 800b314:	4620      	mov	r0, r4
 800b316:	d105      	bne.n	800b324 <_dtoa_r+0xaa4>
 800b318:	f000 f8ec 	bl	800b4f4 <__multadd>
 800b31c:	4681      	mov	r9, r0
 800b31e:	4606      	mov	r6, r0
 800b320:	9505      	str	r5, [sp, #20]
 800b322:	e776      	b.n	800b212 <_dtoa_r+0x992>
 800b324:	f000 f8e6 	bl	800b4f4 <__multadd>
 800b328:	4631      	mov	r1, r6
 800b32a:	4681      	mov	r9, r0
 800b32c:	2300      	movs	r3, #0
 800b32e:	220a      	movs	r2, #10
 800b330:	4620      	mov	r0, r4
 800b332:	f000 f8df 	bl	800b4f4 <__multadd>
 800b336:	4606      	mov	r6, r0
 800b338:	e7f2      	b.n	800b320 <_dtoa_r+0xaa0>
 800b33a:	f04f 0900 	mov.w	r9, #0
 800b33e:	2201      	movs	r2, #1
 800b340:	9904      	ldr	r1, [sp, #16]
 800b342:	4620      	mov	r0, r4
 800b344:	f000 fa4c 	bl	800b7e0 <__lshift>
 800b348:	4639      	mov	r1, r7
 800b34a:	9004      	str	r0, [sp, #16]
 800b34c:	f000 fa9c 	bl	800b888 <__mcmp>
 800b350:	2800      	cmp	r0, #0
 800b352:	dcb6      	bgt.n	800b2c2 <_dtoa_r+0xa42>
 800b354:	d102      	bne.n	800b35c <_dtoa_r+0xadc>
 800b356:	f018 0f01 	tst.w	r8, #1
 800b35a:	d1b2      	bne.n	800b2c2 <_dtoa_r+0xa42>
 800b35c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b360:	2b30      	cmp	r3, #48	; 0x30
 800b362:	f105 32ff 	add.w	r2, r5, #4294967295
 800b366:	f47f af0a 	bne.w	800b17e <_dtoa_r+0x8fe>
 800b36a:	4615      	mov	r5, r2
 800b36c:	e7f6      	b.n	800b35c <_dtoa_r+0xadc>
 800b36e:	4593      	cmp	fp, r2
 800b370:	d105      	bne.n	800b37e <_dtoa_r+0xafe>
 800b372:	2331      	movs	r3, #49	; 0x31
 800b374:	f10a 0a01 	add.w	sl, sl, #1
 800b378:	f88b 3000 	strb.w	r3, [fp]
 800b37c:	e6ff      	b.n	800b17e <_dtoa_r+0x8fe>
 800b37e:	4615      	mov	r5, r2
 800b380:	e79f      	b.n	800b2c2 <_dtoa_r+0xa42>
 800b382:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b3e8 <_dtoa_r+0xb68>
 800b386:	e007      	b.n	800b398 <_dtoa_r+0xb18>
 800b388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b38a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b3ec <_dtoa_r+0xb6c>
 800b38e:	b11b      	cbz	r3, 800b398 <_dtoa_r+0xb18>
 800b390:	f10b 0308 	add.w	r3, fp, #8
 800b394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	4658      	mov	r0, fp
 800b39a:	b017      	add	sp, #92	; 0x5c
 800b39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a0:	9b06      	ldr	r3, [sp, #24]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	f77f ae35 	ble.w	800b012 <_dtoa_r+0x792>
 800b3a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3aa:	9307      	str	r3, [sp, #28]
 800b3ac:	e649      	b.n	800b042 <_dtoa_r+0x7c2>
 800b3ae:	9b02      	ldr	r3, [sp, #8]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	dc03      	bgt.n	800b3bc <_dtoa_r+0xb3c>
 800b3b4:	9b06      	ldr	r3, [sp, #24]
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	f73f aecc 	bgt.w	800b154 <_dtoa_r+0x8d4>
 800b3bc:	465d      	mov	r5, fp
 800b3be:	4639      	mov	r1, r7
 800b3c0:	9804      	ldr	r0, [sp, #16]
 800b3c2:	f7ff f9cf 	bl	800a764 <quorem>
 800b3c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b3ca:	f805 8b01 	strb.w	r8, [r5], #1
 800b3ce:	9a02      	ldr	r2, [sp, #8]
 800b3d0:	eba5 030b 	sub.w	r3, r5, fp
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	ddb0      	ble.n	800b33a <_dtoa_r+0xaba>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	220a      	movs	r2, #10
 800b3dc:	9904      	ldr	r1, [sp, #16]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f000 f888 	bl	800b4f4 <__multadd>
 800b3e4:	9004      	str	r0, [sp, #16]
 800b3e6:	e7ea      	b.n	800b3be <_dtoa_r+0xb3e>
 800b3e8:	08010090 	.word	0x08010090
 800b3ec:	080100b4 	.word	0x080100b4

0800b3f0 <__locale_ctype_ptr_l>:
 800b3f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <_localeconv_r>:
 800b3f8:	4b04      	ldr	r3, [pc, #16]	; (800b40c <_localeconv_r+0x14>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6a18      	ldr	r0, [r3, #32]
 800b3fe:	4b04      	ldr	r3, [pc, #16]	; (800b410 <_localeconv_r+0x18>)
 800b400:	2800      	cmp	r0, #0
 800b402:	bf08      	it	eq
 800b404:	4618      	moveq	r0, r3
 800b406:	30f0      	adds	r0, #240	; 0xf0
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	20000044 	.word	0x20000044
 800b410:	200000a8 	.word	0x200000a8

0800b414 <malloc>:
 800b414:	4b02      	ldr	r3, [pc, #8]	; (800b420 <malloc+0xc>)
 800b416:	4601      	mov	r1, r0
 800b418:	6818      	ldr	r0, [r3, #0]
 800b41a:	f000 bb57 	b.w	800bacc <_malloc_r>
 800b41e:	bf00      	nop
 800b420:	20000044 	.word	0x20000044

0800b424 <__ascii_mbtowc>:
 800b424:	b082      	sub	sp, #8
 800b426:	b901      	cbnz	r1, 800b42a <__ascii_mbtowc+0x6>
 800b428:	a901      	add	r1, sp, #4
 800b42a:	b142      	cbz	r2, 800b43e <__ascii_mbtowc+0x1a>
 800b42c:	b14b      	cbz	r3, 800b442 <__ascii_mbtowc+0x1e>
 800b42e:	7813      	ldrb	r3, [r2, #0]
 800b430:	600b      	str	r3, [r1, #0]
 800b432:	7812      	ldrb	r2, [r2, #0]
 800b434:	1c10      	adds	r0, r2, #0
 800b436:	bf18      	it	ne
 800b438:	2001      	movne	r0, #1
 800b43a:	b002      	add	sp, #8
 800b43c:	4770      	bx	lr
 800b43e:	4610      	mov	r0, r2
 800b440:	e7fb      	b.n	800b43a <__ascii_mbtowc+0x16>
 800b442:	f06f 0001 	mvn.w	r0, #1
 800b446:	e7f8      	b.n	800b43a <__ascii_mbtowc+0x16>

0800b448 <memcpy>:
 800b448:	b510      	push	{r4, lr}
 800b44a:	1e43      	subs	r3, r0, #1
 800b44c:	440a      	add	r2, r1
 800b44e:	4291      	cmp	r1, r2
 800b450:	d100      	bne.n	800b454 <memcpy+0xc>
 800b452:	bd10      	pop	{r4, pc}
 800b454:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b45c:	e7f7      	b.n	800b44e <memcpy+0x6>

0800b45e <_Balloc>:
 800b45e:	b570      	push	{r4, r5, r6, lr}
 800b460:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b462:	4604      	mov	r4, r0
 800b464:	460e      	mov	r6, r1
 800b466:	b93d      	cbnz	r5, 800b478 <_Balloc+0x1a>
 800b468:	2010      	movs	r0, #16
 800b46a:	f7ff ffd3 	bl	800b414 <malloc>
 800b46e:	6260      	str	r0, [r4, #36]	; 0x24
 800b470:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b474:	6005      	str	r5, [r0, #0]
 800b476:	60c5      	str	r5, [r0, #12]
 800b478:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b47a:	68eb      	ldr	r3, [r5, #12]
 800b47c:	b183      	cbz	r3, 800b4a0 <_Balloc+0x42>
 800b47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b486:	b9b8      	cbnz	r0, 800b4b8 <_Balloc+0x5a>
 800b488:	2101      	movs	r1, #1
 800b48a:	fa01 f506 	lsl.w	r5, r1, r6
 800b48e:	1d6a      	adds	r2, r5, #5
 800b490:	0092      	lsls	r2, r2, #2
 800b492:	4620      	mov	r0, r4
 800b494:	f000 fabe 	bl	800ba14 <_calloc_r>
 800b498:	b160      	cbz	r0, 800b4b4 <_Balloc+0x56>
 800b49a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b49e:	e00e      	b.n	800b4be <_Balloc+0x60>
 800b4a0:	2221      	movs	r2, #33	; 0x21
 800b4a2:	2104      	movs	r1, #4
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f000 fab5 	bl	800ba14 <_calloc_r>
 800b4aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4ac:	60e8      	str	r0, [r5, #12]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e4      	bne.n	800b47e <_Balloc+0x20>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	6802      	ldr	r2, [r0, #0]
 800b4ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4c4:	e7f7      	b.n	800b4b6 <_Balloc+0x58>

0800b4c6 <_Bfree>:
 800b4c6:	b570      	push	{r4, r5, r6, lr}
 800b4c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460d      	mov	r5, r1
 800b4ce:	b93c      	cbnz	r4, 800b4e0 <_Bfree+0x1a>
 800b4d0:	2010      	movs	r0, #16
 800b4d2:	f7ff ff9f 	bl	800b414 <malloc>
 800b4d6:	6270      	str	r0, [r6, #36]	; 0x24
 800b4d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4dc:	6004      	str	r4, [r0, #0]
 800b4de:	60c4      	str	r4, [r0, #12]
 800b4e0:	b13d      	cbz	r5, 800b4f2 <_Bfree+0x2c>
 800b4e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b4e4:	686a      	ldr	r2, [r5, #4]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4ec:	6029      	str	r1, [r5, #0]
 800b4ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}

0800b4f4 <__multadd>:
 800b4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f8:	690d      	ldr	r5, [r1, #16]
 800b4fa:	461f      	mov	r7, r3
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460c      	mov	r4, r1
 800b500:	f101 0c14 	add.w	ip, r1, #20
 800b504:	2300      	movs	r3, #0
 800b506:	f8dc 0000 	ldr.w	r0, [ip]
 800b50a:	b281      	uxth	r1, r0
 800b50c:	fb02 7101 	mla	r1, r2, r1, r7
 800b510:	0c0f      	lsrs	r7, r1, #16
 800b512:	0c00      	lsrs	r0, r0, #16
 800b514:	fb02 7000 	mla	r0, r2, r0, r7
 800b518:	b289      	uxth	r1, r1
 800b51a:	3301      	adds	r3, #1
 800b51c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b520:	429d      	cmp	r5, r3
 800b522:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b526:	f84c 1b04 	str.w	r1, [ip], #4
 800b52a:	dcec      	bgt.n	800b506 <__multadd+0x12>
 800b52c:	b1d7      	cbz	r7, 800b564 <__multadd+0x70>
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	42ab      	cmp	r3, r5
 800b532:	dc12      	bgt.n	800b55a <__multadd+0x66>
 800b534:	6861      	ldr	r1, [r4, #4]
 800b536:	4630      	mov	r0, r6
 800b538:	3101      	adds	r1, #1
 800b53a:	f7ff ff90 	bl	800b45e <_Balloc>
 800b53e:	6922      	ldr	r2, [r4, #16]
 800b540:	3202      	adds	r2, #2
 800b542:	f104 010c 	add.w	r1, r4, #12
 800b546:	4680      	mov	r8, r0
 800b548:	0092      	lsls	r2, r2, #2
 800b54a:	300c      	adds	r0, #12
 800b54c:	f7ff ff7c 	bl	800b448 <memcpy>
 800b550:	4621      	mov	r1, r4
 800b552:	4630      	mov	r0, r6
 800b554:	f7ff ffb7 	bl	800b4c6 <_Bfree>
 800b558:	4644      	mov	r4, r8
 800b55a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b55e:	3501      	adds	r5, #1
 800b560:	615f      	str	r7, [r3, #20]
 800b562:	6125      	str	r5, [r4, #16]
 800b564:	4620      	mov	r0, r4
 800b566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b56a <__hi0bits>:
 800b56a:	0c02      	lsrs	r2, r0, #16
 800b56c:	0412      	lsls	r2, r2, #16
 800b56e:	4603      	mov	r3, r0
 800b570:	b9b2      	cbnz	r2, 800b5a0 <__hi0bits+0x36>
 800b572:	0403      	lsls	r3, r0, #16
 800b574:	2010      	movs	r0, #16
 800b576:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b57a:	bf04      	itt	eq
 800b57c:	021b      	lsleq	r3, r3, #8
 800b57e:	3008      	addeq	r0, #8
 800b580:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b584:	bf04      	itt	eq
 800b586:	011b      	lsleq	r3, r3, #4
 800b588:	3004      	addeq	r0, #4
 800b58a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b58e:	bf04      	itt	eq
 800b590:	009b      	lsleq	r3, r3, #2
 800b592:	3002      	addeq	r0, #2
 800b594:	2b00      	cmp	r3, #0
 800b596:	db06      	blt.n	800b5a6 <__hi0bits+0x3c>
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	d503      	bpl.n	800b5a4 <__hi0bits+0x3a>
 800b59c:	3001      	adds	r0, #1
 800b59e:	4770      	bx	lr
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	e7e8      	b.n	800b576 <__hi0bits+0xc>
 800b5a4:	2020      	movs	r0, #32
 800b5a6:	4770      	bx	lr

0800b5a8 <__lo0bits>:
 800b5a8:	6803      	ldr	r3, [r0, #0]
 800b5aa:	f013 0207 	ands.w	r2, r3, #7
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	d00b      	beq.n	800b5ca <__lo0bits+0x22>
 800b5b2:	07da      	lsls	r2, r3, #31
 800b5b4:	d423      	bmi.n	800b5fe <__lo0bits+0x56>
 800b5b6:	0798      	lsls	r0, r3, #30
 800b5b8:	bf49      	itett	mi
 800b5ba:	085b      	lsrmi	r3, r3, #1
 800b5bc:	089b      	lsrpl	r3, r3, #2
 800b5be:	2001      	movmi	r0, #1
 800b5c0:	600b      	strmi	r3, [r1, #0]
 800b5c2:	bf5c      	itt	pl
 800b5c4:	600b      	strpl	r3, [r1, #0]
 800b5c6:	2002      	movpl	r0, #2
 800b5c8:	4770      	bx	lr
 800b5ca:	b298      	uxth	r0, r3
 800b5cc:	b9a8      	cbnz	r0, 800b5fa <__lo0bits+0x52>
 800b5ce:	0c1b      	lsrs	r3, r3, #16
 800b5d0:	2010      	movs	r0, #16
 800b5d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b5d6:	bf04      	itt	eq
 800b5d8:	0a1b      	lsreq	r3, r3, #8
 800b5da:	3008      	addeq	r0, #8
 800b5dc:	071a      	lsls	r2, r3, #28
 800b5de:	bf04      	itt	eq
 800b5e0:	091b      	lsreq	r3, r3, #4
 800b5e2:	3004      	addeq	r0, #4
 800b5e4:	079a      	lsls	r2, r3, #30
 800b5e6:	bf04      	itt	eq
 800b5e8:	089b      	lsreq	r3, r3, #2
 800b5ea:	3002      	addeq	r0, #2
 800b5ec:	07da      	lsls	r2, r3, #31
 800b5ee:	d402      	bmi.n	800b5f6 <__lo0bits+0x4e>
 800b5f0:	085b      	lsrs	r3, r3, #1
 800b5f2:	d006      	beq.n	800b602 <__lo0bits+0x5a>
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	600b      	str	r3, [r1, #0]
 800b5f8:	4770      	bx	lr
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	e7e9      	b.n	800b5d2 <__lo0bits+0x2a>
 800b5fe:	2000      	movs	r0, #0
 800b600:	4770      	bx	lr
 800b602:	2020      	movs	r0, #32
 800b604:	4770      	bx	lr

0800b606 <__i2b>:
 800b606:	b510      	push	{r4, lr}
 800b608:	460c      	mov	r4, r1
 800b60a:	2101      	movs	r1, #1
 800b60c:	f7ff ff27 	bl	800b45e <_Balloc>
 800b610:	2201      	movs	r2, #1
 800b612:	6144      	str	r4, [r0, #20]
 800b614:	6102      	str	r2, [r0, #16]
 800b616:	bd10      	pop	{r4, pc}

0800b618 <__multiply>:
 800b618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4614      	mov	r4, r2
 800b61e:	690a      	ldr	r2, [r1, #16]
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	429a      	cmp	r2, r3
 800b624:	bfb8      	it	lt
 800b626:	460b      	movlt	r3, r1
 800b628:	4688      	mov	r8, r1
 800b62a:	bfbc      	itt	lt
 800b62c:	46a0      	movlt	r8, r4
 800b62e:	461c      	movlt	r4, r3
 800b630:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b634:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b638:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b63c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b640:	eb07 0609 	add.w	r6, r7, r9
 800b644:	42b3      	cmp	r3, r6
 800b646:	bfb8      	it	lt
 800b648:	3101      	addlt	r1, #1
 800b64a:	f7ff ff08 	bl	800b45e <_Balloc>
 800b64e:	f100 0514 	add.w	r5, r0, #20
 800b652:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b656:	462b      	mov	r3, r5
 800b658:	2200      	movs	r2, #0
 800b65a:	4573      	cmp	r3, lr
 800b65c:	d316      	bcc.n	800b68c <__multiply+0x74>
 800b65e:	f104 0214 	add.w	r2, r4, #20
 800b662:	f108 0114 	add.w	r1, r8, #20
 800b666:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b66a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	9b00      	ldr	r3, [sp, #0]
 800b672:	9201      	str	r2, [sp, #4]
 800b674:	4293      	cmp	r3, r2
 800b676:	d80c      	bhi.n	800b692 <__multiply+0x7a>
 800b678:	2e00      	cmp	r6, #0
 800b67a:	dd03      	ble.n	800b684 <__multiply+0x6c>
 800b67c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b680:	2b00      	cmp	r3, #0
 800b682:	d05d      	beq.n	800b740 <__multiply+0x128>
 800b684:	6106      	str	r6, [r0, #16]
 800b686:	b003      	add	sp, #12
 800b688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68c:	f843 2b04 	str.w	r2, [r3], #4
 800b690:	e7e3      	b.n	800b65a <__multiply+0x42>
 800b692:	f8b2 b000 	ldrh.w	fp, [r2]
 800b696:	f1bb 0f00 	cmp.w	fp, #0
 800b69a:	d023      	beq.n	800b6e4 <__multiply+0xcc>
 800b69c:	4689      	mov	r9, r1
 800b69e:	46ac      	mov	ip, r5
 800b6a0:	f04f 0800 	mov.w	r8, #0
 800b6a4:	f859 4b04 	ldr.w	r4, [r9], #4
 800b6a8:	f8dc a000 	ldr.w	sl, [ip]
 800b6ac:	b2a3      	uxth	r3, r4
 800b6ae:	fa1f fa8a 	uxth.w	sl, sl
 800b6b2:	fb0b a303 	mla	r3, fp, r3, sl
 800b6b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b6ba:	f8dc 4000 	ldr.w	r4, [ip]
 800b6be:	4443      	add	r3, r8
 800b6c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b6c4:	fb0b 840a 	mla	r4, fp, sl, r8
 800b6c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b6cc:	46e2      	mov	sl, ip
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6d4:	454f      	cmp	r7, r9
 800b6d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b6da:	f84a 3b04 	str.w	r3, [sl], #4
 800b6de:	d82b      	bhi.n	800b738 <__multiply+0x120>
 800b6e0:	f8cc 8004 	str.w	r8, [ip, #4]
 800b6e4:	9b01      	ldr	r3, [sp, #4]
 800b6e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b6ea:	3204      	adds	r2, #4
 800b6ec:	f1ba 0f00 	cmp.w	sl, #0
 800b6f0:	d020      	beq.n	800b734 <__multiply+0x11c>
 800b6f2:	682b      	ldr	r3, [r5, #0]
 800b6f4:	4689      	mov	r9, r1
 800b6f6:	46a8      	mov	r8, r5
 800b6f8:	f04f 0b00 	mov.w	fp, #0
 800b6fc:	f8b9 c000 	ldrh.w	ip, [r9]
 800b700:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b704:	fb0a 440c 	mla	r4, sl, ip, r4
 800b708:	445c      	add	r4, fp
 800b70a:	46c4      	mov	ip, r8
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b712:	f84c 3b04 	str.w	r3, [ip], #4
 800b716:	f859 3b04 	ldr.w	r3, [r9], #4
 800b71a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b71e:	0c1b      	lsrs	r3, r3, #16
 800b720:	fb0a b303 	mla	r3, sl, r3, fp
 800b724:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b728:	454f      	cmp	r7, r9
 800b72a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b72e:	d805      	bhi.n	800b73c <__multiply+0x124>
 800b730:	f8c8 3004 	str.w	r3, [r8, #4]
 800b734:	3504      	adds	r5, #4
 800b736:	e79b      	b.n	800b670 <__multiply+0x58>
 800b738:	46d4      	mov	ip, sl
 800b73a:	e7b3      	b.n	800b6a4 <__multiply+0x8c>
 800b73c:	46e0      	mov	r8, ip
 800b73e:	e7dd      	b.n	800b6fc <__multiply+0xe4>
 800b740:	3e01      	subs	r6, #1
 800b742:	e799      	b.n	800b678 <__multiply+0x60>

0800b744 <__pow5mult>:
 800b744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b748:	4615      	mov	r5, r2
 800b74a:	f012 0203 	ands.w	r2, r2, #3
 800b74e:	4606      	mov	r6, r0
 800b750:	460f      	mov	r7, r1
 800b752:	d007      	beq.n	800b764 <__pow5mult+0x20>
 800b754:	3a01      	subs	r2, #1
 800b756:	4c21      	ldr	r4, [pc, #132]	; (800b7dc <__pow5mult+0x98>)
 800b758:	2300      	movs	r3, #0
 800b75a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b75e:	f7ff fec9 	bl	800b4f4 <__multadd>
 800b762:	4607      	mov	r7, r0
 800b764:	10ad      	asrs	r5, r5, #2
 800b766:	d035      	beq.n	800b7d4 <__pow5mult+0x90>
 800b768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b76a:	b93c      	cbnz	r4, 800b77c <__pow5mult+0x38>
 800b76c:	2010      	movs	r0, #16
 800b76e:	f7ff fe51 	bl	800b414 <malloc>
 800b772:	6270      	str	r0, [r6, #36]	; 0x24
 800b774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b778:	6004      	str	r4, [r0, #0]
 800b77a:	60c4      	str	r4, [r0, #12]
 800b77c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b784:	b94c      	cbnz	r4, 800b79a <__pow5mult+0x56>
 800b786:	f240 2171 	movw	r1, #625	; 0x271
 800b78a:	4630      	mov	r0, r6
 800b78c:	f7ff ff3b 	bl	800b606 <__i2b>
 800b790:	2300      	movs	r3, #0
 800b792:	f8c8 0008 	str.w	r0, [r8, #8]
 800b796:	4604      	mov	r4, r0
 800b798:	6003      	str	r3, [r0, #0]
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	07eb      	lsls	r3, r5, #31
 800b7a0:	d50a      	bpl.n	800b7b8 <__pow5mult+0x74>
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f7ff ff36 	bl	800b618 <__multiply>
 800b7ac:	4639      	mov	r1, r7
 800b7ae:	4681      	mov	r9, r0
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f7ff fe88 	bl	800b4c6 <_Bfree>
 800b7b6:	464f      	mov	r7, r9
 800b7b8:	106d      	asrs	r5, r5, #1
 800b7ba:	d00b      	beq.n	800b7d4 <__pow5mult+0x90>
 800b7bc:	6820      	ldr	r0, [r4, #0]
 800b7be:	b938      	cbnz	r0, 800b7d0 <__pow5mult+0x8c>
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7ff ff27 	bl	800b618 <__multiply>
 800b7ca:	6020      	str	r0, [r4, #0]
 800b7cc:	f8c0 8000 	str.w	r8, [r0]
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	e7e4      	b.n	800b79e <__pow5mult+0x5a>
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7da:	bf00      	nop
 800b7dc:	080101c0 	.word	0x080101c0

0800b7e0 <__lshift>:
 800b7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	6849      	ldr	r1, [r1, #4]
 800b7ee:	eb0a 0903 	add.w	r9, sl, r3
 800b7f2:	68a3      	ldr	r3, [r4, #8]
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	4616      	mov	r6, r2
 800b7f8:	f109 0501 	add.w	r5, r9, #1
 800b7fc:	42ab      	cmp	r3, r5
 800b7fe:	db32      	blt.n	800b866 <__lshift+0x86>
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff fe2c 	bl	800b45e <_Balloc>
 800b806:	2300      	movs	r3, #0
 800b808:	4680      	mov	r8, r0
 800b80a:	f100 0114 	add.w	r1, r0, #20
 800b80e:	461a      	mov	r2, r3
 800b810:	4553      	cmp	r3, sl
 800b812:	db2b      	blt.n	800b86c <__lshift+0x8c>
 800b814:	6920      	ldr	r0, [r4, #16]
 800b816:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b81a:	f104 0314 	add.w	r3, r4, #20
 800b81e:	f016 021f 	ands.w	r2, r6, #31
 800b822:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b826:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b82a:	d025      	beq.n	800b878 <__lshift+0x98>
 800b82c:	f1c2 0e20 	rsb	lr, r2, #32
 800b830:	2000      	movs	r0, #0
 800b832:	681e      	ldr	r6, [r3, #0]
 800b834:	468a      	mov	sl, r1
 800b836:	4096      	lsls	r6, r2
 800b838:	4330      	orrs	r0, r6
 800b83a:	f84a 0b04 	str.w	r0, [sl], #4
 800b83e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b842:	459c      	cmp	ip, r3
 800b844:	fa20 f00e 	lsr.w	r0, r0, lr
 800b848:	d814      	bhi.n	800b874 <__lshift+0x94>
 800b84a:	6048      	str	r0, [r1, #4]
 800b84c:	b108      	cbz	r0, 800b852 <__lshift+0x72>
 800b84e:	f109 0502 	add.w	r5, r9, #2
 800b852:	3d01      	subs	r5, #1
 800b854:	4638      	mov	r0, r7
 800b856:	f8c8 5010 	str.w	r5, [r8, #16]
 800b85a:	4621      	mov	r1, r4
 800b85c:	f7ff fe33 	bl	800b4c6 <_Bfree>
 800b860:	4640      	mov	r0, r8
 800b862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b866:	3101      	adds	r1, #1
 800b868:	005b      	lsls	r3, r3, #1
 800b86a:	e7c7      	b.n	800b7fc <__lshift+0x1c>
 800b86c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b870:	3301      	adds	r3, #1
 800b872:	e7cd      	b.n	800b810 <__lshift+0x30>
 800b874:	4651      	mov	r1, sl
 800b876:	e7dc      	b.n	800b832 <__lshift+0x52>
 800b878:	3904      	subs	r1, #4
 800b87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b87e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b882:	459c      	cmp	ip, r3
 800b884:	d8f9      	bhi.n	800b87a <__lshift+0x9a>
 800b886:	e7e4      	b.n	800b852 <__lshift+0x72>

0800b888 <__mcmp>:
 800b888:	6903      	ldr	r3, [r0, #16]
 800b88a:	690a      	ldr	r2, [r1, #16]
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	b530      	push	{r4, r5, lr}
 800b890:	d10c      	bne.n	800b8ac <__mcmp+0x24>
 800b892:	0092      	lsls	r2, r2, #2
 800b894:	3014      	adds	r0, #20
 800b896:	3114      	adds	r1, #20
 800b898:	1884      	adds	r4, r0, r2
 800b89a:	4411      	add	r1, r2
 800b89c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b8a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b8a4:	4295      	cmp	r5, r2
 800b8a6:	d003      	beq.n	800b8b0 <__mcmp+0x28>
 800b8a8:	d305      	bcc.n	800b8b6 <__mcmp+0x2e>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	bd30      	pop	{r4, r5, pc}
 800b8b0:	42a0      	cmp	r0, r4
 800b8b2:	d3f3      	bcc.n	800b89c <__mcmp+0x14>
 800b8b4:	e7fa      	b.n	800b8ac <__mcmp+0x24>
 800b8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ba:	e7f7      	b.n	800b8ac <__mcmp+0x24>

0800b8bc <__mdiff>:
 800b8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	4607      	mov	r7, r0
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	f7ff ffdd 	bl	800b888 <__mcmp>
 800b8ce:	1e06      	subs	r6, r0, #0
 800b8d0:	d108      	bne.n	800b8e4 <__mdiff+0x28>
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	4638      	mov	r0, r7
 800b8d6:	f7ff fdc2 	bl	800b45e <_Balloc>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e4:	bfa4      	itt	ge
 800b8e6:	4623      	movge	r3, r4
 800b8e8:	462c      	movge	r4, r5
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	6861      	ldr	r1, [r4, #4]
 800b8ee:	bfa6      	itte	ge
 800b8f0:	461d      	movge	r5, r3
 800b8f2:	2600      	movge	r6, #0
 800b8f4:	2601      	movlt	r6, #1
 800b8f6:	f7ff fdb2 	bl	800b45e <_Balloc>
 800b8fa:	692b      	ldr	r3, [r5, #16]
 800b8fc:	60c6      	str	r6, [r0, #12]
 800b8fe:	6926      	ldr	r6, [r4, #16]
 800b900:	f105 0914 	add.w	r9, r5, #20
 800b904:	f104 0214 	add.w	r2, r4, #20
 800b908:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b90c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b910:	f100 0514 	add.w	r5, r0, #20
 800b914:	f04f 0e00 	mov.w	lr, #0
 800b918:	f852 ab04 	ldr.w	sl, [r2], #4
 800b91c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b920:	fa1e f18a 	uxtah	r1, lr, sl
 800b924:	b2a3      	uxth	r3, r4
 800b926:	1ac9      	subs	r1, r1, r3
 800b928:	0c23      	lsrs	r3, r4, #16
 800b92a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b92e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b932:	b289      	uxth	r1, r1
 800b934:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b938:	45c8      	cmp	r8, r9
 800b93a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b93e:	4694      	mov	ip, r2
 800b940:	f845 3b04 	str.w	r3, [r5], #4
 800b944:	d8e8      	bhi.n	800b918 <__mdiff+0x5c>
 800b946:	45bc      	cmp	ip, r7
 800b948:	d304      	bcc.n	800b954 <__mdiff+0x98>
 800b94a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b94e:	b183      	cbz	r3, 800b972 <__mdiff+0xb6>
 800b950:	6106      	str	r6, [r0, #16]
 800b952:	e7c5      	b.n	800b8e0 <__mdiff+0x24>
 800b954:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b958:	fa1e f381 	uxtah	r3, lr, r1
 800b95c:	141a      	asrs	r2, r3, #16
 800b95e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b962:	b29b      	uxth	r3, r3
 800b964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b968:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b96c:	f845 3b04 	str.w	r3, [r5], #4
 800b970:	e7e9      	b.n	800b946 <__mdiff+0x8a>
 800b972:	3e01      	subs	r6, #1
 800b974:	e7e9      	b.n	800b94a <__mdiff+0x8e>

0800b976 <__d2b>:
 800b976:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b97a:	460e      	mov	r6, r1
 800b97c:	2101      	movs	r1, #1
 800b97e:	ec59 8b10 	vmov	r8, r9, d0
 800b982:	4615      	mov	r5, r2
 800b984:	f7ff fd6b 	bl	800b45e <_Balloc>
 800b988:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b98c:	4607      	mov	r7, r0
 800b98e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b992:	bb34      	cbnz	r4, 800b9e2 <__d2b+0x6c>
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	f1b8 0300 	subs.w	r3, r8, #0
 800b99a:	d027      	beq.n	800b9ec <__d2b+0x76>
 800b99c:	a802      	add	r0, sp, #8
 800b99e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b9a2:	f7ff fe01 	bl	800b5a8 <__lo0bits>
 800b9a6:	9900      	ldr	r1, [sp, #0]
 800b9a8:	b1f0      	cbz	r0, 800b9e8 <__d2b+0x72>
 800b9aa:	9a01      	ldr	r2, [sp, #4]
 800b9ac:	f1c0 0320 	rsb	r3, r0, #32
 800b9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	40c2      	lsrs	r2, r0
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	9201      	str	r2, [sp, #4]
 800b9bc:	9b01      	ldr	r3, [sp, #4]
 800b9be:	61bb      	str	r3, [r7, #24]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	bf14      	ite	ne
 800b9c4:	2102      	movne	r1, #2
 800b9c6:	2101      	moveq	r1, #1
 800b9c8:	6139      	str	r1, [r7, #16]
 800b9ca:	b1c4      	cbz	r4, 800b9fe <__d2b+0x88>
 800b9cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b9d0:	4404      	add	r4, r0
 800b9d2:	6034      	str	r4, [r6, #0]
 800b9d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9d8:	6028      	str	r0, [r5, #0]
 800b9da:	4638      	mov	r0, r7
 800b9dc:	b003      	add	sp, #12
 800b9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9e6:	e7d5      	b.n	800b994 <__d2b+0x1e>
 800b9e8:	6179      	str	r1, [r7, #20]
 800b9ea:	e7e7      	b.n	800b9bc <__d2b+0x46>
 800b9ec:	a801      	add	r0, sp, #4
 800b9ee:	f7ff fddb 	bl	800b5a8 <__lo0bits>
 800b9f2:	9b01      	ldr	r3, [sp, #4]
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	6139      	str	r1, [r7, #16]
 800b9fa:	3020      	adds	r0, #32
 800b9fc:	e7e5      	b.n	800b9ca <__d2b+0x54>
 800b9fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ba02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba06:	6030      	str	r0, [r6, #0]
 800ba08:	6918      	ldr	r0, [r3, #16]
 800ba0a:	f7ff fdae 	bl	800b56a <__hi0bits>
 800ba0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ba12:	e7e1      	b.n	800b9d8 <__d2b+0x62>

0800ba14 <_calloc_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	fb02 f401 	mul.w	r4, r2, r1
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	f000 f856 	bl	800bacc <_malloc_r>
 800ba20:	4605      	mov	r5, r0
 800ba22:	b118      	cbz	r0, 800ba2c <_calloc_r+0x18>
 800ba24:	4622      	mov	r2, r4
 800ba26:	2100      	movs	r1, #0
 800ba28:	f7fe f986 	bl	8009d38 <memset>
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}

0800ba30 <_free_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4605      	mov	r5, r0
 800ba34:	2900      	cmp	r1, #0
 800ba36:	d045      	beq.n	800bac4 <_free_r+0x94>
 800ba38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba3c:	1f0c      	subs	r4, r1, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	bfb8      	it	lt
 800ba42:	18e4      	addlt	r4, r4, r3
 800ba44:	f000 fa24 	bl	800be90 <__malloc_lock>
 800ba48:	4a1f      	ldr	r2, [pc, #124]	; (800bac8 <_free_r+0x98>)
 800ba4a:	6813      	ldr	r3, [r2, #0]
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	b933      	cbnz	r3, 800ba5e <_free_r+0x2e>
 800ba50:	6063      	str	r3, [r4, #4]
 800ba52:	6014      	str	r4, [r2, #0]
 800ba54:	4628      	mov	r0, r5
 800ba56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba5a:	f000 ba1a 	b.w	800be92 <__malloc_unlock>
 800ba5e:	42a3      	cmp	r3, r4
 800ba60:	d90c      	bls.n	800ba7c <_free_r+0x4c>
 800ba62:	6821      	ldr	r1, [r4, #0]
 800ba64:	1862      	adds	r2, r4, r1
 800ba66:	4293      	cmp	r3, r2
 800ba68:	bf04      	itt	eq
 800ba6a:	681a      	ldreq	r2, [r3, #0]
 800ba6c:	685b      	ldreq	r3, [r3, #4]
 800ba6e:	6063      	str	r3, [r4, #4]
 800ba70:	bf04      	itt	eq
 800ba72:	1852      	addeq	r2, r2, r1
 800ba74:	6022      	streq	r2, [r4, #0]
 800ba76:	6004      	str	r4, [r0, #0]
 800ba78:	e7ec      	b.n	800ba54 <_free_r+0x24>
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	b10a      	cbz	r2, 800ba84 <_free_r+0x54>
 800ba80:	42a2      	cmp	r2, r4
 800ba82:	d9fa      	bls.n	800ba7a <_free_r+0x4a>
 800ba84:	6819      	ldr	r1, [r3, #0]
 800ba86:	1858      	adds	r0, r3, r1
 800ba88:	42a0      	cmp	r0, r4
 800ba8a:	d10b      	bne.n	800baa4 <_free_r+0x74>
 800ba8c:	6820      	ldr	r0, [r4, #0]
 800ba8e:	4401      	add	r1, r0
 800ba90:	1858      	adds	r0, r3, r1
 800ba92:	4282      	cmp	r2, r0
 800ba94:	6019      	str	r1, [r3, #0]
 800ba96:	d1dd      	bne.n	800ba54 <_free_r+0x24>
 800ba98:	6810      	ldr	r0, [r2, #0]
 800ba9a:	6852      	ldr	r2, [r2, #4]
 800ba9c:	605a      	str	r2, [r3, #4]
 800ba9e:	4401      	add	r1, r0
 800baa0:	6019      	str	r1, [r3, #0]
 800baa2:	e7d7      	b.n	800ba54 <_free_r+0x24>
 800baa4:	d902      	bls.n	800baac <_free_r+0x7c>
 800baa6:	230c      	movs	r3, #12
 800baa8:	602b      	str	r3, [r5, #0]
 800baaa:	e7d3      	b.n	800ba54 <_free_r+0x24>
 800baac:	6820      	ldr	r0, [r4, #0]
 800baae:	1821      	adds	r1, r4, r0
 800bab0:	428a      	cmp	r2, r1
 800bab2:	bf04      	itt	eq
 800bab4:	6811      	ldreq	r1, [r2, #0]
 800bab6:	6852      	ldreq	r2, [r2, #4]
 800bab8:	6062      	str	r2, [r4, #4]
 800baba:	bf04      	itt	eq
 800babc:	1809      	addeq	r1, r1, r0
 800babe:	6021      	streq	r1, [r4, #0]
 800bac0:	605c      	str	r4, [r3, #4]
 800bac2:	e7c7      	b.n	800ba54 <_free_r+0x24>
 800bac4:	bd38      	pop	{r3, r4, r5, pc}
 800bac6:	bf00      	nop
 800bac8:	2000027c 	.word	0x2000027c

0800bacc <_malloc_r>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	1ccd      	adds	r5, r1, #3
 800bad0:	f025 0503 	bic.w	r5, r5, #3
 800bad4:	3508      	adds	r5, #8
 800bad6:	2d0c      	cmp	r5, #12
 800bad8:	bf38      	it	cc
 800bada:	250c      	movcc	r5, #12
 800badc:	2d00      	cmp	r5, #0
 800bade:	4606      	mov	r6, r0
 800bae0:	db01      	blt.n	800bae6 <_malloc_r+0x1a>
 800bae2:	42a9      	cmp	r1, r5
 800bae4:	d903      	bls.n	800baee <_malloc_r+0x22>
 800bae6:	230c      	movs	r3, #12
 800bae8:	6033      	str	r3, [r6, #0]
 800baea:	2000      	movs	r0, #0
 800baec:	bd70      	pop	{r4, r5, r6, pc}
 800baee:	f000 f9cf 	bl	800be90 <__malloc_lock>
 800baf2:	4a21      	ldr	r2, [pc, #132]	; (800bb78 <_malloc_r+0xac>)
 800baf4:	6814      	ldr	r4, [r2, #0]
 800baf6:	4621      	mov	r1, r4
 800baf8:	b991      	cbnz	r1, 800bb20 <_malloc_r+0x54>
 800bafa:	4c20      	ldr	r4, [pc, #128]	; (800bb7c <_malloc_r+0xb0>)
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	b91b      	cbnz	r3, 800bb08 <_malloc_r+0x3c>
 800bb00:	4630      	mov	r0, r6
 800bb02:	f000 f98f 	bl	800be24 <_sbrk_r>
 800bb06:	6020      	str	r0, [r4, #0]
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f000 f98a 	bl	800be24 <_sbrk_r>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d124      	bne.n	800bb5e <_malloc_r+0x92>
 800bb14:	230c      	movs	r3, #12
 800bb16:	6033      	str	r3, [r6, #0]
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f000 f9ba 	bl	800be92 <__malloc_unlock>
 800bb1e:	e7e4      	b.n	800baea <_malloc_r+0x1e>
 800bb20:	680b      	ldr	r3, [r1, #0]
 800bb22:	1b5b      	subs	r3, r3, r5
 800bb24:	d418      	bmi.n	800bb58 <_malloc_r+0x8c>
 800bb26:	2b0b      	cmp	r3, #11
 800bb28:	d90f      	bls.n	800bb4a <_malloc_r+0x7e>
 800bb2a:	600b      	str	r3, [r1, #0]
 800bb2c:	50cd      	str	r5, [r1, r3]
 800bb2e:	18cc      	adds	r4, r1, r3
 800bb30:	4630      	mov	r0, r6
 800bb32:	f000 f9ae 	bl	800be92 <__malloc_unlock>
 800bb36:	f104 000b 	add.w	r0, r4, #11
 800bb3a:	1d23      	adds	r3, r4, #4
 800bb3c:	f020 0007 	bic.w	r0, r0, #7
 800bb40:	1ac3      	subs	r3, r0, r3
 800bb42:	d0d3      	beq.n	800baec <_malloc_r+0x20>
 800bb44:	425a      	negs	r2, r3
 800bb46:	50e2      	str	r2, [r4, r3]
 800bb48:	e7d0      	b.n	800baec <_malloc_r+0x20>
 800bb4a:	428c      	cmp	r4, r1
 800bb4c:	684b      	ldr	r3, [r1, #4]
 800bb4e:	bf16      	itet	ne
 800bb50:	6063      	strne	r3, [r4, #4]
 800bb52:	6013      	streq	r3, [r2, #0]
 800bb54:	460c      	movne	r4, r1
 800bb56:	e7eb      	b.n	800bb30 <_malloc_r+0x64>
 800bb58:	460c      	mov	r4, r1
 800bb5a:	6849      	ldr	r1, [r1, #4]
 800bb5c:	e7cc      	b.n	800baf8 <_malloc_r+0x2c>
 800bb5e:	1cc4      	adds	r4, r0, #3
 800bb60:	f024 0403 	bic.w	r4, r4, #3
 800bb64:	42a0      	cmp	r0, r4
 800bb66:	d005      	beq.n	800bb74 <_malloc_r+0xa8>
 800bb68:	1a21      	subs	r1, r4, r0
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f000 f95a 	bl	800be24 <_sbrk_r>
 800bb70:	3001      	adds	r0, #1
 800bb72:	d0cf      	beq.n	800bb14 <_malloc_r+0x48>
 800bb74:	6025      	str	r5, [r4, #0]
 800bb76:	e7db      	b.n	800bb30 <_malloc_r+0x64>
 800bb78:	2000027c 	.word	0x2000027c
 800bb7c:	20000280 	.word	0x20000280

0800bb80 <__ssputs_r>:
 800bb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb84:	688e      	ldr	r6, [r1, #8]
 800bb86:	429e      	cmp	r6, r3
 800bb88:	4682      	mov	sl, r0
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	4690      	mov	r8, r2
 800bb8e:	4699      	mov	r9, r3
 800bb90:	d837      	bhi.n	800bc02 <__ssputs_r+0x82>
 800bb92:	898a      	ldrh	r2, [r1, #12]
 800bb94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb98:	d031      	beq.n	800bbfe <__ssputs_r+0x7e>
 800bb9a:	6825      	ldr	r5, [r4, #0]
 800bb9c:	6909      	ldr	r1, [r1, #16]
 800bb9e:	1a6f      	subs	r7, r5, r1
 800bba0:	6965      	ldr	r5, [r4, #20]
 800bba2:	2302      	movs	r3, #2
 800bba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bba8:	fb95 f5f3 	sdiv	r5, r5, r3
 800bbac:	f109 0301 	add.w	r3, r9, #1
 800bbb0:	443b      	add	r3, r7
 800bbb2:	429d      	cmp	r5, r3
 800bbb4:	bf38      	it	cc
 800bbb6:	461d      	movcc	r5, r3
 800bbb8:	0553      	lsls	r3, r2, #21
 800bbba:	d530      	bpl.n	800bc1e <__ssputs_r+0x9e>
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7ff ff85 	bl	800bacc <_malloc_r>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	b950      	cbnz	r0, 800bbdc <__ssputs_r+0x5c>
 800bbc6:	230c      	movs	r3, #12
 800bbc8:	f8ca 3000 	str.w	r3, [sl]
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbd2:	81a3      	strh	r3, [r4, #12]
 800bbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbdc:	463a      	mov	r2, r7
 800bbde:	6921      	ldr	r1, [r4, #16]
 800bbe0:	f7ff fc32 	bl	800b448 <memcpy>
 800bbe4:	89a3      	ldrh	r3, [r4, #12]
 800bbe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	6126      	str	r6, [r4, #16]
 800bbf2:	6165      	str	r5, [r4, #20]
 800bbf4:	443e      	add	r6, r7
 800bbf6:	1bed      	subs	r5, r5, r7
 800bbf8:	6026      	str	r6, [r4, #0]
 800bbfa:	60a5      	str	r5, [r4, #8]
 800bbfc:	464e      	mov	r6, r9
 800bbfe:	454e      	cmp	r6, r9
 800bc00:	d900      	bls.n	800bc04 <__ssputs_r+0x84>
 800bc02:	464e      	mov	r6, r9
 800bc04:	4632      	mov	r2, r6
 800bc06:	4641      	mov	r1, r8
 800bc08:	6820      	ldr	r0, [r4, #0]
 800bc0a:	f000 f928 	bl	800be5e <memmove>
 800bc0e:	68a3      	ldr	r3, [r4, #8]
 800bc10:	1b9b      	subs	r3, r3, r6
 800bc12:	60a3      	str	r3, [r4, #8]
 800bc14:	6823      	ldr	r3, [r4, #0]
 800bc16:	441e      	add	r6, r3
 800bc18:	6026      	str	r6, [r4, #0]
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	e7dc      	b.n	800bbd8 <__ssputs_r+0x58>
 800bc1e:	462a      	mov	r2, r5
 800bc20:	f000 f938 	bl	800be94 <_realloc_r>
 800bc24:	4606      	mov	r6, r0
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d1e2      	bne.n	800bbf0 <__ssputs_r+0x70>
 800bc2a:	6921      	ldr	r1, [r4, #16]
 800bc2c:	4650      	mov	r0, sl
 800bc2e:	f7ff feff 	bl	800ba30 <_free_r>
 800bc32:	e7c8      	b.n	800bbc6 <__ssputs_r+0x46>

0800bc34 <_svfiprintf_r>:
 800bc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc38:	461d      	mov	r5, r3
 800bc3a:	898b      	ldrh	r3, [r1, #12]
 800bc3c:	061f      	lsls	r7, r3, #24
 800bc3e:	b09d      	sub	sp, #116	; 0x74
 800bc40:	4680      	mov	r8, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	4616      	mov	r6, r2
 800bc46:	d50f      	bpl.n	800bc68 <_svfiprintf_r+0x34>
 800bc48:	690b      	ldr	r3, [r1, #16]
 800bc4a:	b96b      	cbnz	r3, 800bc68 <_svfiprintf_r+0x34>
 800bc4c:	2140      	movs	r1, #64	; 0x40
 800bc4e:	f7ff ff3d 	bl	800bacc <_malloc_r>
 800bc52:	6020      	str	r0, [r4, #0]
 800bc54:	6120      	str	r0, [r4, #16]
 800bc56:	b928      	cbnz	r0, 800bc64 <_svfiprintf_r+0x30>
 800bc58:	230c      	movs	r3, #12
 800bc5a:	f8c8 3000 	str.w	r3, [r8]
 800bc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc62:	e0c8      	b.n	800bdf6 <_svfiprintf_r+0x1c2>
 800bc64:	2340      	movs	r3, #64	; 0x40
 800bc66:	6163      	str	r3, [r4, #20]
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc6c:	2320      	movs	r3, #32
 800bc6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc72:	2330      	movs	r3, #48	; 0x30
 800bc74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc78:	9503      	str	r5, [sp, #12]
 800bc7a:	f04f 0b01 	mov.w	fp, #1
 800bc7e:	4637      	mov	r7, r6
 800bc80:	463d      	mov	r5, r7
 800bc82:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc86:	b10b      	cbz	r3, 800bc8c <_svfiprintf_r+0x58>
 800bc88:	2b25      	cmp	r3, #37	; 0x25
 800bc8a:	d13e      	bne.n	800bd0a <_svfiprintf_r+0xd6>
 800bc8c:	ebb7 0a06 	subs.w	sl, r7, r6
 800bc90:	d00b      	beq.n	800bcaa <_svfiprintf_r+0x76>
 800bc92:	4653      	mov	r3, sl
 800bc94:	4632      	mov	r2, r6
 800bc96:	4621      	mov	r1, r4
 800bc98:	4640      	mov	r0, r8
 800bc9a:	f7ff ff71 	bl	800bb80 <__ssputs_r>
 800bc9e:	3001      	adds	r0, #1
 800bca0:	f000 80a4 	beq.w	800bdec <_svfiprintf_r+0x1b8>
 800bca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca6:	4453      	add	r3, sl
 800bca8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcaa:	783b      	ldrb	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 809d 	beq.w	800bdec <_svfiprintf_r+0x1b8>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	9307      	str	r3, [sp, #28]
 800bcc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcc4:	931a      	str	r3, [sp, #104]	; 0x68
 800bcc6:	462f      	mov	r7, r5
 800bcc8:	2205      	movs	r2, #5
 800bcca:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bcce:	4850      	ldr	r0, [pc, #320]	; (800be10 <_svfiprintf_r+0x1dc>)
 800bcd0:	f7f4 fa8e 	bl	80001f0 <memchr>
 800bcd4:	9b04      	ldr	r3, [sp, #16]
 800bcd6:	b9d0      	cbnz	r0, 800bd0e <_svfiprintf_r+0xda>
 800bcd8:	06d9      	lsls	r1, r3, #27
 800bcda:	bf44      	itt	mi
 800bcdc:	2220      	movmi	r2, #32
 800bcde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bce2:	071a      	lsls	r2, r3, #28
 800bce4:	bf44      	itt	mi
 800bce6:	222b      	movmi	r2, #43	; 0x2b
 800bce8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcec:	782a      	ldrb	r2, [r5, #0]
 800bcee:	2a2a      	cmp	r2, #42	; 0x2a
 800bcf0:	d015      	beq.n	800bd1e <_svfiprintf_r+0xea>
 800bcf2:	9a07      	ldr	r2, [sp, #28]
 800bcf4:	462f      	mov	r7, r5
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	250a      	movs	r5, #10
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd00:	3b30      	subs	r3, #48	; 0x30
 800bd02:	2b09      	cmp	r3, #9
 800bd04:	d94d      	bls.n	800bda2 <_svfiprintf_r+0x16e>
 800bd06:	b1b8      	cbz	r0, 800bd38 <_svfiprintf_r+0x104>
 800bd08:	e00f      	b.n	800bd2a <_svfiprintf_r+0xf6>
 800bd0a:	462f      	mov	r7, r5
 800bd0c:	e7b8      	b.n	800bc80 <_svfiprintf_r+0x4c>
 800bd0e:	4a40      	ldr	r2, [pc, #256]	; (800be10 <_svfiprintf_r+0x1dc>)
 800bd10:	1a80      	subs	r0, r0, r2
 800bd12:	fa0b f000 	lsl.w	r0, fp, r0
 800bd16:	4318      	orrs	r0, r3
 800bd18:	9004      	str	r0, [sp, #16]
 800bd1a:	463d      	mov	r5, r7
 800bd1c:	e7d3      	b.n	800bcc6 <_svfiprintf_r+0x92>
 800bd1e:	9a03      	ldr	r2, [sp, #12]
 800bd20:	1d11      	adds	r1, r2, #4
 800bd22:	6812      	ldr	r2, [r2, #0]
 800bd24:	9103      	str	r1, [sp, #12]
 800bd26:	2a00      	cmp	r2, #0
 800bd28:	db01      	blt.n	800bd2e <_svfiprintf_r+0xfa>
 800bd2a:	9207      	str	r2, [sp, #28]
 800bd2c:	e004      	b.n	800bd38 <_svfiprintf_r+0x104>
 800bd2e:	4252      	negs	r2, r2
 800bd30:	f043 0302 	orr.w	r3, r3, #2
 800bd34:	9207      	str	r2, [sp, #28]
 800bd36:	9304      	str	r3, [sp, #16]
 800bd38:	783b      	ldrb	r3, [r7, #0]
 800bd3a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd3c:	d10c      	bne.n	800bd58 <_svfiprintf_r+0x124>
 800bd3e:	787b      	ldrb	r3, [r7, #1]
 800bd40:	2b2a      	cmp	r3, #42	; 0x2a
 800bd42:	d133      	bne.n	800bdac <_svfiprintf_r+0x178>
 800bd44:	9b03      	ldr	r3, [sp, #12]
 800bd46:	1d1a      	adds	r2, r3, #4
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	9203      	str	r2, [sp, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bfb8      	it	lt
 800bd50:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd54:	3702      	adds	r7, #2
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	4d2e      	ldr	r5, [pc, #184]	; (800be14 <_svfiprintf_r+0x1e0>)
 800bd5a:	7839      	ldrb	r1, [r7, #0]
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f7f4 fa46 	bl	80001f0 <memchr>
 800bd64:	b138      	cbz	r0, 800bd76 <_svfiprintf_r+0x142>
 800bd66:	2340      	movs	r3, #64	; 0x40
 800bd68:	1b40      	subs	r0, r0, r5
 800bd6a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd6e:	9b04      	ldr	r3, [sp, #16]
 800bd70:	4303      	orrs	r3, r0
 800bd72:	3701      	adds	r7, #1
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	7839      	ldrb	r1, [r7, #0]
 800bd78:	4827      	ldr	r0, [pc, #156]	; (800be18 <_svfiprintf_r+0x1e4>)
 800bd7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd7e:	2206      	movs	r2, #6
 800bd80:	1c7e      	adds	r6, r7, #1
 800bd82:	f7f4 fa35 	bl	80001f0 <memchr>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d038      	beq.n	800bdfc <_svfiprintf_r+0x1c8>
 800bd8a:	4b24      	ldr	r3, [pc, #144]	; (800be1c <_svfiprintf_r+0x1e8>)
 800bd8c:	bb13      	cbnz	r3, 800bdd4 <_svfiprintf_r+0x1a0>
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	3307      	adds	r3, #7
 800bd92:	f023 0307 	bic.w	r3, r3, #7
 800bd96:	3308      	adds	r3, #8
 800bd98:	9303      	str	r3, [sp, #12]
 800bd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9c:	444b      	add	r3, r9
 800bd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bda0:	e76d      	b.n	800bc7e <_svfiprintf_r+0x4a>
 800bda2:	fb05 3202 	mla	r2, r5, r2, r3
 800bda6:	2001      	movs	r0, #1
 800bda8:	460f      	mov	r7, r1
 800bdaa:	e7a6      	b.n	800bcfa <_svfiprintf_r+0xc6>
 800bdac:	2300      	movs	r3, #0
 800bdae:	3701      	adds	r7, #1
 800bdb0:	9305      	str	r3, [sp, #20]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	250a      	movs	r5, #10
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdbc:	3a30      	subs	r2, #48	; 0x30
 800bdbe:	2a09      	cmp	r2, #9
 800bdc0:	d903      	bls.n	800bdca <_svfiprintf_r+0x196>
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0c8      	beq.n	800bd58 <_svfiprintf_r+0x124>
 800bdc6:	9105      	str	r1, [sp, #20]
 800bdc8:	e7c6      	b.n	800bd58 <_svfiprintf_r+0x124>
 800bdca:	fb05 2101 	mla	r1, r5, r1, r2
 800bdce:	2301      	movs	r3, #1
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	e7f0      	b.n	800bdb6 <_svfiprintf_r+0x182>
 800bdd4:	ab03      	add	r3, sp, #12
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	4622      	mov	r2, r4
 800bdda:	4b11      	ldr	r3, [pc, #68]	; (800be20 <_svfiprintf_r+0x1ec>)
 800bddc:	a904      	add	r1, sp, #16
 800bdde:	4640      	mov	r0, r8
 800bde0:	f7fe f846 	bl	8009e70 <_printf_float>
 800bde4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bde8:	4681      	mov	r9, r0
 800bdea:	d1d6      	bne.n	800bd9a <_svfiprintf_r+0x166>
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	065b      	lsls	r3, r3, #25
 800bdf0:	f53f af35 	bmi.w	800bc5e <_svfiprintf_r+0x2a>
 800bdf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdf6:	b01d      	add	sp, #116	; 0x74
 800bdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfc:	ab03      	add	r3, sp, #12
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	4622      	mov	r2, r4
 800be02:	4b07      	ldr	r3, [pc, #28]	; (800be20 <_svfiprintf_r+0x1ec>)
 800be04:	a904      	add	r1, sp, #16
 800be06:	4640      	mov	r0, r8
 800be08:	f7fe fae8 	bl	800a3dc <_printf_i>
 800be0c:	e7ea      	b.n	800bde4 <_svfiprintf_r+0x1b0>
 800be0e:	bf00      	nop
 800be10:	080101cc 	.word	0x080101cc
 800be14:	080101d2 	.word	0x080101d2
 800be18:	080101d6 	.word	0x080101d6
 800be1c:	08009e71 	.word	0x08009e71
 800be20:	0800bb81 	.word	0x0800bb81

0800be24 <_sbrk_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	4c06      	ldr	r4, [pc, #24]	; (800be40 <_sbrk_r+0x1c>)
 800be28:	2300      	movs	r3, #0
 800be2a:	4605      	mov	r5, r0
 800be2c:	4608      	mov	r0, r1
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	f7fd fd54 	bl	80098dc <_sbrk>
 800be34:	1c43      	adds	r3, r0, #1
 800be36:	d102      	bne.n	800be3e <_sbrk_r+0x1a>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	b103      	cbz	r3, 800be3e <_sbrk_r+0x1a>
 800be3c:	602b      	str	r3, [r5, #0]
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	2000e8ac 	.word	0x2000e8ac

0800be44 <__ascii_wctomb>:
 800be44:	b149      	cbz	r1, 800be5a <__ascii_wctomb+0x16>
 800be46:	2aff      	cmp	r2, #255	; 0xff
 800be48:	bf85      	ittet	hi
 800be4a:	238a      	movhi	r3, #138	; 0x8a
 800be4c:	6003      	strhi	r3, [r0, #0]
 800be4e:	700a      	strbls	r2, [r1, #0]
 800be50:	f04f 30ff 	movhi.w	r0, #4294967295
 800be54:	bf98      	it	ls
 800be56:	2001      	movls	r0, #1
 800be58:	4770      	bx	lr
 800be5a:	4608      	mov	r0, r1
 800be5c:	4770      	bx	lr

0800be5e <memmove>:
 800be5e:	4288      	cmp	r0, r1
 800be60:	b510      	push	{r4, lr}
 800be62:	eb01 0302 	add.w	r3, r1, r2
 800be66:	d807      	bhi.n	800be78 <memmove+0x1a>
 800be68:	1e42      	subs	r2, r0, #1
 800be6a:	4299      	cmp	r1, r3
 800be6c:	d00a      	beq.n	800be84 <memmove+0x26>
 800be6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be72:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be76:	e7f8      	b.n	800be6a <memmove+0xc>
 800be78:	4283      	cmp	r3, r0
 800be7a:	d9f5      	bls.n	800be68 <memmove+0xa>
 800be7c:	1881      	adds	r1, r0, r2
 800be7e:	1ad2      	subs	r2, r2, r3
 800be80:	42d3      	cmn	r3, r2
 800be82:	d100      	bne.n	800be86 <memmove+0x28>
 800be84:	bd10      	pop	{r4, pc}
 800be86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800be8e:	e7f7      	b.n	800be80 <memmove+0x22>

0800be90 <__malloc_lock>:
 800be90:	4770      	bx	lr

0800be92 <__malloc_unlock>:
 800be92:	4770      	bx	lr

0800be94 <_realloc_r>:
 800be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be96:	4607      	mov	r7, r0
 800be98:	4614      	mov	r4, r2
 800be9a:	460e      	mov	r6, r1
 800be9c:	b921      	cbnz	r1, 800bea8 <_realloc_r+0x14>
 800be9e:	4611      	mov	r1, r2
 800bea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bea4:	f7ff be12 	b.w	800bacc <_malloc_r>
 800bea8:	b922      	cbnz	r2, 800beb4 <_realloc_r+0x20>
 800beaa:	f7ff fdc1 	bl	800ba30 <_free_r>
 800beae:	4625      	mov	r5, r4
 800beb0:	4628      	mov	r0, r5
 800beb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb4:	f000 f814 	bl	800bee0 <_malloc_usable_size_r>
 800beb8:	42a0      	cmp	r0, r4
 800beba:	d20f      	bcs.n	800bedc <_realloc_r+0x48>
 800bebc:	4621      	mov	r1, r4
 800bebe:	4638      	mov	r0, r7
 800bec0:	f7ff fe04 	bl	800bacc <_malloc_r>
 800bec4:	4605      	mov	r5, r0
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d0f2      	beq.n	800beb0 <_realloc_r+0x1c>
 800beca:	4631      	mov	r1, r6
 800becc:	4622      	mov	r2, r4
 800bece:	f7ff fabb 	bl	800b448 <memcpy>
 800bed2:	4631      	mov	r1, r6
 800bed4:	4638      	mov	r0, r7
 800bed6:	f7ff fdab 	bl	800ba30 <_free_r>
 800beda:	e7e9      	b.n	800beb0 <_realloc_r+0x1c>
 800bedc:	4635      	mov	r5, r6
 800bede:	e7e7      	b.n	800beb0 <_realloc_r+0x1c>

0800bee0 <_malloc_usable_size_r>:
 800bee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bee4:	1f18      	subs	r0, r3, #4
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfbc      	itt	lt
 800beea:	580b      	ldrlt	r3, [r1, r0]
 800beec:	18c0      	addlt	r0, r0, r3
 800beee:	4770      	bx	lr

0800bef0 <_init>:
 800bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef2:	bf00      	nop
 800bef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef6:	bc08      	pop	{r3}
 800bef8:	469e      	mov	lr, r3
 800befa:	4770      	bx	lr

0800befc <_fini>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	bf00      	nop
 800bf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf02:	bc08      	pop	{r3}
 800bf04:	469e      	mov	lr, r3
 800bf06:	4770      	bx	lr
